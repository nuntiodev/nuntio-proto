// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.26.0
// 	protoc        v3.19.1
// source: social_connect.proto

package go_social

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type ScopeType int32

const (
	ScopeType_INVALID_SCOPE        ScopeType = 0
	ScopeType_DEFAULT_SCOPE        ScopeType = 1
	ScopeType_OFFLINE_ACCESS_SCOPE ScopeType = 2
	ScopeType_GENDER_SCOPE         ScopeType = 3
	ScopeType_NAME_SCOPE           ScopeType = 4
	ScopeType_BIRTHDAY_SCOPE       ScopeType = 5
	ScopeType_COUNTRY_SCOPE        ScopeType = 6
	ScopeType_EMAIL_SCOPE          ScopeType = 7
)

// Enum value maps for ScopeType.
var (
	ScopeType_name = map[int32]string{
		0: "INVALID_SCOPE",
		1: "DEFAULT_SCOPE",
		2: "OFFLINE_ACCESS_SCOPE",
		3: "GENDER_SCOPE",
		4: "NAME_SCOPE",
		5: "BIRTHDAY_SCOPE",
		6: "COUNTRY_SCOPE",
		7: "EMAIL_SCOPE",
	}
	ScopeType_value = map[string]int32{
		"INVALID_SCOPE":        0,
		"DEFAULT_SCOPE":        1,
		"OFFLINE_ACCESS_SCOPE": 2,
		"GENDER_SCOPE":         3,
		"NAME_SCOPE":           4,
		"BIRTHDAY_SCOPE":       5,
		"COUNTRY_SCOPE":        6,
		"EMAIL_SCOPE":          7,
	}
)

func (x ScopeType) Enum() *ScopeType {
	p := new(ScopeType)
	*p = x
	return p
}

func (x ScopeType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ScopeType) Descriptor() protoreflect.EnumDescriptor {
	return file_social_connect_proto_enumTypes[0].Descriptor()
}

func (ScopeType) Type() protoreflect.EnumType {
	return &file_social_connect_proto_enumTypes[0]
}

func (x ScopeType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ScopeType.Descriptor instead.
func (ScopeType) EnumDescriptor() ([]byte, []int) {
	return file_social_connect_proto_rawDescGZIP(), []int{0}
}

type GrantType int32

const (
	GrantType_INVALID_GRANT GrantType = 0
	GrantType_AUTH_GRANT    GrantType = 1
	GrantType_REFRESH_GRANT GrantType = 2
)

// Enum value maps for GrantType.
var (
	GrantType_name = map[int32]string{
		0: "INVALID_GRANT",
		1: "AUTH_GRANT",
		2: "REFRESH_GRANT",
	}
	GrantType_value = map[string]int32{
		"INVALID_GRANT": 0,
		"AUTH_GRANT":    1,
		"REFRESH_GRANT": 2,
	}
)

func (x GrantType) Enum() *GrantType {
	p := new(GrantType)
	*p = x
	return p
}

func (x GrantType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (GrantType) Descriptor() protoreflect.EnumDescriptor {
	return file_social_connect_proto_enumTypes[1].Descriptor()
}

func (GrantType) Type() protoreflect.EnumType {
	return &file_social_connect_proto_enumTypes[1]
}

func (x GrantType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use GrantType.Descriptor instead.
func (GrantType) EnumDescriptor() ([]byte, []int) {
	return file_social_connect_proto_rawDescGZIP(), []int{1}
}

type ResponseType int32

const (
	ResponseType_INVALID_RESPONSE ResponseType = 0
	ResponseType_CODE_RESPONSE    ResponseType = 1
	ResponseType_TOKEN_RESPONSE   ResponseType = 2
	ResponseType_ID_RESPONSE      ResponseType = 3
)

// Enum value maps for ResponseType.
var (
	ResponseType_name = map[int32]string{
		0: "INVALID_RESPONSE",
		1: "CODE_RESPONSE",
		2: "TOKEN_RESPONSE",
		3: "ID_RESPONSE",
	}
	ResponseType_value = map[string]int32{
		"INVALID_RESPONSE": 0,
		"CODE_RESPONSE":    1,
		"TOKEN_RESPONSE":   2,
		"ID_RESPONSE":      3,
	}
)

func (x ResponseType) Enum() *ResponseType {
	p := new(ResponseType)
	*p = x
	return p
}

func (x ResponseType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ResponseType) Descriptor() protoreflect.EnumDescriptor {
	return file_social_connect_proto_enumTypes[2].Descriptor()
}

func (ResponseType) Type() protoreflect.EnumType {
	return &file_social_connect_proto_enumTypes[2]
}

func (x ResponseType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ResponseType.Descriptor instead.
func (ResponseType) EnumDescriptor() ([]byte, []int) {
	return file_social_connect_proto_rawDescGZIP(), []int{2}
}

type Scope struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ScopeType     ScopeType `protobuf:"varint,1,opt,name=scope_type,json=scopeType,proto3,enum=SocialConnect.ScopeType" json:"scope_type,omitempty"`
	ReadId        bool      `protobuf:"varint,2,opt,name=read_id,json=readId,proto3" json:"read_id,omitempty"`
	ReadEmail     bool      `protobuf:"varint,3,opt,name=read_email,json=readEmail,proto3" json:"read_email,omitempty"`
	ReadGender    bool      `protobuf:"varint,4,opt,name=read_gender,json=readGender,proto3" json:"read_gender,omitempty"`
	ReadCreatedAt bool      `protobuf:"varint,5,opt,name=read_created_at,json=readCreatedAt,proto3" json:"read_created_at,omitempty"`
	OfflineAccess bool      `protobuf:"varint,6,opt,name=offline_access,json=offlineAccess,proto3" json:"offline_access,omitempty"`
	ReadName      bool      `protobuf:"varint,7,opt,name=read_name,json=readName,proto3" json:"read_name,omitempty"`
	ReadBirthday  bool      `protobuf:"varint,8,opt,name=read_birthday,json=readBirthday,proto3" json:"read_birthday,omitempty"`
	ReadCountry   bool      `protobuf:"varint,9,opt,name=read_country,json=readCountry,proto3" json:"read_country,omitempty"`
	Name          string    `protobuf:"bytes,10,opt,name=name,proto3" json:"name,omitempty"`
	Key           string    `protobuf:"bytes,11,opt,name=key,proto3" json:"key,omitempty"`
}

func (x *Scope) Reset() {
	*x = Scope{}
	if protoimpl.UnsafeEnabled {
		mi := &file_social_connect_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Scope) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Scope) ProtoMessage() {}

func (x *Scope) ProtoReflect() protoreflect.Message {
	mi := &file_social_connect_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Scope.ProtoReflect.Descriptor instead.
func (*Scope) Descriptor() ([]byte, []int) {
	return file_social_connect_proto_rawDescGZIP(), []int{0}
}

func (x *Scope) GetScopeType() ScopeType {
	if x != nil {
		return x.ScopeType
	}
	return ScopeType_INVALID_SCOPE
}

func (x *Scope) GetReadId() bool {
	if x != nil {
		return x.ReadId
	}
	return false
}

func (x *Scope) GetReadEmail() bool {
	if x != nil {
		return x.ReadEmail
	}
	return false
}

func (x *Scope) GetReadGender() bool {
	if x != nil {
		return x.ReadGender
	}
	return false
}

func (x *Scope) GetReadCreatedAt() bool {
	if x != nil {
		return x.ReadCreatedAt
	}
	return false
}

func (x *Scope) GetOfflineAccess() bool {
	if x != nil {
		return x.OfflineAccess
	}
	return false
}

func (x *Scope) GetReadName() bool {
	if x != nil {
		return x.ReadName
	}
	return false
}

func (x *Scope) GetReadBirthday() bool {
	if x != nil {
		return x.ReadBirthday
	}
	return false
}

func (x *Scope) GetReadCountry() bool {
	if x != nil {
		return x.ReadCountry
	}
	return false
}

func (x *Scope) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Scope) GetKey() string {
	if x != nil {
		return x.Key
	}
	return ""
}

type Grant struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	GrantType GrantType `protobuf:"varint,1,opt,name=grant_type,json=grantType,proto3,enum=SocialConnect.GrantType" json:"grant_type,omitempty"`
	Name      string    `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
}

func (x *Grant) Reset() {
	*x = Grant{}
	if protoimpl.UnsafeEnabled {
		mi := &file_social_connect_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Grant) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Grant) ProtoMessage() {}

func (x *Grant) ProtoReflect() protoreflect.Message {
	mi := &file_social_connect_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Grant.ProtoReflect.Descriptor instead.
func (*Grant) Descriptor() ([]byte, []int) {
	return file_social_connect_proto_rawDescGZIP(), []int{1}
}

func (x *Grant) GetGrantType() GrantType {
	if x != nil {
		return x.GrantType
	}
	return GrantType_INVALID_GRANT
}

func (x *Grant) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

type Response struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ResponseType ResponseType `protobuf:"varint,1,opt,name=response_type,json=responseType,proto3,enum=SocialConnect.ResponseType" json:"response_type,omitempty"`
	Name         string       `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
}

func (x *Response) Reset() {
	*x = Response{}
	if protoimpl.UnsafeEnabled {
		mi := &file_social_connect_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Response) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Response) ProtoMessage() {}

func (x *Response) ProtoReflect() protoreflect.Message {
	mi := &file_social_connect_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Response.ProtoReflect.Descriptor instead.
func (*Response) Descriptor() ([]byte, []int) {
	return file_social_connect_proto_rawDescGZIP(), []int{2}
}

func (x *Response) GetResponseType() ResponseType {
	if x != nil {
		return x.ResponseType
	}
	return ResponseType_INVALID_RESPONSE
}

func (x *Response) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

type Metadata struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	IsOpen            bool          `protobuf:"varint,1,opt,name=is_open,json=isOpen,proto3" json:"is_open,omitempty"`
	AllowedEmails     []string      `protobuf:"bytes,21,rep,name=allowed_emails,json=allowedEmails,proto3" json:"allowed_emails,omitempty"`
	About             string        `protobuf:"bytes,3,opt,name=about,proto3" json:"about,omitempty"`
	AgeLowerLimit     int32         `protobuf:"varint,4,opt,name=age_lower_limit,json=ageLowerLimit,proto3" json:"age_lower_limit,omitempty"`
	AgeUpperLimit     int32         `protobuf:"varint,5,opt,name=age_upper_limit,json=ageUpperLimit,proto3" json:"age_upper_limit,omitempty"`
	AllowedCountries  []CountryCode `protobuf:"varint,6,rep,packed,name=allowed_countries,json=allowedCountries,proto3,enum=Social.CountryCode" json:"allowed_countries,omitempty"`
	OnlyVerifiedUsers bool          `protobuf:"varint,7,opt,name=only_verified_users,json=onlyVerifiedUsers,proto3" json:"only_verified_users,omitempty"`
}

func (x *Metadata) Reset() {
	*x = Metadata{}
	if protoimpl.UnsafeEnabled {
		mi := &file_social_connect_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Metadata) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Metadata) ProtoMessage() {}

func (x *Metadata) ProtoReflect() protoreflect.Message {
	mi := &file_social_connect_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Metadata.ProtoReflect.Descriptor instead.
func (*Metadata) Descriptor() ([]byte, []int) {
	return file_social_connect_proto_rawDescGZIP(), []int{3}
}

func (x *Metadata) GetIsOpen() bool {
	if x != nil {
		return x.IsOpen
	}
	return false
}

func (x *Metadata) GetAllowedEmails() []string {
	if x != nil {
		return x.AllowedEmails
	}
	return nil
}

func (x *Metadata) GetAbout() string {
	if x != nil {
		return x.About
	}
	return ""
}

func (x *Metadata) GetAgeLowerLimit() int32 {
	if x != nil {
		return x.AgeLowerLimit
	}
	return 0
}

func (x *Metadata) GetAgeUpperLimit() int32 {
	if x != nil {
		return x.AgeUpperLimit
	}
	return 0
}

func (x *Metadata) GetAllowedCountries() []CountryCode {
	if x != nil {
		return x.AllowedCountries
	}
	return nil
}

func (x *Metadata) GetOnlyVerifiedUsers() bool {
	if x != nil {
		return x.OnlyVerifiedUsers
	}
	return false
}

type App struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id                 string                 `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Name               string                 `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	Password           string                 `protobuf:"bytes,3,opt,name=password,proto3" json:"password,omitempty"`
	Email              string                 `protobuf:"bytes,4,opt,name=email,proto3" json:"email,omitempty"`
	OwnerId            string                 `protobuf:"bytes,5,opt,name=owner_id,json=ownerId,proto3" json:"owner_id,omitempty"`
	Website            string                 `protobuf:"bytes,6,opt,name=website,proto3" json:"website,omitempty"`
	Logo               string                 `protobuf:"bytes,7,opt,name=logo,proto3" json:"logo,omitempty"`
	Terms              string                 `protobuf:"bytes,8,opt,name=terms,proto3" json:"terms,omitempty"`
	Metadata           *Metadata              `protobuf:"bytes,9,opt,name=metadata,proto3" json:"metadata,omitempty"`
	Audience           []string               `protobuf:"bytes,10,rep,name=audience,proto3" json:"audience,omitempty"`
	Scopes             []ScopeType            `protobuf:"varint,11,rep,packed,name=scopes,proto3,enum=SocialConnect.ScopeType" json:"scopes,omitempty"`
	Grants             []GrantType            `protobuf:"varint,12,rep,packed,name=grants,proto3,enum=SocialConnect.GrantType" json:"grants,omitempty"`
	Responses          []ResponseType         `protobuf:"varint,13,rep,packed,name=responses,proto3,enum=SocialConnect.ResponseType" json:"responses,omitempty"`
	Callbacks          []string               `protobuf:"bytes,14,rep,name=callbacks,proto3" json:"callbacks,omitempty"`
	CreatedAt          *timestamppb.Timestamp `protobuf:"bytes,15,opt,name=created_at,json=createdAt,proto3" json:"created_at,omitempty"`
	UpdatedAt          *timestamppb.Timestamp `protobuf:"bytes,16,opt,name=updated_at,json=updatedAt,proto3" json:"updated_at,omitempty"`
	AvailableScopes    []*Scope               `protobuf:"bytes,17,rep,name=available_scopes,json=availableScopes,proto3" json:"available_scopes,omitempty"`
	AvailableGrants    []*Grant               `protobuf:"bytes,18,rep,name=available_grants,json=availableGrants,proto3" json:"available_grants,omitempty"`
	AvailableResponses []*Response            `protobuf:"bytes,19,rep,name=available_responses,json=availableResponses,proto3" json:"available_responses,omitempty"`
	AvailableCountries []*Country             `protobuf:"bytes,20,rep,name=available_countries,json=availableCountries,proto3" json:"available_countries,omitempty"`
}

func (x *App) Reset() {
	*x = App{}
	if protoimpl.UnsafeEnabled {
		mi := &file_social_connect_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *App) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*App) ProtoMessage() {}

func (x *App) ProtoReflect() protoreflect.Message {
	mi := &file_social_connect_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use App.ProtoReflect.Descriptor instead.
func (*App) Descriptor() ([]byte, []int) {
	return file_social_connect_proto_rawDescGZIP(), []int{4}
}

func (x *App) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *App) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *App) GetPassword() string {
	if x != nil {
		return x.Password
	}
	return ""
}

func (x *App) GetEmail() string {
	if x != nil {
		return x.Email
	}
	return ""
}

func (x *App) GetOwnerId() string {
	if x != nil {
		return x.OwnerId
	}
	return ""
}

func (x *App) GetWebsite() string {
	if x != nil {
		return x.Website
	}
	return ""
}

func (x *App) GetLogo() string {
	if x != nil {
		return x.Logo
	}
	return ""
}

func (x *App) GetTerms() string {
	if x != nil {
		return x.Terms
	}
	return ""
}

func (x *App) GetMetadata() *Metadata {
	if x != nil {
		return x.Metadata
	}
	return nil
}

func (x *App) GetAudience() []string {
	if x != nil {
		return x.Audience
	}
	return nil
}

func (x *App) GetScopes() []ScopeType {
	if x != nil {
		return x.Scopes
	}
	return nil
}

func (x *App) GetGrants() []GrantType {
	if x != nil {
		return x.Grants
	}
	return nil
}

func (x *App) GetResponses() []ResponseType {
	if x != nil {
		return x.Responses
	}
	return nil
}

func (x *App) GetCallbacks() []string {
	if x != nil {
		return x.Callbacks
	}
	return nil
}

func (x *App) GetCreatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.CreatedAt
	}
	return nil
}

func (x *App) GetUpdatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.UpdatedAt
	}
	return nil
}

func (x *App) GetAvailableScopes() []*Scope {
	if x != nil {
		return x.AvailableScopes
	}
	return nil
}

func (x *App) GetAvailableGrants() []*Grant {
	if x != nil {
		return x.AvailableGrants
	}
	return nil
}

func (x *App) GetAvailableResponses() []*Response {
	if x != nil {
		return x.AvailableResponses
	}
	return nil
}

func (x *App) GetAvailableCountries() []*Country {
	if x != nil {
		return x.AvailableCountries
	}
	return nil
}

type ConnectPublicRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Challenge            string                `protobuf:"bytes,1,opt,name=challenge,proto3" json:"challenge,omitempty"`
	Email                string                `protobuf:"bytes,2,opt,name=email,proto3" json:"email,omitempty"`
	Password             string                `protobuf:"bytes,3,opt,name=password,proto3" json:"password,omitempty"`
	Gender               Gender                `protobuf:"varint,4,opt,name=gender,proto3,enum=Social.Gender" json:"gender,omitempty"`
	Consent              bool                  `protobuf:"varint,5,opt,name=consent,proto3" json:"consent,omitempty"`
	IdentityToken        string                `protobuf:"bytes,6,opt,name=identity_token,json=identityToken,proto3" json:"identity_token,omitempty"`
	VerificationProvider *VerificationProvider `protobuf:"bytes,7,opt,name=verification_provider,json=verificationProvider,proto3" json:"verification_provider,omitempty"`
	AuthToken            string                `protobuf:"bytes,8,opt,name=auth_token,json=authToken,proto3" json:"auth_token,omitempty"`
}

func (x *ConnectPublicRequest) Reset() {
	*x = ConnectPublicRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_social_connect_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ConnectPublicRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ConnectPublicRequest) ProtoMessage() {}

func (x *ConnectPublicRequest) ProtoReflect() protoreflect.Message {
	mi := &file_social_connect_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ConnectPublicRequest.ProtoReflect.Descriptor instead.
func (*ConnectPublicRequest) Descriptor() ([]byte, []int) {
	return file_social_connect_proto_rawDescGZIP(), []int{5}
}

func (x *ConnectPublicRequest) GetChallenge() string {
	if x != nil {
		return x.Challenge
	}
	return ""
}

func (x *ConnectPublicRequest) GetEmail() string {
	if x != nil {
		return x.Email
	}
	return ""
}

func (x *ConnectPublicRequest) GetPassword() string {
	if x != nil {
		return x.Password
	}
	return ""
}

func (x *ConnectPublicRequest) GetGender() Gender {
	if x != nil {
		return x.Gender
	}
	return Gender_INVALID_GENDER
}

func (x *ConnectPublicRequest) GetConsent() bool {
	if x != nil {
		return x.Consent
	}
	return false
}

func (x *ConnectPublicRequest) GetIdentityToken() string {
	if x != nil {
		return x.IdentityToken
	}
	return ""
}

func (x *ConnectPublicRequest) GetVerificationProvider() *VerificationProvider {
	if x != nil {
		return x.VerificationProvider
	}
	return nil
}

func (x *ConnectPublicRequest) GetAuthToken() string {
	if x != nil {
		return x.AuthToken
	}
	return ""
}

type ConnectPublicResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	App          *App    `protobuf:"bytes,1,opt,name=app,proto3" json:"app,omitempty"`
	Email        string  `protobuf:"bytes,2,opt,name=email,proto3" json:"email,omitempty"`
	RedirectAddr string  `protobuf:"bytes,3,opt,name=redirect_addr,json=redirectAddr,proto3" json:"redirect_addr,omitempty"`
	Error        []Error `protobuf:"varint,4,rep,packed,name=error,proto3,enum=Social.Error" json:"error,omitempty"`
}

func (x *ConnectPublicResponse) Reset() {
	*x = ConnectPublicResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_social_connect_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ConnectPublicResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ConnectPublicResponse) ProtoMessage() {}

func (x *ConnectPublicResponse) ProtoReflect() protoreflect.Message {
	mi := &file_social_connect_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ConnectPublicResponse.ProtoReflect.Descriptor instead.
func (*ConnectPublicResponse) Descriptor() ([]byte, []int) {
	return file_social_connect_proto_rawDescGZIP(), []int{6}
}

func (x *ConnectPublicResponse) GetApp() *App {
	if x != nil {
		return x.App
	}
	return nil
}

func (x *ConnectPublicResponse) GetEmail() string {
	if x != nil {
		return x.Email
	}
	return ""
}

func (x *ConnectPublicResponse) GetRedirectAddr() string {
	if x != nil {
		return x.RedirectAddr
	}
	return ""
}

func (x *ConnectPublicResponse) GetError() []Error {
	if x != nil {
		return x.Error
	}
	return nil
}

type ConnectAdminRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	App *App `protobuf:"bytes,1,opt,name=app,proto3" json:"app,omitempty"`
}

func (x *ConnectAdminRequest) Reset() {
	*x = ConnectAdminRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_social_connect_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ConnectAdminRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ConnectAdminRequest) ProtoMessage() {}

func (x *ConnectAdminRequest) ProtoReflect() protoreflect.Message {
	mi := &file_social_connect_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ConnectAdminRequest.ProtoReflect.Descriptor instead.
func (*ConnectAdminRequest) Descriptor() ([]byte, []int) {
	return file_social_connect_proto_rawDescGZIP(), []int{7}
}

func (x *ConnectAdminRequest) GetApp() *App {
	if x != nil {
		return x.App
	}
	return nil
}

type ConnectAdminResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	App *App `protobuf:"bytes,1,opt,name=app,proto3" json:"app,omitempty"`
}

func (x *ConnectAdminResponse) Reset() {
	*x = ConnectAdminResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_social_connect_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ConnectAdminResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ConnectAdminResponse) ProtoMessage() {}

func (x *ConnectAdminResponse) ProtoReflect() protoreflect.Message {
	mi := &file_social_connect_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ConnectAdminResponse.ProtoReflect.Descriptor instead.
func (*ConnectAdminResponse) Descriptor() ([]byte, []int) {
	return file_social_connect_proto_rawDescGZIP(), []int{8}
}

func (x *ConnectAdminResponse) GetApp() *App {
	if x != nil {
		return x.App
	}
	return nil
}

var File_social_connect_proto protoreflect.FileDescriptor

var file_social_connect_proto_rawDesc = []byte{
	0x0a, 0x14, 0x73, 0x6f, 0x63, 0x69, 0x61, 0x6c, 0x5f, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x0d, 0x53, 0x6f, 0x63, 0x69, 0x61, 0x6c, 0x43, 0x6f,
	0x6e, 0x6e, 0x65, 0x63, 0x74, 0x1a, 0x1f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x0c, 0x73, 0x6f, 0x63, 0x69, 0x61, 0x6c, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x22, 0xf3, 0x02, 0x0a, 0x05, 0x53, 0x63, 0x6f, 0x70, 0x65, 0x12, 0x37,
	0x0a, 0x0a, 0x73, 0x63, 0x6f, 0x70, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x18, 0x2e, 0x53, 0x6f, 0x63, 0x69, 0x61, 0x6c, 0x43, 0x6f, 0x6e, 0x6e, 0x65,
	0x63, 0x74, 0x2e, 0x53, 0x63, 0x6f, 0x70, 0x65, 0x54, 0x79, 0x70, 0x65, 0x52, 0x09, 0x73, 0x63,
	0x6f, 0x70, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x17, 0x0a, 0x07, 0x72, 0x65, 0x61, 0x64, 0x5f,
	0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x72, 0x65, 0x61, 0x64, 0x49, 0x64,
	0x12, 0x1d, 0x0a, 0x0a, 0x72, 0x65, 0x61, 0x64, 0x5f, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x09, 0x72, 0x65, 0x61, 0x64, 0x45, 0x6d, 0x61, 0x69, 0x6c, 0x12,
	0x1f, 0x0a, 0x0b, 0x72, 0x65, 0x61, 0x64, 0x5f, 0x67, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x0a, 0x72, 0x65, 0x61, 0x64, 0x47, 0x65, 0x6e, 0x64, 0x65, 0x72,
	0x12, 0x26, 0x0a, 0x0f, 0x72, 0x65, 0x61, 0x64, 0x5f, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64,
	0x5f, 0x61, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0d, 0x72, 0x65, 0x61, 0x64, 0x43,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x25, 0x0a, 0x0e, 0x6f, 0x66, 0x66, 0x6c,
	0x69, 0x6e, 0x65, 0x5f, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x0d, 0x6f, 0x66, 0x66, 0x6c, 0x69, 0x6e, 0x65, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x12,
	0x1b, 0x0a, 0x09, 0x72, 0x65, 0x61, 0x64, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x07, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x08, 0x72, 0x65, 0x61, 0x64, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x23, 0x0a, 0x0d,
	0x72, 0x65, 0x61, 0x64, 0x5f, 0x62, 0x69, 0x72, 0x74, 0x68, 0x64, 0x61, 0x79, 0x18, 0x08, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x0c, 0x72, 0x65, 0x61, 0x64, 0x42, 0x69, 0x72, 0x74, 0x68, 0x64, 0x61,
	0x79, 0x12, 0x21, 0x0a, 0x0c, 0x72, 0x65, 0x61, 0x64, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x72,
	0x79, 0x18, 0x09, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0b, 0x72, 0x65, 0x61, 0x64, 0x43, 0x6f, 0x75,
	0x6e, 0x74, 0x72, 0x79, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x0a, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18,
	0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x22, 0x54, 0x0a, 0x05, 0x47, 0x72,
	0x61, 0x6e, 0x74, 0x12, 0x37, 0x0a, 0x0a, 0x67, 0x72, 0x61, 0x6e, 0x74, 0x5f, 0x74, 0x79, 0x70,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x18, 0x2e, 0x53, 0x6f, 0x63, 0x69, 0x61, 0x6c,
	0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x2e, 0x47, 0x72, 0x61, 0x6e, 0x74, 0x54, 0x79, 0x70,
	0x65, 0x52, 0x09, 0x67, 0x72, 0x61, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x12, 0x0a, 0x04,
	0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65,
	0x22, 0x60, 0x0a, 0x08, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x40, 0x0a, 0x0d,
	0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x1b, 0x2e, 0x53, 0x6f, 0x63, 0x69, 0x61, 0x6c, 0x43, 0x6f, 0x6e, 0x6e,
	0x65, 0x63, 0x74, 0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x54, 0x79, 0x70, 0x65,
	0x52, 0x0c, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x12,
	0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61,
	0x6d, 0x65, 0x22, 0xa2, 0x02, 0x0a, 0x08, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x12,
	0x17, 0x0a, 0x07, 0x69, 0x73, 0x5f, 0x6f, 0x70, 0x65, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x06, 0x69, 0x73, 0x4f, 0x70, 0x65, 0x6e, 0x12, 0x25, 0x0a, 0x0e, 0x61, 0x6c, 0x6c, 0x6f,
	0x77, 0x65, 0x64, 0x5f, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x73, 0x18, 0x15, 0x20, 0x03, 0x28, 0x09,
	0x52, 0x0d, 0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x65, 0x64, 0x45, 0x6d, 0x61, 0x69, 0x6c, 0x73, 0x12,
	0x14, 0x0a, 0x05, 0x61, 0x62, 0x6f, 0x75, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05,
	0x61, 0x62, 0x6f, 0x75, 0x74, 0x12, 0x26, 0x0a, 0x0f, 0x61, 0x67, 0x65, 0x5f, 0x6c, 0x6f, 0x77,
	0x65, 0x72, 0x5f, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0d,
	0x61, 0x67, 0x65, 0x4c, 0x6f, 0x77, 0x65, 0x72, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x12, 0x26, 0x0a,
	0x0f, 0x61, 0x67, 0x65, 0x5f, 0x75, 0x70, 0x70, 0x65, 0x72, 0x5f, 0x6c, 0x69, 0x6d, 0x69, 0x74,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0d, 0x61, 0x67, 0x65, 0x55, 0x70, 0x70, 0x65, 0x72,
	0x4c, 0x69, 0x6d, 0x69, 0x74, 0x12, 0x40, 0x0a, 0x11, 0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x65, 0x64,
	0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x69, 0x65, 0x73, 0x18, 0x06, 0x20, 0x03, 0x28, 0x0e,
	0x32, 0x13, 0x2e, 0x53, 0x6f, 0x63, 0x69, 0x61, 0x6c, 0x2e, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x72,
	0x79, 0x43, 0x6f, 0x64, 0x65, 0x52, 0x10, 0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x65, 0x64, 0x43, 0x6f,
	0x75, 0x6e, 0x74, 0x72, 0x69, 0x65, 0x73, 0x12, 0x2e, 0x0a, 0x13, 0x6f, 0x6e, 0x6c, 0x79, 0x5f,
	0x76, 0x65, 0x72, 0x69, 0x66, 0x69, 0x65, 0x64, 0x5f, 0x75, 0x73, 0x65, 0x72, 0x73, 0x18, 0x07,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x11, 0x6f, 0x6e, 0x6c, 0x79, 0x56, 0x65, 0x72, 0x69, 0x66, 0x69,
	0x65, 0x64, 0x55, 0x73, 0x65, 0x72, 0x73, 0x22, 0xcc, 0x06, 0x0a, 0x03, 0x41, 0x70, 0x70, 0x12,
	0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12,
	0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e,
	0x61, 0x6d, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x70, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x12,
	0x14, 0x0a, 0x05, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05,
	0x65, 0x6d, 0x61, 0x69, 0x6c, 0x12, 0x19, 0x0a, 0x08, 0x6f, 0x77, 0x6e, 0x65, 0x72, 0x5f, 0x69,
	0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6f, 0x77, 0x6e, 0x65, 0x72, 0x49, 0x64,
	0x12, 0x18, 0x0a, 0x07, 0x77, 0x65, 0x62, 0x73, 0x69, 0x74, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x07, 0x77, 0x65, 0x62, 0x73, 0x69, 0x74, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x6c, 0x6f,
	0x67, 0x6f, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6c, 0x6f, 0x67, 0x6f, 0x12, 0x14,
	0x0a, 0x05, 0x74, 0x65, 0x72, 0x6d, 0x73, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x74,
	0x65, 0x72, 0x6d, 0x73, 0x12, 0x33, 0x0a, 0x08, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61,
	0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x53, 0x6f, 0x63, 0x69, 0x61, 0x6c, 0x43,
	0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x2e, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x52,
	0x08, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x12, 0x1a, 0x0a, 0x08, 0x61, 0x75, 0x64,
	0x69, 0x65, 0x6e, 0x63, 0x65, 0x18, 0x0a, 0x20, 0x03, 0x28, 0x09, 0x52, 0x08, 0x61, 0x75, 0x64,
	0x69, 0x65, 0x6e, 0x63, 0x65, 0x12, 0x30, 0x0a, 0x06, 0x73, 0x63, 0x6f, 0x70, 0x65, 0x73, 0x18,
	0x0b, 0x20, 0x03, 0x28, 0x0e, 0x32, 0x18, 0x2e, 0x53, 0x6f, 0x63, 0x69, 0x61, 0x6c, 0x43, 0x6f,
	0x6e, 0x6e, 0x65, 0x63, 0x74, 0x2e, 0x53, 0x63, 0x6f, 0x70, 0x65, 0x54, 0x79, 0x70, 0x65, 0x52,
	0x06, 0x73, 0x63, 0x6f, 0x70, 0x65, 0x73, 0x12, 0x30, 0x0a, 0x06, 0x67, 0x72, 0x61, 0x6e, 0x74,
	0x73, 0x18, 0x0c, 0x20, 0x03, 0x28, 0x0e, 0x32, 0x18, 0x2e, 0x53, 0x6f, 0x63, 0x69, 0x61, 0x6c,
	0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x2e, 0x47, 0x72, 0x61, 0x6e, 0x74, 0x54, 0x79, 0x70,
	0x65, 0x52, 0x06, 0x67, 0x72, 0x61, 0x6e, 0x74, 0x73, 0x12, 0x39, 0x0a, 0x09, 0x72, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x73, 0x18, 0x0d, 0x20, 0x03, 0x28, 0x0e, 0x32, 0x1b, 0x2e, 0x53,
	0x6f, 0x63, 0x69, 0x61, 0x6c, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x2e, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x54, 0x79, 0x70, 0x65, 0x52, 0x09, 0x72, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x73, 0x12, 0x1c, 0x0a, 0x09, 0x63, 0x61, 0x6c, 0x6c, 0x62, 0x61, 0x63, 0x6b,
	0x73, 0x18, 0x0e, 0x20, 0x03, 0x28, 0x09, 0x52, 0x09, 0x63, 0x61, 0x6c, 0x6c, 0x62, 0x61, 0x63,
	0x6b, 0x73, 0x12, 0x39, 0x0a, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74,
	0x18, 0x0f, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61,
	0x6d, 0x70, 0x52, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x39, 0x0a,
	0x0a, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x10, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x75,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x3f, 0x0a, 0x10, 0x61, 0x76, 0x61, 0x69,
	0x6c, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x73, 0x63, 0x6f, 0x70, 0x65, 0x73, 0x18, 0x11, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x14, 0x2e, 0x53, 0x6f, 0x63, 0x69, 0x61, 0x6c, 0x43, 0x6f, 0x6e, 0x6e, 0x65,
	0x63, 0x74, 0x2e, 0x53, 0x63, 0x6f, 0x70, 0x65, 0x52, 0x0f, 0x61, 0x76, 0x61, 0x69, 0x6c, 0x61,
	0x62, 0x6c, 0x65, 0x53, 0x63, 0x6f, 0x70, 0x65, 0x73, 0x12, 0x3f, 0x0a, 0x10, 0x61, 0x76, 0x61,
	0x69, 0x6c, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x67, 0x72, 0x61, 0x6e, 0x74, 0x73, 0x18, 0x12, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x53, 0x6f, 0x63, 0x69, 0x61, 0x6c, 0x43, 0x6f, 0x6e, 0x6e,
	0x65, 0x63, 0x74, 0x2e, 0x47, 0x72, 0x61, 0x6e, 0x74, 0x52, 0x0f, 0x61, 0x76, 0x61, 0x69, 0x6c,
	0x61, 0x62, 0x6c, 0x65, 0x47, 0x72, 0x61, 0x6e, 0x74, 0x73, 0x12, 0x48, 0x0a, 0x13, 0x61, 0x76,
	0x61, 0x69, 0x6c, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x73, 0x18, 0x13, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x53, 0x6f, 0x63, 0x69, 0x61, 0x6c,
	0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x52, 0x12, 0x61, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x6c, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x73, 0x12, 0x40, 0x0a, 0x13, 0x61, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x6c,
	0x65, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x69, 0x65, 0x73, 0x18, 0x14, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x0f, 0x2e, 0x53, 0x6f, 0x63, 0x69, 0x61, 0x6c, 0x2e, 0x43, 0x6f, 0x75, 0x6e, 0x74,
	0x72, 0x79, 0x52, 0x12, 0x61, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x6c, 0x65, 0x43, 0x6f, 0x75,
	0x6e, 0x74, 0x72, 0x69, 0x65, 0x73, 0x22, 0xc1, 0x02, 0x0a, 0x14, 0x43, 0x6f, 0x6e, 0x6e, 0x65,
	0x63, 0x74, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x1c, 0x0a, 0x09, 0x63, 0x68, 0x61, 0x6c, 0x6c, 0x65, 0x6e, 0x67, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x09, 0x63, 0x68, 0x61, 0x6c, 0x6c, 0x65, 0x6e, 0x67, 0x65, 0x12, 0x14, 0x0a,
	0x05, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x65, 0x6d,
	0x61, 0x69, 0x6c, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x70, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x12,
	0x26, 0x0a, 0x06, 0x67, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x0e, 0x2e, 0x53, 0x6f, 0x63, 0x69, 0x61, 0x6c, 0x2e, 0x47, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x52,
	0x06, 0x67, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x6f, 0x6e, 0x73, 0x65,
	0x6e, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x63, 0x6f, 0x6e, 0x73, 0x65, 0x6e,
	0x74, 0x12, 0x25, 0x0a, 0x0e, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x5f, 0x74, 0x6f,
	0x6b, 0x65, 0x6e, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x69, 0x64, 0x65, 0x6e, 0x74,
	0x69, 0x74, 0x79, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x51, 0x0a, 0x15, 0x76, 0x65, 0x72, 0x69,
	0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65,
	0x72, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x53, 0x6f, 0x63, 0x69, 0x61, 0x6c,
	0x2e, 0x56, 0x65, 0x72, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x72, 0x6f,
	0x76, 0x69, 0x64, 0x65, 0x72, 0x52, 0x14, 0x76, 0x65, 0x72, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x12, 0x1d, 0x0a, 0x0a, 0x61,
	0x75, 0x74, 0x68, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x09, 0x61, 0x75, 0x74, 0x68, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x22, 0x9d, 0x01, 0x0a, 0x15, 0x43,
	0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x24, 0x0a, 0x03, 0x61, 0x70, 0x70, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x12, 0x2e, 0x53, 0x6f, 0x63, 0x69, 0x61, 0x6c, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63,
	0x74, 0x2e, 0x41, 0x70, 0x70, 0x52, 0x03, 0x61, 0x70, 0x70, 0x12, 0x14, 0x0a, 0x05, 0x65, 0x6d,
	0x61, 0x69, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x65, 0x6d, 0x61, 0x69, 0x6c,
	0x12, 0x23, 0x0a, 0x0d, 0x72, 0x65, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x5f, 0x61, 0x64, 0x64,
	0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x72, 0x65, 0x64, 0x69, 0x72, 0x65, 0x63,
	0x74, 0x41, 0x64, 0x64, 0x72, 0x12, 0x23, 0x0a, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x18, 0x04,
	0x20, 0x03, 0x28, 0x0e, 0x32, 0x0d, 0x2e, 0x53, 0x6f, 0x63, 0x69, 0x61, 0x6c, 0x2e, 0x45, 0x72,
	0x72, 0x6f, 0x72, 0x52, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x22, 0x3b, 0x0a, 0x13, 0x43, 0x6f,
	0x6e, 0x6e, 0x65, 0x63, 0x74, 0x41, 0x64, 0x6d, 0x69, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x24, 0x0a, 0x03, 0x61, 0x70, 0x70, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12,
	0x2e, 0x53, 0x6f, 0x63, 0x69, 0x61, 0x6c, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x2e, 0x41,
	0x70, 0x70, 0x52, 0x03, 0x61, 0x70, 0x70, 0x22, 0x3c, 0x0a, 0x14, 0x43, 0x6f, 0x6e, 0x6e, 0x65,
	0x63, 0x74, 0x41, 0x64, 0x6d, 0x69, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x24, 0x0a, 0x03, 0x61, 0x70, 0x70, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x53,
	0x6f, 0x63, 0x69, 0x61, 0x6c, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x2e, 0x41, 0x70, 0x70,
	0x52, 0x03, 0x61, 0x70, 0x70, 0x2a, 0xa5, 0x01, 0x0a, 0x09, 0x53, 0x63, 0x6f, 0x70, 0x65, 0x54,
	0x79, 0x70, 0x65, 0x12, 0x11, 0x0a, 0x0d, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x5f, 0x53,
	0x43, 0x4f, 0x50, 0x45, 0x10, 0x00, 0x12, 0x11, 0x0a, 0x0d, 0x44, 0x45, 0x46, 0x41, 0x55, 0x4c,
	0x54, 0x5f, 0x53, 0x43, 0x4f, 0x50, 0x45, 0x10, 0x01, 0x12, 0x18, 0x0a, 0x14, 0x4f, 0x46, 0x46,
	0x4c, 0x49, 0x4e, 0x45, 0x5f, 0x41, 0x43, 0x43, 0x45, 0x53, 0x53, 0x5f, 0x53, 0x43, 0x4f, 0x50,
	0x45, 0x10, 0x02, 0x12, 0x10, 0x0a, 0x0c, 0x47, 0x45, 0x4e, 0x44, 0x45, 0x52, 0x5f, 0x53, 0x43,
	0x4f, 0x50, 0x45, 0x10, 0x03, 0x12, 0x0e, 0x0a, 0x0a, 0x4e, 0x41, 0x4d, 0x45, 0x5f, 0x53, 0x43,
	0x4f, 0x50, 0x45, 0x10, 0x04, 0x12, 0x12, 0x0a, 0x0e, 0x42, 0x49, 0x52, 0x54, 0x48, 0x44, 0x41,
	0x59, 0x5f, 0x53, 0x43, 0x4f, 0x50, 0x45, 0x10, 0x05, 0x12, 0x11, 0x0a, 0x0d, 0x43, 0x4f, 0x55,
	0x4e, 0x54, 0x52, 0x59, 0x5f, 0x53, 0x43, 0x4f, 0x50, 0x45, 0x10, 0x06, 0x12, 0x0f, 0x0a, 0x0b,
	0x45, 0x4d, 0x41, 0x49, 0x4c, 0x5f, 0x53, 0x43, 0x4f, 0x50, 0x45, 0x10, 0x07, 0x2a, 0x41, 0x0a,
	0x09, 0x47, 0x72, 0x61, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x11, 0x0a, 0x0d, 0x49, 0x4e,
	0x56, 0x41, 0x4c, 0x49, 0x44, 0x5f, 0x47, 0x52, 0x41, 0x4e, 0x54, 0x10, 0x00, 0x12, 0x0e, 0x0a,
	0x0a, 0x41, 0x55, 0x54, 0x48, 0x5f, 0x47, 0x52, 0x41, 0x4e, 0x54, 0x10, 0x01, 0x12, 0x11, 0x0a,
	0x0d, 0x52, 0x45, 0x46, 0x52, 0x45, 0x53, 0x48, 0x5f, 0x47, 0x52, 0x41, 0x4e, 0x54, 0x10, 0x02,
	0x2a, 0x5c, 0x0a, 0x0c, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x54, 0x79, 0x70, 0x65,
	0x12, 0x14, 0x0a, 0x10, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x5f, 0x52, 0x45, 0x53, 0x50,
	0x4f, 0x4e, 0x53, 0x45, 0x10, 0x00, 0x12, 0x11, 0x0a, 0x0d, 0x43, 0x4f, 0x44, 0x45, 0x5f, 0x52,
	0x45, 0x53, 0x50, 0x4f, 0x4e, 0x53, 0x45, 0x10, 0x01, 0x12, 0x12, 0x0a, 0x0e, 0x54, 0x4f, 0x4b,
	0x45, 0x4e, 0x5f, 0x52, 0x45, 0x53, 0x50, 0x4f, 0x4e, 0x53, 0x45, 0x10, 0x02, 0x12, 0x0f, 0x0a,
	0x0b, 0x49, 0x44, 0x5f, 0x52, 0x45, 0x53, 0x50, 0x4f, 0x4e, 0x53, 0x45, 0x10, 0x03, 0x32, 0xb8,
	0x07, 0x0a, 0x14, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74,
	0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x58, 0x0a, 0x09, 0x48, 0x65, 0x61, 0x72, 0x74,
	0x62, 0x65, 0x61, 0x74, 0x12, 0x23, 0x2e, 0x53, 0x6f, 0x63, 0x69, 0x61, 0x6c, 0x43, 0x6f, 0x6e,
	0x6e, 0x65, 0x63, 0x74, 0x2e, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x50, 0x75, 0x62, 0x6c,
	0x69, 0x63, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x24, 0x2e, 0x53, 0x6f, 0x63, 0x69,
	0x61, 0x6c, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x2e, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63,
	0x74, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22,
	0x00, 0x12, 0x65, 0x0a, 0x16, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x65, 0x4c, 0x6f, 0x67,
	0x69, 0x6e, 0x43, 0x68, 0x61, 0x6c, 0x6c, 0x65, 0x6e, 0x67, 0x65, 0x12, 0x23, 0x2e, 0x53, 0x6f,
	0x63, 0x69, 0x61, 0x6c, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x2e, 0x43, 0x6f, 0x6e, 0x6e,
	0x65, 0x63, 0x74, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x24, 0x2e, 0x53, 0x6f, 0x63, 0x69, 0x61, 0x6c, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74,
	0x2e, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x54, 0x0a, 0x05, 0x4c, 0x6f, 0x67, 0x69,
	0x6e, 0x12, 0x23, 0x2e, 0x53, 0x6f, 0x63, 0x69, 0x61, 0x6c, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63,
	0x74, 0x2e, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x24, 0x2e, 0x53, 0x6f, 0x63, 0x69, 0x61, 0x6c, 0x43,
	0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x2e, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x50, 0x75,
	0x62, 0x6c, 0x69, 0x63, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x67,
	0x0a, 0x18, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x65, 0x43, 0x6f, 0x6e, 0x73, 0x65, 0x6e,
	0x74, 0x43, 0x68, 0x61, 0x6c, 0x6c, 0x65, 0x6e, 0x67, 0x65, 0x12, 0x23, 0x2e, 0x53, 0x6f, 0x63,
	0x69, 0x61, 0x6c, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x2e, 0x43, 0x6f, 0x6e, 0x6e, 0x65,
	0x63, 0x74, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x24, 0x2e, 0x53, 0x6f, 0x63, 0x69, 0x61, 0x6c, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x2e,
	0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x5a, 0x0a, 0x0b, 0x47, 0x69, 0x76, 0x65, 0x43,
	0x6f, 0x6e, 0x73, 0x65, 0x6e, 0x74, 0x12, 0x23, 0x2e, 0x53, 0x6f, 0x63, 0x69, 0x61, 0x6c, 0x43,
	0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x2e, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x50, 0x75,
	0x62, 0x6c, 0x69, 0x63, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x24, 0x2e, 0x53, 0x6f,
	0x63, 0x69, 0x61, 0x6c, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x2e, 0x43, 0x6f, 0x6e, 0x6e,
	0x65, 0x63, 0x74, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x22, 0x00, 0x12, 0x55, 0x0a, 0x06, 0x4c, 0x6f, 0x67, 0x6f, 0x75, 0x74, 0x12, 0x23, 0x2e,
	0x53, 0x6f, 0x63, 0x69, 0x61, 0x6c, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x2e, 0x43, 0x6f,
	0x6e, 0x6e, 0x65, 0x63, 0x74, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x24, 0x2e, 0x53, 0x6f, 0x63, 0x69, 0x61, 0x6c, 0x43, 0x6f, 0x6e, 0x6e, 0x65,
	0x63, 0x74, 0x2e, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x63,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x59, 0x0a, 0x0a, 0x43, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x55, 0x73, 0x65, 0x72, 0x12, 0x23, 0x2e, 0x53, 0x6f, 0x63, 0x69, 0x61,
	0x6c, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x2e, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74,
	0x50, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x24, 0x2e,
	0x53, 0x6f, 0x63, 0x69, 0x61, 0x6c, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x2e, 0x43, 0x6f,
	0x6e, 0x6e, 0x65, 0x63, 0x74, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x5d, 0x0a, 0x0e, 0x53, 0x65, 0x6e, 0x64, 0x52, 0x65, 0x73,
	0x65, 0x74, 0x45, 0x6d, 0x61, 0x69, 0x6c, 0x12, 0x23, 0x2e, 0x53, 0x6f, 0x63, 0x69, 0x61, 0x6c,
	0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x2e, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x50,
	0x75, 0x62, 0x6c, 0x69, 0x63, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x24, 0x2e, 0x53,
	0x6f, 0x63, 0x69, 0x61, 0x6c, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x2e, 0x43, 0x6f, 0x6e,
	0x6e, 0x65, 0x63, 0x74, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x22, 0x00, 0x12, 0x5c, 0x0a, 0x0d, 0x52, 0x65, 0x73, 0x65, 0x74, 0x50, 0x61, 0x73,
	0x73, 0x77, 0x6f, 0x72, 0x64, 0x12, 0x23, 0x2e, 0x53, 0x6f, 0x63, 0x69, 0x61, 0x6c, 0x43, 0x6f,
	0x6e, 0x6e, 0x65, 0x63, 0x74, 0x2e, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x50, 0x75, 0x62,
	0x6c, 0x69, 0x63, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x24, 0x2e, 0x53, 0x6f, 0x63,
	0x69, 0x61, 0x6c, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x2e, 0x43, 0x6f, 0x6e, 0x6e, 0x65,
	0x63, 0x74, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x22, 0x00, 0x12, 0x55, 0x0a, 0x06, 0x56, 0x65, 0x72, 0x69, 0x66, 0x79, 0x12, 0x23, 0x2e, 0x53,
	0x6f, 0x63, 0x69, 0x61, 0x6c, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x2e, 0x43, 0x6f, 0x6e,
	0x6e, 0x65, 0x63, 0x74, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x24, 0x2e, 0x53, 0x6f, 0x63, 0x69, 0x61, 0x6c, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63,
	0x74, 0x2e, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x32, 0xa3, 0x04, 0x0a, 0x13, 0x41, 0x64,
	0x6d, 0x69, 0x6e, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x12, 0x56, 0x0a, 0x09, 0x48, 0x65, 0x61, 0x72, 0x74, 0x62, 0x65, 0x61, 0x74, 0x12, 0x22,
	0x2e, 0x53, 0x6f, 0x63, 0x69, 0x61, 0x6c, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x2e, 0x43,
	0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x41, 0x64, 0x6d, 0x69, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x23, 0x2e, 0x53, 0x6f, 0x63, 0x69, 0x61, 0x6c, 0x43, 0x6f, 0x6e, 0x6e, 0x65,
	0x63, 0x74, 0x2e, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x41, 0x64, 0x6d, 0x69, 0x6e, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x53, 0x0a, 0x06, 0x43, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x12, 0x22, 0x2e, 0x53, 0x6f, 0x63, 0x69, 0x61, 0x6c, 0x43, 0x6f, 0x6e, 0x6e,
	0x65, 0x63, 0x74, 0x2e, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x41, 0x64, 0x6d, 0x69, 0x6e,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x23, 0x2e, 0x53, 0x6f, 0x63, 0x69, 0x61, 0x6c,
	0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x2e, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x41,
	0x64, 0x6d, 0x69, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x54,
	0x0a, 0x07, 0x47, 0x65, 0x74, 0x42, 0x79, 0x49, 0x64, 0x12, 0x22, 0x2e, 0x53, 0x6f, 0x63, 0x69,
	0x61, 0x6c, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x2e, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63,
	0x74, 0x41, 0x64, 0x6d, 0x69, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x23, 0x2e,
	0x53, 0x6f, 0x63, 0x69, 0x61, 0x6c, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x2e, 0x43, 0x6f,
	0x6e, 0x6e, 0x65, 0x63, 0x74, 0x41, 0x64, 0x6d, 0x69, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x22, 0x00, 0x12, 0x5a, 0x0a, 0x0d, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x44, 0x65,
	0x74, 0x61, 0x69, 0x6c, 0x73, 0x12, 0x22, 0x2e, 0x53, 0x6f, 0x63, 0x69, 0x61, 0x6c, 0x43, 0x6f,
	0x6e, 0x6e, 0x65, 0x63, 0x74, 0x2e, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x41, 0x64, 0x6d,
	0x69, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x23, 0x2e, 0x53, 0x6f, 0x63, 0x69,
	0x61, 0x6c, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x2e, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63,
	0x74, 0x41, 0x64, 0x6d, 0x69, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00,
	0x12, 0x58, 0x0a, 0x0b, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x4f, 0x61, 0x75, 0x74, 0x68, 0x12,
	0x22, 0x2e, 0x53, 0x6f, 0x63, 0x69, 0x61, 0x6c, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x2e,
	0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x41, 0x64, 0x6d, 0x69, 0x6e, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x23, 0x2e, 0x53, 0x6f, 0x63, 0x69, 0x61, 0x6c, 0x43, 0x6f, 0x6e, 0x6e,
	0x65, 0x63, 0x74, 0x2e, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x41, 0x64, 0x6d, 0x69, 0x6e,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x53, 0x0a, 0x06, 0x44, 0x65,
	0x6c, 0x65, 0x74, 0x65, 0x12, 0x22, 0x2e, 0x53, 0x6f, 0x63, 0x69, 0x61, 0x6c, 0x43, 0x6f, 0x6e,
	0x6e, 0x65, 0x63, 0x74, 0x2e, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x41, 0x64, 0x6d, 0x69,
	0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x23, 0x2e, 0x53, 0x6f, 0x63, 0x69, 0x61,
	0x6c, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x2e, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74,
	0x41, 0x64, 0x6d, 0x69, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x42,
	0x0d, 0x5a, 0x0b, 0x2e, 0x2f, 0x67, 0x6f, 0x5f, 0x73, 0x6f, 0x63, 0x69, 0x61, 0x6c, 0x62, 0x06,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_social_connect_proto_rawDescOnce sync.Once
	file_social_connect_proto_rawDescData = file_social_connect_proto_rawDesc
)

func file_social_connect_proto_rawDescGZIP() []byte {
	file_social_connect_proto_rawDescOnce.Do(func() {
		file_social_connect_proto_rawDescData = protoimpl.X.CompressGZIP(file_social_connect_proto_rawDescData)
	})
	return file_social_connect_proto_rawDescData
}

var file_social_connect_proto_enumTypes = make([]protoimpl.EnumInfo, 3)
var file_social_connect_proto_msgTypes = make([]protoimpl.MessageInfo, 9)
var file_social_connect_proto_goTypes = []interface{}{
	(ScopeType)(0),                // 0: SocialConnect.ScopeType
	(GrantType)(0),                // 1: SocialConnect.GrantType
	(ResponseType)(0),             // 2: SocialConnect.ResponseType
	(*Scope)(nil),                 // 3: SocialConnect.Scope
	(*Grant)(nil),                 // 4: SocialConnect.Grant
	(*Response)(nil),              // 5: SocialConnect.Response
	(*Metadata)(nil),              // 6: SocialConnect.Metadata
	(*App)(nil),                   // 7: SocialConnect.App
	(*ConnectPublicRequest)(nil),  // 8: SocialConnect.ConnectPublicRequest
	(*ConnectPublicResponse)(nil), // 9: SocialConnect.ConnectPublicResponse
	(*ConnectAdminRequest)(nil),   // 10: SocialConnect.ConnectAdminRequest
	(*ConnectAdminResponse)(nil),  // 11: SocialConnect.ConnectAdminResponse
	(CountryCode)(0),              // 12: Social.CountryCode
	(*timestamppb.Timestamp)(nil), // 13: google.protobuf.Timestamp
	(*Country)(nil),               // 14: Social.Country
	(Gender)(0),                   // 15: Social.Gender
	(*VerificationProvider)(nil),  // 16: Social.VerificationProvider
	(Error)(0),                    // 17: Social.Error
}
var file_social_connect_proto_depIdxs = []int32{
	0,  // 0: SocialConnect.Scope.scope_type:type_name -> SocialConnect.ScopeType
	1,  // 1: SocialConnect.Grant.grant_type:type_name -> SocialConnect.GrantType
	2,  // 2: SocialConnect.Response.response_type:type_name -> SocialConnect.ResponseType
	12, // 3: SocialConnect.Metadata.allowed_countries:type_name -> Social.CountryCode
	6,  // 4: SocialConnect.App.metadata:type_name -> SocialConnect.Metadata
	0,  // 5: SocialConnect.App.scopes:type_name -> SocialConnect.ScopeType
	1,  // 6: SocialConnect.App.grants:type_name -> SocialConnect.GrantType
	2,  // 7: SocialConnect.App.responses:type_name -> SocialConnect.ResponseType
	13, // 8: SocialConnect.App.created_at:type_name -> google.protobuf.Timestamp
	13, // 9: SocialConnect.App.updated_at:type_name -> google.protobuf.Timestamp
	3,  // 10: SocialConnect.App.available_scopes:type_name -> SocialConnect.Scope
	4,  // 11: SocialConnect.App.available_grants:type_name -> SocialConnect.Grant
	5,  // 12: SocialConnect.App.available_responses:type_name -> SocialConnect.Response
	14, // 13: SocialConnect.App.available_countries:type_name -> Social.Country
	15, // 14: SocialConnect.ConnectPublicRequest.gender:type_name -> Social.Gender
	16, // 15: SocialConnect.ConnectPublicRequest.verification_provider:type_name -> Social.VerificationProvider
	7,  // 16: SocialConnect.ConnectPublicResponse.app:type_name -> SocialConnect.App
	17, // 17: SocialConnect.ConnectPublicResponse.error:type_name -> Social.Error
	7,  // 18: SocialConnect.ConnectAdminRequest.app:type_name -> SocialConnect.App
	7,  // 19: SocialConnect.ConnectAdminResponse.app:type_name -> SocialConnect.App
	8,  // 20: SocialConnect.PublicConnectService.Heartbeat:input_type -> SocialConnect.ConnectPublicRequest
	8,  // 21: SocialConnect.PublicConnectService.ValidateLoginChallenge:input_type -> SocialConnect.ConnectPublicRequest
	8,  // 22: SocialConnect.PublicConnectService.Login:input_type -> SocialConnect.ConnectPublicRequest
	8,  // 23: SocialConnect.PublicConnectService.ValidateConsentChallenge:input_type -> SocialConnect.ConnectPublicRequest
	8,  // 24: SocialConnect.PublicConnectService.GiveConsent:input_type -> SocialConnect.ConnectPublicRequest
	8,  // 25: SocialConnect.PublicConnectService.Logout:input_type -> SocialConnect.ConnectPublicRequest
	8,  // 26: SocialConnect.PublicConnectService.CreateUser:input_type -> SocialConnect.ConnectPublicRequest
	8,  // 27: SocialConnect.PublicConnectService.SendResetEmail:input_type -> SocialConnect.ConnectPublicRequest
	8,  // 28: SocialConnect.PublicConnectService.ResetPassword:input_type -> SocialConnect.ConnectPublicRequest
	8,  // 29: SocialConnect.PublicConnectService.Verify:input_type -> SocialConnect.ConnectPublicRequest
	10, // 30: SocialConnect.AdminConnectService.Heartbeat:input_type -> SocialConnect.ConnectAdminRequest
	10, // 31: SocialConnect.AdminConnectService.Create:input_type -> SocialConnect.ConnectAdminRequest
	10, // 32: SocialConnect.AdminConnectService.GetById:input_type -> SocialConnect.ConnectAdminRequest
	10, // 33: SocialConnect.AdminConnectService.UpdateDetails:input_type -> SocialConnect.ConnectAdminRequest
	10, // 34: SocialConnect.AdminConnectService.UpdateOauth:input_type -> SocialConnect.ConnectAdminRequest
	10, // 35: SocialConnect.AdminConnectService.Delete:input_type -> SocialConnect.ConnectAdminRequest
	9,  // 36: SocialConnect.PublicConnectService.Heartbeat:output_type -> SocialConnect.ConnectPublicResponse
	9,  // 37: SocialConnect.PublicConnectService.ValidateLoginChallenge:output_type -> SocialConnect.ConnectPublicResponse
	9,  // 38: SocialConnect.PublicConnectService.Login:output_type -> SocialConnect.ConnectPublicResponse
	9,  // 39: SocialConnect.PublicConnectService.ValidateConsentChallenge:output_type -> SocialConnect.ConnectPublicResponse
	9,  // 40: SocialConnect.PublicConnectService.GiveConsent:output_type -> SocialConnect.ConnectPublicResponse
	9,  // 41: SocialConnect.PublicConnectService.Logout:output_type -> SocialConnect.ConnectPublicResponse
	9,  // 42: SocialConnect.PublicConnectService.CreateUser:output_type -> SocialConnect.ConnectPublicResponse
	9,  // 43: SocialConnect.PublicConnectService.SendResetEmail:output_type -> SocialConnect.ConnectPublicResponse
	9,  // 44: SocialConnect.PublicConnectService.ResetPassword:output_type -> SocialConnect.ConnectPublicResponse
	9,  // 45: SocialConnect.PublicConnectService.Verify:output_type -> SocialConnect.ConnectPublicResponse
	11, // 46: SocialConnect.AdminConnectService.Heartbeat:output_type -> SocialConnect.ConnectAdminResponse
	11, // 47: SocialConnect.AdminConnectService.Create:output_type -> SocialConnect.ConnectAdminResponse
	11, // 48: SocialConnect.AdminConnectService.GetById:output_type -> SocialConnect.ConnectAdminResponse
	11, // 49: SocialConnect.AdminConnectService.UpdateDetails:output_type -> SocialConnect.ConnectAdminResponse
	11, // 50: SocialConnect.AdminConnectService.UpdateOauth:output_type -> SocialConnect.ConnectAdminResponse
	11, // 51: SocialConnect.AdminConnectService.Delete:output_type -> SocialConnect.ConnectAdminResponse
	36, // [36:52] is the sub-list for method output_type
	20, // [20:36] is the sub-list for method input_type
	20, // [20:20] is the sub-list for extension type_name
	20, // [20:20] is the sub-list for extension extendee
	0,  // [0:20] is the sub-list for field type_name
}

func init() { file_social_connect_proto_init() }
func file_social_connect_proto_init() {
	if File_social_connect_proto != nil {
		return
	}
	file_social_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_social_connect_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Scope); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_social_connect_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Grant); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_social_connect_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Response); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_social_connect_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Metadata); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_social_connect_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*App); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_social_connect_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ConnectPublicRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_social_connect_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ConnectPublicResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_social_connect_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ConnectAdminRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_social_connect_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ConnectAdminResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_social_connect_proto_rawDesc,
			NumEnums:      3,
			NumMessages:   9,
			NumExtensions: 0,
			NumServices:   2,
		},
		GoTypes:           file_social_connect_proto_goTypes,
		DependencyIndexes: file_social_connect_proto_depIdxs,
		EnumInfos:         file_social_connect_proto_enumTypes,
		MessageInfos:      file_social_connect_proto_msgTypes,
	}.Build()
	File_social_connect_proto = out.File
	file_social_connect_proto_rawDesc = nil
	file_social_connect_proto_goTypes = nil
	file_social_connect_proto_depIdxs = nil
}
