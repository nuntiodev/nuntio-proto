syntax = "proto3";

package NuntioConnect;

option go_package = "./go_nuntio";

import "google/protobuf/timestamp.proto";
import "nuntio.proto";

service PublicConnectService {
    rpc Heartbeat(ConnectPublicRequest) returns (ConnectPublicResponse) {}
    rpc ValidateLoginChallenge(ConnectPublicRequest) returns (ConnectPublicResponse) {}
    rpc Login(ConnectPublicRequest) returns (ConnectPublicResponse) {}
    rpc ValidateConsentChallenge(ConnectPublicRequest) returns (ConnectPublicResponse) {}
    rpc GiveConsent(ConnectPublicRequest) returns (ConnectPublicResponse) {}
    rpc Logout(ConnectPublicRequest) returns (ConnectPublicResponse) {}
    rpc CreateUser(ConnectPublicRequest) returns (ConnectPublicResponse) {}
    rpc SendResetEmail(ConnectPublicRequest) returns (ConnectPublicResponse) {}
    rpc ResetPassword(ConnectPublicRequest) returns (ConnectPublicResponse) {}
    rpc Verify(ConnectPublicRequest) returns (ConnectPublicResponse) {}
}

service AdminConnectService {
    rpc Heartbeat(ConnectAdminRequest) returns (ConnectAdminResponse) {}
    rpc Create(ConnectAdminRequest) returns (ConnectAdminResponse) {}
    rpc GetById(ConnectAdminRequest) returns (ConnectAdminResponse) {}
    rpc UpdateDetails(ConnectAdminRequest) returns (ConnectAdminResponse) {}
    rpc UpdateOauth(ConnectAdminRequest) returns (ConnectAdminResponse) {}
    rpc Delete(ConnectAdminRequest) returns (ConnectAdminResponse) {}
}

enum ScopeType {
    INVALID_SCOPE = 0;
    DEFAULT_SCOPE = 1;
    OFFLINE_ACCESS_SCOPE = 2;
    GENDER_SCOPE = 3;
    NAME_SCOPE = 4;
    BIRTHDAY_SCOPE = 5;
    COUNTRY_SCOPE = 6;
    EMAIL_SCOPE = 7;
}

message Scope {
    ScopeType scope_type = 1;
    bool read_id = 2;
    bool read_email = 3;
    bool read_gender = 4;
    bool read_created_at = 5;
    bool offline_access = 6;
    bool read_name = 7;
    bool read_birthday = 8;
    bool read_country = 9;
    string name = 10;
    string key = 11;
}

enum GrantType {
    INVALID_GRANT = 0;
    AUTH_GRANT = 1;
    REFRESH_GRANT = 2;
}

message Grant {
    GrantType grant_type = 1;
    string name = 2;
}

enum ResponseType {
    INVALID_RESPONSE = 0;
    CODE_RESPONSE = 1;
    TOKEN_RESPONSE = 2;
    ID_RESPONSE = 3;
}

message Response {
    ResponseType response_type = 1;
    string name = 2;
}

message Metadata {
    bool is_open = 1;
    repeated string allowed_emails = 21;
    string about = 3;
    int32 age_lower_limit = 4;
    int32 age_upper_limit = 5;
    repeated Nuntio.CountryCode allowed_countries = 6;
    bool only_verified_users = 7;
}

message App {
    string id = 1;
    string name = 2;
    string password = 3;
    string email = 4;
    string owner_id = 5;
    string website = 6;
    string logo = 7;
    string terms = 8;
    Metadata metadata = 9;
    repeated string audience = 10;
    repeated ScopeType scopes = 11;
    repeated GrantType grants = 12;
    repeated ResponseType responses = 13;
    repeated string callbacks = 14;
    google.protobuf.Timestamp created_at = 15;
    google.protobuf.Timestamp updated_at = 16;
    repeated Scope available_scopes = 17;
    repeated Grant available_grants = 18;
    repeated Response available_responses = 19;
    repeated Nuntio.Country available_countries = 20;
}

message ConnectPublicRequest {
    string challenge = 1;
    string email = 2;
    string password = 3;
    Nuntio.Gender gender = 4;
    bool consent = 5;
    string identity_token = 6;
    Nuntio.VerificationProvider verification_provider = 7;
    string auth_token = 8;
}

message ConnectPublicResponse {
    App app = 1;
    string email = 2;
    string redirect_addr = 3;
    Nuntio.Error error = 4; 
}

message ConnectAdminRequest {
    App app = 1;
}

message ConnectAdminResponse {
    App app = 1;
}