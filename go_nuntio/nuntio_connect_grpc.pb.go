// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package go_nuntio

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// PublicConnectServiceClient is the client API for PublicConnectService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type PublicConnectServiceClient interface {
	Heartbeat(ctx context.Context, in *ConnectPublicRequest, opts ...grpc.CallOption) (*ConnectPublicResponse, error)
	ValidateLoginChallenge(ctx context.Context, in *ConnectPublicRequest, opts ...grpc.CallOption) (*ConnectPublicResponse, error)
	Login(ctx context.Context, in *ConnectPublicRequest, opts ...grpc.CallOption) (*ConnectPublicResponse, error)
	ValidateConsentChallenge(ctx context.Context, in *ConnectPublicRequest, opts ...grpc.CallOption) (*ConnectPublicResponse, error)
	GiveConsent(ctx context.Context, in *ConnectPublicRequest, opts ...grpc.CallOption) (*ConnectPublicResponse, error)
	Logout(ctx context.Context, in *ConnectPublicRequest, opts ...grpc.CallOption) (*ConnectPublicResponse, error)
	CreateUser(ctx context.Context, in *ConnectPublicRequest, opts ...grpc.CallOption) (*ConnectPublicResponse, error)
	SendResetEmail(ctx context.Context, in *ConnectPublicRequest, opts ...grpc.CallOption) (*ConnectPublicResponse, error)
	ResetPassword(ctx context.Context, in *ConnectPublicRequest, opts ...grpc.CallOption) (*ConnectPublicResponse, error)
	Verify(ctx context.Context, in *ConnectPublicRequest, opts ...grpc.CallOption) (*ConnectPublicResponse, error)
}

type publicConnectServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewPublicConnectServiceClient(cc grpc.ClientConnInterface) PublicConnectServiceClient {
	return &publicConnectServiceClient{cc}
}

func (c *publicConnectServiceClient) Heartbeat(ctx context.Context, in *ConnectPublicRequest, opts ...grpc.CallOption) (*ConnectPublicResponse, error) {
	out := new(ConnectPublicResponse)
	err := c.cc.Invoke(ctx, "/NuntioConnect.PublicConnectService/Heartbeat", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *publicConnectServiceClient) ValidateLoginChallenge(ctx context.Context, in *ConnectPublicRequest, opts ...grpc.CallOption) (*ConnectPublicResponse, error) {
	out := new(ConnectPublicResponse)
	err := c.cc.Invoke(ctx, "/NuntioConnect.PublicConnectService/ValidateLoginChallenge", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *publicConnectServiceClient) Login(ctx context.Context, in *ConnectPublicRequest, opts ...grpc.CallOption) (*ConnectPublicResponse, error) {
	out := new(ConnectPublicResponse)
	err := c.cc.Invoke(ctx, "/NuntioConnect.PublicConnectService/Login", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *publicConnectServiceClient) ValidateConsentChallenge(ctx context.Context, in *ConnectPublicRequest, opts ...grpc.CallOption) (*ConnectPublicResponse, error) {
	out := new(ConnectPublicResponse)
	err := c.cc.Invoke(ctx, "/NuntioConnect.PublicConnectService/ValidateConsentChallenge", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *publicConnectServiceClient) GiveConsent(ctx context.Context, in *ConnectPublicRequest, opts ...grpc.CallOption) (*ConnectPublicResponse, error) {
	out := new(ConnectPublicResponse)
	err := c.cc.Invoke(ctx, "/NuntioConnect.PublicConnectService/GiveConsent", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *publicConnectServiceClient) Logout(ctx context.Context, in *ConnectPublicRequest, opts ...grpc.CallOption) (*ConnectPublicResponse, error) {
	out := new(ConnectPublicResponse)
	err := c.cc.Invoke(ctx, "/NuntioConnect.PublicConnectService/Logout", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *publicConnectServiceClient) CreateUser(ctx context.Context, in *ConnectPublicRequest, opts ...grpc.CallOption) (*ConnectPublicResponse, error) {
	out := new(ConnectPublicResponse)
	err := c.cc.Invoke(ctx, "/NuntioConnect.PublicConnectService/CreateUser", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *publicConnectServiceClient) SendResetEmail(ctx context.Context, in *ConnectPublicRequest, opts ...grpc.CallOption) (*ConnectPublicResponse, error) {
	out := new(ConnectPublicResponse)
	err := c.cc.Invoke(ctx, "/NuntioConnect.PublicConnectService/SendResetEmail", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *publicConnectServiceClient) ResetPassword(ctx context.Context, in *ConnectPublicRequest, opts ...grpc.CallOption) (*ConnectPublicResponse, error) {
	out := new(ConnectPublicResponse)
	err := c.cc.Invoke(ctx, "/NuntioConnect.PublicConnectService/ResetPassword", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *publicConnectServiceClient) Verify(ctx context.Context, in *ConnectPublicRequest, opts ...grpc.CallOption) (*ConnectPublicResponse, error) {
	out := new(ConnectPublicResponse)
	err := c.cc.Invoke(ctx, "/NuntioConnect.PublicConnectService/Verify", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// PublicConnectServiceServer is the server API for PublicConnectService service.
// All implementations should embed UnimplementedPublicConnectServiceServer
// for forward compatibility
type PublicConnectServiceServer interface {
	Heartbeat(context.Context, *ConnectPublicRequest) (*ConnectPublicResponse, error)
	ValidateLoginChallenge(context.Context, *ConnectPublicRequest) (*ConnectPublicResponse, error)
	Login(context.Context, *ConnectPublicRequest) (*ConnectPublicResponse, error)
	ValidateConsentChallenge(context.Context, *ConnectPublicRequest) (*ConnectPublicResponse, error)
	GiveConsent(context.Context, *ConnectPublicRequest) (*ConnectPublicResponse, error)
	Logout(context.Context, *ConnectPublicRequest) (*ConnectPublicResponse, error)
	CreateUser(context.Context, *ConnectPublicRequest) (*ConnectPublicResponse, error)
	SendResetEmail(context.Context, *ConnectPublicRequest) (*ConnectPublicResponse, error)
	ResetPassword(context.Context, *ConnectPublicRequest) (*ConnectPublicResponse, error)
	Verify(context.Context, *ConnectPublicRequest) (*ConnectPublicResponse, error)
}

// UnimplementedPublicConnectServiceServer should be embedded to have forward compatible implementations.
type UnimplementedPublicConnectServiceServer struct {
}

func (UnimplementedPublicConnectServiceServer) Heartbeat(context.Context, *ConnectPublicRequest) (*ConnectPublicResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Heartbeat not implemented")
}
func (UnimplementedPublicConnectServiceServer) ValidateLoginChallenge(context.Context, *ConnectPublicRequest) (*ConnectPublicResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ValidateLoginChallenge not implemented")
}
func (UnimplementedPublicConnectServiceServer) Login(context.Context, *ConnectPublicRequest) (*ConnectPublicResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Login not implemented")
}
func (UnimplementedPublicConnectServiceServer) ValidateConsentChallenge(context.Context, *ConnectPublicRequest) (*ConnectPublicResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ValidateConsentChallenge not implemented")
}
func (UnimplementedPublicConnectServiceServer) GiveConsent(context.Context, *ConnectPublicRequest) (*ConnectPublicResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GiveConsent not implemented")
}
func (UnimplementedPublicConnectServiceServer) Logout(context.Context, *ConnectPublicRequest) (*ConnectPublicResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Logout not implemented")
}
func (UnimplementedPublicConnectServiceServer) CreateUser(context.Context, *ConnectPublicRequest) (*ConnectPublicResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateUser not implemented")
}
func (UnimplementedPublicConnectServiceServer) SendResetEmail(context.Context, *ConnectPublicRequest) (*ConnectPublicResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SendResetEmail not implemented")
}
func (UnimplementedPublicConnectServiceServer) ResetPassword(context.Context, *ConnectPublicRequest) (*ConnectPublicResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ResetPassword not implemented")
}
func (UnimplementedPublicConnectServiceServer) Verify(context.Context, *ConnectPublicRequest) (*ConnectPublicResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Verify not implemented")
}

// UnsafePublicConnectServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to PublicConnectServiceServer will
// result in compilation errors.
type UnsafePublicConnectServiceServer interface {
	mustEmbedUnimplementedPublicConnectServiceServer()
}

func RegisterPublicConnectServiceServer(s grpc.ServiceRegistrar, srv PublicConnectServiceServer) {
	s.RegisterService(&PublicConnectService_ServiceDesc, srv)
}

func _PublicConnectService_Heartbeat_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ConnectPublicRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PublicConnectServiceServer).Heartbeat(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/NuntioConnect.PublicConnectService/Heartbeat",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PublicConnectServiceServer).Heartbeat(ctx, req.(*ConnectPublicRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PublicConnectService_ValidateLoginChallenge_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ConnectPublicRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PublicConnectServiceServer).ValidateLoginChallenge(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/NuntioConnect.PublicConnectService/ValidateLoginChallenge",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PublicConnectServiceServer).ValidateLoginChallenge(ctx, req.(*ConnectPublicRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PublicConnectService_Login_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ConnectPublicRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PublicConnectServiceServer).Login(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/NuntioConnect.PublicConnectService/Login",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PublicConnectServiceServer).Login(ctx, req.(*ConnectPublicRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PublicConnectService_ValidateConsentChallenge_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ConnectPublicRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PublicConnectServiceServer).ValidateConsentChallenge(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/NuntioConnect.PublicConnectService/ValidateConsentChallenge",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PublicConnectServiceServer).ValidateConsentChallenge(ctx, req.(*ConnectPublicRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PublicConnectService_GiveConsent_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ConnectPublicRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PublicConnectServiceServer).GiveConsent(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/NuntioConnect.PublicConnectService/GiveConsent",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PublicConnectServiceServer).GiveConsent(ctx, req.(*ConnectPublicRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PublicConnectService_Logout_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ConnectPublicRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PublicConnectServiceServer).Logout(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/NuntioConnect.PublicConnectService/Logout",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PublicConnectServiceServer).Logout(ctx, req.(*ConnectPublicRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PublicConnectService_CreateUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ConnectPublicRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PublicConnectServiceServer).CreateUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/NuntioConnect.PublicConnectService/CreateUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PublicConnectServiceServer).CreateUser(ctx, req.(*ConnectPublicRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PublicConnectService_SendResetEmail_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ConnectPublicRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PublicConnectServiceServer).SendResetEmail(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/NuntioConnect.PublicConnectService/SendResetEmail",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PublicConnectServiceServer).SendResetEmail(ctx, req.(*ConnectPublicRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PublicConnectService_ResetPassword_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ConnectPublicRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PublicConnectServiceServer).ResetPassword(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/NuntioConnect.PublicConnectService/ResetPassword",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PublicConnectServiceServer).ResetPassword(ctx, req.(*ConnectPublicRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PublicConnectService_Verify_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ConnectPublicRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PublicConnectServiceServer).Verify(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/NuntioConnect.PublicConnectService/Verify",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PublicConnectServiceServer).Verify(ctx, req.(*ConnectPublicRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// PublicConnectService_ServiceDesc is the grpc.ServiceDesc for PublicConnectService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var PublicConnectService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "NuntioConnect.PublicConnectService",
	HandlerType: (*PublicConnectServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Heartbeat",
			Handler:    _PublicConnectService_Heartbeat_Handler,
		},
		{
			MethodName: "ValidateLoginChallenge",
			Handler:    _PublicConnectService_ValidateLoginChallenge_Handler,
		},
		{
			MethodName: "Login",
			Handler:    _PublicConnectService_Login_Handler,
		},
		{
			MethodName: "ValidateConsentChallenge",
			Handler:    _PublicConnectService_ValidateConsentChallenge_Handler,
		},
		{
			MethodName: "GiveConsent",
			Handler:    _PublicConnectService_GiveConsent_Handler,
		},
		{
			MethodName: "Logout",
			Handler:    _PublicConnectService_Logout_Handler,
		},
		{
			MethodName: "CreateUser",
			Handler:    _PublicConnectService_CreateUser_Handler,
		},
		{
			MethodName: "SendResetEmail",
			Handler:    _PublicConnectService_SendResetEmail_Handler,
		},
		{
			MethodName: "ResetPassword",
			Handler:    _PublicConnectService_ResetPassword_Handler,
		},
		{
			MethodName: "Verify",
			Handler:    _PublicConnectService_Verify_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "nuntio_connect.proto",
}

// AdminConnectServiceClient is the client API for AdminConnectService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type AdminConnectServiceClient interface {
	Heartbeat(ctx context.Context, in *ConnectAdminRequest, opts ...grpc.CallOption) (*ConnectAdminResponse, error)
	CreateApp(ctx context.Context, in *ConnectAdminRequest, opts ...grpc.CallOption) (*ConnectAdminResponse, error)
	GetAppById(ctx context.Context, in *ConnectAdminRequest, opts ...grpc.CallOption) (*ConnectAdminResponse, error)
	UpdateAppDetails(ctx context.Context, in *ConnectAdminRequest, opts ...grpc.CallOption) (*ConnectAdminResponse, error)
	UpdateAppOAuth(ctx context.Context, in *ConnectAdminRequest, opts ...grpc.CallOption) (*ConnectAdminResponse, error)
	UpdateAppSecurity(ctx context.Context, in *ConnectAdminRequest, opts ...grpc.CallOption) (*ConnectAdminResponse, error)
	GetAppMetrics(ctx context.Context, in *ConnectAdminRequest, opts ...grpc.CallOption) (*ConnectAdminResponse, error)
	DeleteApp(ctx context.Context, in *ConnectAdminRequest, opts ...grpc.CallOption) (*ConnectAdminResponse, error)
}

type adminConnectServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewAdminConnectServiceClient(cc grpc.ClientConnInterface) AdminConnectServiceClient {
	return &adminConnectServiceClient{cc}
}

func (c *adminConnectServiceClient) Heartbeat(ctx context.Context, in *ConnectAdminRequest, opts ...grpc.CallOption) (*ConnectAdminResponse, error) {
	out := new(ConnectAdminResponse)
	err := c.cc.Invoke(ctx, "/NuntioConnect.AdminConnectService/Heartbeat", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminConnectServiceClient) CreateApp(ctx context.Context, in *ConnectAdminRequest, opts ...grpc.CallOption) (*ConnectAdminResponse, error) {
	out := new(ConnectAdminResponse)
	err := c.cc.Invoke(ctx, "/NuntioConnect.AdminConnectService/CreateApp", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminConnectServiceClient) GetAppById(ctx context.Context, in *ConnectAdminRequest, opts ...grpc.CallOption) (*ConnectAdminResponse, error) {
	out := new(ConnectAdminResponse)
	err := c.cc.Invoke(ctx, "/NuntioConnect.AdminConnectService/GetAppById", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminConnectServiceClient) UpdateAppDetails(ctx context.Context, in *ConnectAdminRequest, opts ...grpc.CallOption) (*ConnectAdminResponse, error) {
	out := new(ConnectAdminResponse)
	err := c.cc.Invoke(ctx, "/NuntioConnect.AdminConnectService/UpdateAppDetails", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminConnectServiceClient) UpdateAppOAuth(ctx context.Context, in *ConnectAdminRequest, opts ...grpc.CallOption) (*ConnectAdminResponse, error) {
	out := new(ConnectAdminResponse)
	err := c.cc.Invoke(ctx, "/NuntioConnect.AdminConnectService/UpdateAppOAuth", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminConnectServiceClient) UpdateAppSecurity(ctx context.Context, in *ConnectAdminRequest, opts ...grpc.CallOption) (*ConnectAdminResponse, error) {
	out := new(ConnectAdminResponse)
	err := c.cc.Invoke(ctx, "/NuntioConnect.AdminConnectService/UpdateAppSecurity", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminConnectServiceClient) GetAppMetrics(ctx context.Context, in *ConnectAdminRequest, opts ...grpc.CallOption) (*ConnectAdminResponse, error) {
	out := new(ConnectAdminResponse)
	err := c.cc.Invoke(ctx, "/NuntioConnect.AdminConnectService/GetAppMetrics", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminConnectServiceClient) DeleteApp(ctx context.Context, in *ConnectAdminRequest, opts ...grpc.CallOption) (*ConnectAdminResponse, error) {
	out := new(ConnectAdminResponse)
	err := c.cc.Invoke(ctx, "/NuntioConnect.AdminConnectService/DeleteApp", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// AdminConnectServiceServer is the server API for AdminConnectService service.
// All implementations should embed UnimplementedAdminConnectServiceServer
// for forward compatibility
type AdminConnectServiceServer interface {
	Heartbeat(context.Context, *ConnectAdminRequest) (*ConnectAdminResponse, error)
	CreateApp(context.Context, *ConnectAdminRequest) (*ConnectAdminResponse, error)
	GetAppById(context.Context, *ConnectAdminRequest) (*ConnectAdminResponse, error)
	UpdateAppDetails(context.Context, *ConnectAdminRequest) (*ConnectAdminResponse, error)
	UpdateAppOAuth(context.Context, *ConnectAdminRequest) (*ConnectAdminResponse, error)
	UpdateAppSecurity(context.Context, *ConnectAdminRequest) (*ConnectAdminResponse, error)
	GetAppMetrics(context.Context, *ConnectAdminRequest) (*ConnectAdminResponse, error)
	DeleteApp(context.Context, *ConnectAdminRequest) (*ConnectAdminResponse, error)
}

// UnimplementedAdminConnectServiceServer should be embedded to have forward compatible implementations.
type UnimplementedAdminConnectServiceServer struct {
}

func (UnimplementedAdminConnectServiceServer) Heartbeat(context.Context, *ConnectAdminRequest) (*ConnectAdminResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Heartbeat not implemented")
}
func (UnimplementedAdminConnectServiceServer) CreateApp(context.Context, *ConnectAdminRequest) (*ConnectAdminResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateApp not implemented")
}
func (UnimplementedAdminConnectServiceServer) GetAppById(context.Context, *ConnectAdminRequest) (*ConnectAdminResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAppById not implemented")
}
func (UnimplementedAdminConnectServiceServer) UpdateAppDetails(context.Context, *ConnectAdminRequest) (*ConnectAdminResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateAppDetails not implemented")
}
func (UnimplementedAdminConnectServiceServer) UpdateAppOAuth(context.Context, *ConnectAdminRequest) (*ConnectAdminResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateAppOAuth not implemented")
}
func (UnimplementedAdminConnectServiceServer) UpdateAppSecurity(context.Context, *ConnectAdminRequest) (*ConnectAdminResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateAppSecurity not implemented")
}
func (UnimplementedAdminConnectServiceServer) GetAppMetrics(context.Context, *ConnectAdminRequest) (*ConnectAdminResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAppMetrics not implemented")
}
func (UnimplementedAdminConnectServiceServer) DeleteApp(context.Context, *ConnectAdminRequest) (*ConnectAdminResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteApp not implemented")
}

// UnsafeAdminConnectServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to AdminConnectServiceServer will
// result in compilation errors.
type UnsafeAdminConnectServiceServer interface {
	mustEmbedUnimplementedAdminConnectServiceServer()
}

func RegisterAdminConnectServiceServer(s grpc.ServiceRegistrar, srv AdminConnectServiceServer) {
	s.RegisterService(&AdminConnectService_ServiceDesc, srv)
}

func _AdminConnectService_Heartbeat_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ConnectAdminRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminConnectServiceServer).Heartbeat(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/NuntioConnect.AdminConnectService/Heartbeat",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminConnectServiceServer).Heartbeat(ctx, req.(*ConnectAdminRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AdminConnectService_CreateApp_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ConnectAdminRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminConnectServiceServer).CreateApp(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/NuntioConnect.AdminConnectService/CreateApp",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminConnectServiceServer).CreateApp(ctx, req.(*ConnectAdminRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AdminConnectService_GetAppById_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ConnectAdminRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminConnectServiceServer).GetAppById(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/NuntioConnect.AdminConnectService/GetAppById",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminConnectServiceServer).GetAppById(ctx, req.(*ConnectAdminRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AdminConnectService_UpdateAppDetails_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ConnectAdminRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminConnectServiceServer).UpdateAppDetails(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/NuntioConnect.AdminConnectService/UpdateAppDetails",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminConnectServiceServer).UpdateAppDetails(ctx, req.(*ConnectAdminRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AdminConnectService_UpdateAppOAuth_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ConnectAdminRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminConnectServiceServer).UpdateAppOAuth(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/NuntioConnect.AdminConnectService/UpdateAppOAuth",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminConnectServiceServer).UpdateAppOAuth(ctx, req.(*ConnectAdminRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AdminConnectService_UpdateAppSecurity_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ConnectAdminRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminConnectServiceServer).UpdateAppSecurity(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/NuntioConnect.AdminConnectService/UpdateAppSecurity",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminConnectServiceServer).UpdateAppSecurity(ctx, req.(*ConnectAdminRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AdminConnectService_GetAppMetrics_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ConnectAdminRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminConnectServiceServer).GetAppMetrics(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/NuntioConnect.AdminConnectService/GetAppMetrics",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminConnectServiceServer).GetAppMetrics(ctx, req.(*ConnectAdminRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AdminConnectService_DeleteApp_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ConnectAdminRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminConnectServiceServer).DeleteApp(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/NuntioConnect.AdminConnectService/DeleteApp",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminConnectServiceServer).DeleteApp(ctx, req.(*ConnectAdminRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// AdminConnectService_ServiceDesc is the grpc.ServiceDesc for AdminConnectService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var AdminConnectService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "NuntioConnect.AdminConnectService",
	HandlerType: (*AdminConnectServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Heartbeat",
			Handler:    _AdminConnectService_Heartbeat_Handler,
		},
		{
			MethodName: "CreateApp",
			Handler:    _AdminConnectService_CreateApp_Handler,
		},
		{
			MethodName: "GetAppById",
			Handler:    _AdminConnectService_GetAppById_Handler,
		},
		{
			MethodName: "UpdateAppDetails",
			Handler:    _AdminConnectService_UpdateAppDetails_Handler,
		},
		{
			MethodName: "UpdateAppOAuth",
			Handler:    _AdminConnectService_UpdateAppOAuth_Handler,
		},
		{
			MethodName: "UpdateAppSecurity",
			Handler:    _AdminConnectService_UpdateAppSecurity_Handler,
		},
		{
			MethodName: "GetAppMetrics",
			Handler:    _AdminConnectService_GetAppMetrics_Handler,
		},
		{
			MethodName: "DeleteApp",
			Handler:    _AdminConnectService_DeleteApp_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "nuntio_connect.proto",
}
