// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.26.0
// 	protoc        v3.19.1
// source: nuntio_connect.proto

package go_nuntio

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type Error int32

const (
	Error_NO_ERROR                     Error = 0
	Error_ERROR_REQUIRE_IDENTIFICATION Error = 1
)

// Enum value maps for Error.
var (
	Error_name = map[int32]string{
		0: "NO_ERROR",
		1: "ERROR_REQUIRE_IDENTIFICATION",
	}
	Error_value = map[string]int32{
		"NO_ERROR":                     0,
		"ERROR_REQUIRE_IDENTIFICATION": 1,
	}
)

func (x Error) Enum() *Error {
	p := new(Error)
	*p = x
	return p
}

func (x Error) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Error) Descriptor() protoreflect.EnumDescriptor {
	return file_nuntio_connect_proto_enumTypes[0].Descriptor()
}

func (Error) Type() protoreflect.EnumType {
	return &file_nuntio_connect_proto_enumTypes[0]
}

func (x Error) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Error.Descriptor instead.
func (Error) EnumDescriptor() ([]byte, []int) {
	return file_nuntio_connect_proto_rawDescGZIP(), []int{0}
}

type Timespan int32

const (
	Timespan_INVALID_TIMESPAN Timespan = 0
	Timespan_TIMESPAN_DAY     Timespan = 1
	Timespan_TIMESPAN_WEEK    Timespan = 2
	Timespan_TIMESPAN_MONTH   Timespan = 3
	Timespan_TIMESPAN_YEAR    Timespan = 4
	Timespan_TIMESPAN_ALL     Timespan = 5
)

// Enum value maps for Timespan.
var (
	Timespan_name = map[int32]string{
		0: "INVALID_TIMESPAN",
		1: "TIMESPAN_DAY",
		2: "TIMESPAN_WEEK",
		3: "TIMESPAN_MONTH",
		4: "TIMESPAN_YEAR",
		5: "TIMESPAN_ALL",
	}
	Timespan_value = map[string]int32{
		"INVALID_TIMESPAN": 0,
		"TIMESPAN_DAY":     1,
		"TIMESPAN_WEEK":    2,
		"TIMESPAN_MONTH":   3,
		"TIMESPAN_YEAR":    4,
		"TIMESPAN_ALL":     5,
	}
)

func (x Timespan) Enum() *Timespan {
	p := new(Timespan)
	*p = x
	return p
}

func (x Timespan) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Timespan) Descriptor() protoreflect.EnumDescriptor {
	return file_nuntio_connect_proto_enumTypes[1].Descriptor()
}

func (Timespan) Type() protoreflect.EnumType {
	return &file_nuntio_connect_proto_enumTypes[1]
}

func (x Timespan) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Timespan.Descriptor instead.
func (Timespan) EnumDescriptor() ([]byte, []int) {
	return file_nuntio_connect_proto_rawDescGZIP(), []int{1}
}

type ScopeType int32

const (
	ScopeType_INVALID_SCOPE        ScopeType = 0
	ScopeType_DEFAULT_SCOPE        ScopeType = 1
	ScopeType_OFFLINE_ACCESS_SCOPE ScopeType = 2
	ScopeType_GENDER_SCOPE         ScopeType = 3
	ScopeType_NAME_SCOPE           ScopeType = 4
	ScopeType_BIRTHDAY_SCOPE       ScopeType = 5
	ScopeType_COUNTRY_SCOPE        ScopeType = 6
	ScopeType_EMAIL_SCOPE          ScopeType = 7
)

// Enum value maps for ScopeType.
var (
	ScopeType_name = map[int32]string{
		0: "INVALID_SCOPE",
		1: "DEFAULT_SCOPE",
		2: "OFFLINE_ACCESS_SCOPE",
		3: "GENDER_SCOPE",
		4: "NAME_SCOPE",
		5: "BIRTHDAY_SCOPE",
		6: "COUNTRY_SCOPE",
		7: "EMAIL_SCOPE",
	}
	ScopeType_value = map[string]int32{
		"INVALID_SCOPE":        0,
		"DEFAULT_SCOPE":        1,
		"OFFLINE_ACCESS_SCOPE": 2,
		"GENDER_SCOPE":         3,
		"NAME_SCOPE":           4,
		"BIRTHDAY_SCOPE":       5,
		"COUNTRY_SCOPE":        6,
		"EMAIL_SCOPE":          7,
	}
)

func (x ScopeType) Enum() *ScopeType {
	p := new(ScopeType)
	*p = x
	return p
}

func (x ScopeType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ScopeType) Descriptor() protoreflect.EnumDescriptor {
	return file_nuntio_connect_proto_enumTypes[2].Descriptor()
}

func (ScopeType) Type() protoreflect.EnumType {
	return &file_nuntio_connect_proto_enumTypes[2]
}

func (x ScopeType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ScopeType.Descriptor instead.
func (ScopeType) EnumDescriptor() ([]byte, []int) {
	return file_nuntio_connect_proto_rawDescGZIP(), []int{2}
}

type AgeGroup int32

const (
	AgeGroup_AGE_GROUP_INVALID AgeGroup = 0
	AgeGroup_AGE_GROUP_1_12    AgeGroup = 1
	AgeGroup_AGE_GROUP_13_19   AgeGroup = 2
	AgeGroup_AGE_GROUP_20_29   AgeGroup = 3
	AgeGroup_AGE_GROUP_30_39   AgeGroup = 4
	AgeGroup_AGE_GROUP_40_49   AgeGroup = 5
	AgeGroup_AGE_GROUP_50_59   AgeGroup = 6
	AgeGroup_AGE_GROUP_60_69   AgeGroup = 7
	AgeGroup_AGE_GROUP_70_79   AgeGroup = 8
	AgeGroup_AGE_GROUP_80_89   AgeGroup = 9
	AgeGroup_AGE_GROUP_90_99   AgeGroup = 10
	AgeGroup_AGE_GROUP_100_120 AgeGroup = 11
)

// Enum value maps for AgeGroup.
var (
	AgeGroup_name = map[int32]string{
		0:  "AGE_GROUP_INVALID",
		1:  "AGE_GROUP_1_12",
		2:  "AGE_GROUP_13_19",
		3:  "AGE_GROUP_20_29",
		4:  "AGE_GROUP_30_39",
		5:  "AGE_GROUP_40_49",
		6:  "AGE_GROUP_50_59",
		7:  "AGE_GROUP_60_69",
		8:  "AGE_GROUP_70_79",
		9:  "AGE_GROUP_80_89",
		10: "AGE_GROUP_90_99",
		11: "AGE_GROUP_100_120",
	}
	AgeGroup_value = map[string]int32{
		"AGE_GROUP_INVALID": 0,
		"AGE_GROUP_1_12":    1,
		"AGE_GROUP_13_19":   2,
		"AGE_GROUP_20_29":   3,
		"AGE_GROUP_30_39":   4,
		"AGE_GROUP_40_49":   5,
		"AGE_GROUP_50_59":   6,
		"AGE_GROUP_60_69":   7,
		"AGE_GROUP_70_79":   8,
		"AGE_GROUP_80_89":   9,
		"AGE_GROUP_90_99":   10,
		"AGE_GROUP_100_120": 11,
	}
)

func (x AgeGroup) Enum() *AgeGroup {
	p := new(AgeGroup)
	*p = x
	return p
}

func (x AgeGroup) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (AgeGroup) Descriptor() protoreflect.EnumDescriptor {
	return file_nuntio_connect_proto_enumTypes[3].Descriptor()
}

func (AgeGroup) Type() protoreflect.EnumType {
	return &file_nuntio_connect_proto_enumTypes[3]
}

func (x AgeGroup) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use AgeGroup.Descriptor instead.
func (AgeGroup) EnumDescriptor() ([]byte, []int) {
	return file_nuntio_connect_proto_rawDescGZIP(), []int{3}
}

type GrantType int32

const (
	GrantType_INVALID_GRANT GrantType = 0
	GrantType_AUTH_GRANT    GrantType = 1
	GrantType_REFRESH_GRANT GrantType = 2
)

// Enum value maps for GrantType.
var (
	GrantType_name = map[int32]string{
		0: "INVALID_GRANT",
		1: "AUTH_GRANT",
		2: "REFRESH_GRANT",
	}
	GrantType_value = map[string]int32{
		"INVALID_GRANT": 0,
		"AUTH_GRANT":    1,
		"REFRESH_GRANT": 2,
	}
)

func (x GrantType) Enum() *GrantType {
	p := new(GrantType)
	*p = x
	return p
}

func (x GrantType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (GrantType) Descriptor() protoreflect.EnumDescriptor {
	return file_nuntio_connect_proto_enumTypes[4].Descriptor()
}

func (GrantType) Type() protoreflect.EnumType {
	return &file_nuntio_connect_proto_enumTypes[4]
}

func (x GrantType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use GrantType.Descriptor instead.
func (GrantType) EnumDescriptor() ([]byte, []int) {
	return file_nuntio_connect_proto_rawDescGZIP(), []int{4}
}

type ResponeType int32

const (
	ResponeType_INVALID_RESPONSE ResponeType = 0
	ResponeType_CODE_RESPONSE    ResponeType = 1
	ResponeType_TOKEN_RESPONSE   ResponeType = 2
	ResponeType_ID_RESPONSE      ResponeType = 3
)

// Enum value maps for ResponeType.
var (
	ResponeType_name = map[int32]string{
		0: "INVALID_RESPONSE",
		1: "CODE_RESPONSE",
		2: "TOKEN_RESPONSE",
		3: "ID_RESPONSE",
	}
	ResponeType_value = map[string]int32{
		"INVALID_RESPONSE": 0,
		"CODE_RESPONSE":    1,
		"TOKEN_RESPONSE":   2,
		"ID_RESPONSE":      3,
	}
)

func (x ResponeType) Enum() *ResponeType {
	p := new(ResponeType)
	*p = x
	return p
}

func (x ResponeType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ResponeType) Descriptor() protoreflect.EnumDescriptor {
	return file_nuntio_connect_proto_enumTypes[5].Descriptor()
}

func (ResponeType) Type() protoreflect.EnumType {
	return &file_nuntio_connect_proto_enumTypes[5]
}

func (x ResponeType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ResponeType.Descriptor instead.
func (ResponeType) EnumDescriptor() ([]byte, []int) {
	return file_nuntio_connect_proto_rawDescGZIP(), []int{5}
}

type ConnectMetric struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Date                       *timestamppb.Timestamp `protobuf:"bytes,1,opt,name=date,proto3" json:"date,omitempty"`
	NumberOfRequests           int32                  `protobuf:"varint,2,opt,name=number_of_requests,json=numberOfRequests,proto3" json:"number_of_requests,omitempty"`
	NumberOfConsentTrue        int32                  `protobuf:"varint,3,opt,name=number_of_consent_true,json=numberOfConsentTrue,proto3" json:"number_of_consent_true,omitempty"`
	NumberOfConsentFalse       int32                  `protobuf:"varint,4,opt,name=number_of_consent_false,json=numberOfConsentFalse,proto3" json:"number_of_consent_false,omitempty"`
	NumberOfUsersValidated     int32                  `protobuf:"varint,5,opt,name=number_of_users_validated,json=numberOfUsersValidated,proto3" json:"number_of_users_validated,omitempty"`
	NumberOfUsersNotValidated  int32                  `protobuf:"varint,6,opt,name=number_of_users_not_validated,json=numberOfUsersNotValidated,proto3" json:"number_of_users_not_validated,omitempty"`
	NumberOfAgeGroupInvalid    int32                  `protobuf:"varint,7,opt,name=number_of_age_group_invalid,json=numberOfAgeGroupInvalid,proto3" json:"number_of_age_group_invalid,omitempty"`
	NumberOfAgeGroup_1To_12    int32                  `protobuf:"varint,8,opt,name=number_of_age_group_1to_12,json=numberOfAgeGroup1to12,proto3" json:"number_of_age_group_1to_12,omitempty"`
	NumberOfAgeGroup_13To_19   int32                  `protobuf:"varint,9,opt,name=number_of_age_group_13_to_19,json=numberOfAgeGroup13To19,proto3" json:"number_of_age_group_13_to_19,omitempty"`
	NumberOfAgeGroup_20To_29   int32                  `protobuf:"varint,10,opt,name=number_of_age_group_20_to_29,json=numberOfAgeGroup20To29,proto3" json:"number_of_age_group_20_to_29,omitempty"`
	NumberOfAgeGroup_30To_39   int32                  `protobuf:"varint,11,opt,name=number_of_age_group_30_to_39,json=numberOfAgeGroup30To39,proto3" json:"number_of_age_group_30_to_39,omitempty"`
	NumberOfAgeGroup_40To_49   int32                  `protobuf:"varint,12,opt,name=number_of_age_group_40_to_49,json=numberOfAgeGroup40To49,proto3" json:"number_of_age_group_40_to_49,omitempty"`
	NumberOfAgeGroup_50To_59   int32                  `protobuf:"varint,13,opt,name=number_of_age_group_50_to_59,json=numberOfAgeGroup50To59,proto3" json:"number_of_age_group_50_to_59,omitempty"`
	NumberOfAgeGroup_60To_69   int32                  `protobuf:"varint,14,opt,name=number_of_age_group_60_to_69,json=numberOfAgeGroup60To69,proto3" json:"number_of_age_group_60_to_69,omitempty"`
	NumberOfAgeGroup_70To_79   int32                  `protobuf:"varint,15,opt,name=number_of_age_group_70_to_79,json=numberOfAgeGroup70To79,proto3" json:"number_of_age_group_70_to_79,omitempty"`
	NumberOfAgeGroup_80To_89   int32                  `protobuf:"varint,16,opt,name=number_of_age_group_80_to_89,json=numberOfAgeGroup80To89,proto3" json:"number_of_age_group_80_to_89,omitempty"`
	NumberOfAgeGroup_90To_99   int32                  `protobuf:"varint,17,opt,name=number_of_age_group_90_to_99,json=numberOfAgeGroup90To99,proto3" json:"number_of_age_group_90_to_99,omitempty"`
	NumberOfAgeGroup_100To_120 int32                  `protobuf:"varint,18,opt,name=number_of_age_group_100_to_120,json=numberOfAgeGroup100To120,proto3" json:"number_of_age_group_100_to_120,omitempty"`
	NumberOfGenderInvalid      int32                  `protobuf:"varint,19,opt,name=number_of_gender_invalid,json=numberOfGenderInvalid,proto3" json:"number_of_gender_invalid,omitempty"`
	NumberOfFemales            int32                  `protobuf:"varint,20,opt,name=number_of_females,json=numberOfFemales,proto3" json:"number_of_females,omitempty"`
	NumberOfMales              int32                  `protobuf:"varint,21,opt,name=number_of_males,json=numberOfMales,proto3" json:"number_of_males,omitempty"`
	NumberOfOthers             int32                  `protobuf:"varint,22,opt,name=number_of_others,json=numberOfOthers,proto3" json:"number_of_others,omitempty"`
	AmountFromCountryInvalid   int32                  `protobuf:"varint,23,opt,name=amount_from_country_invalid,json=amountFromCountryInvalid,proto3" json:"amount_from_country_invalid,omitempty"`
	AmountFromDk               int32                  `protobuf:"varint,24,opt,name=amount_from_dk,json=amountFromDk,proto3" json:"amount_from_dk,omitempty"`
	AmountFromNo               int32                  `protobuf:"varint,25,opt,name=amount_from_no,json=amountFromNo,proto3" json:"amount_from_no,omitempty"`
	AmountFromDe               int32                  `protobuf:"varint,26,opt,name=amount_from_de,json=amountFromDe,proto3" json:"amount_from_de,omitempty"`
}

func (x *ConnectMetric) Reset() {
	*x = ConnectMetric{}
	if protoimpl.UnsafeEnabled {
		mi := &file_nuntio_connect_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ConnectMetric) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ConnectMetric) ProtoMessage() {}

func (x *ConnectMetric) ProtoReflect() protoreflect.Message {
	mi := &file_nuntio_connect_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ConnectMetric.ProtoReflect.Descriptor instead.
func (*ConnectMetric) Descriptor() ([]byte, []int) {
	return file_nuntio_connect_proto_rawDescGZIP(), []int{0}
}

func (x *ConnectMetric) GetDate() *timestamppb.Timestamp {
	if x != nil {
		return x.Date
	}
	return nil
}

func (x *ConnectMetric) GetNumberOfRequests() int32 {
	if x != nil {
		return x.NumberOfRequests
	}
	return 0
}

func (x *ConnectMetric) GetNumberOfConsentTrue() int32 {
	if x != nil {
		return x.NumberOfConsentTrue
	}
	return 0
}

func (x *ConnectMetric) GetNumberOfConsentFalse() int32 {
	if x != nil {
		return x.NumberOfConsentFalse
	}
	return 0
}

func (x *ConnectMetric) GetNumberOfUsersValidated() int32 {
	if x != nil {
		return x.NumberOfUsersValidated
	}
	return 0
}

func (x *ConnectMetric) GetNumberOfUsersNotValidated() int32 {
	if x != nil {
		return x.NumberOfUsersNotValidated
	}
	return 0
}

func (x *ConnectMetric) GetNumberOfAgeGroupInvalid() int32 {
	if x != nil {
		return x.NumberOfAgeGroupInvalid
	}
	return 0
}

func (x *ConnectMetric) GetNumberOfAgeGroup_1To_12() int32 {
	if x != nil {
		return x.NumberOfAgeGroup_1To_12
	}
	return 0
}

func (x *ConnectMetric) GetNumberOfAgeGroup_13To_19() int32 {
	if x != nil {
		return x.NumberOfAgeGroup_13To_19
	}
	return 0
}

func (x *ConnectMetric) GetNumberOfAgeGroup_20To_29() int32 {
	if x != nil {
		return x.NumberOfAgeGroup_20To_29
	}
	return 0
}

func (x *ConnectMetric) GetNumberOfAgeGroup_30To_39() int32 {
	if x != nil {
		return x.NumberOfAgeGroup_30To_39
	}
	return 0
}

func (x *ConnectMetric) GetNumberOfAgeGroup_40To_49() int32 {
	if x != nil {
		return x.NumberOfAgeGroup_40To_49
	}
	return 0
}

func (x *ConnectMetric) GetNumberOfAgeGroup_50To_59() int32 {
	if x != nil {
		return x.NumberOfAgeGroup_50To_59
	}
	return 0
}

func (x *ConnectMetric) GetNumberOfAgeGroup_60To_69() int32 {
	if x != nil {
		return x.NumberOfAgeGroup_60To_69
	}
	return 0
}

func (x *ConnectMetric) GetNumberOfAgeGroup_70To_79() int32 {
	if x != nil {
		return x.NumberOfAgeGroup_70To_79
	}
	return 0
}

func (x *ConnectMetric) GetNumberOfAgeGroup_80To_89() int32 {
	if x != nil {
		return x.NumberOfAgeGroup_80To_89
	}
	return 0
}

func (x *ConnectMetric) GetNumberOfAgeGroup_90To_99() int32 {
	if x != nil {
		return x.NumberOfAgeGroup_90To_99
	}
	return 0
}

func (x *ConnectMetric) GetNumberOfAgeGroup_100To_120() int32 {
	if x != nil {
		return x.NumberOfAgeGroup_100To_120
	}
	return 0
}

func (x *ConnectMetric) GetNumberOfGenderInvalid() int32 {
	if x != nil {
		return x.NumberOfGenderInvalid
	}
	return 0
}

func (x *ConnectMetric) GetNumberOfFemales() int32 {
	if x != nil {
		return x.NumberOfFemales
	}
	return 0
}

func (x *ConnectMetric) GetNumberOfMales() int32 {
	if x != nil {
		return x.NumberOfMales
	}
	return 0
}

func (x *ConnectMetric) GetNumberOfOthers() int32 {
	if x != nil {
		return x.NumberOfOthers
	}
	return 0
}

func (x *ConnectMetric) GetAmountFromCountryInvalid() int32 {
	if x != nil {
		return x.AmountFromCountryInvalid
	}
	return 0
}

func (x *ConnectMetric) GetAmountFromDk() int32 {
	if x != nil {
		return x.AmountFromDk
	}
	return 0
}

func (x *ConnectMetric) GetAmountFromNo() int32 {
	if x != nil {
		return x.AmountFromNo
	}
	return 0
}

func (x *ConnectMetric) GetAmountFromDe() int32 {
	if x != nil {
		return x.AmountFromDe
	}
	return 0
}

type ConnectMetrics struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Metrics []*ConnectMetric `protobuf:"bytes,1,rep,name=metrics,proto3" json:"metrics,omitempty"`
}

func (x *ConnectMetrics) Reset() {
	*x = ConnectMetrics{}
	if protoimpl.UnsafeEnabled {
		mi := &file_nuntio_connect_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ConnectMetrics) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ConnectMetrics) ProtoMessage() {}

func (x *ConnectMetrics) ProtoReflect() protoreflect.Message {
	mi := &file_nuntio_connect_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ConnectMetrics.ProtoReflect.Descriptor instead.
func (*ConnectMetrics) Descriptor() ([]byte, []int) {
	return file_nuntio_connect_proto_rawDescGZIP(), []int{1}
}

func (x *ConnectMetrics) GetMetrics() []*ConnectMetric {
	if x != nil {
		return x.Metrics
	}
	return nil
}

type Scope struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ScopeType     ScopeType `protobuf:"varint,1,opt,name=scope_type,json=scopeType,proto3,enum=NuntioConnect.ScopeType" json:"scope_type,omitempty"`
	ReadId        bool      `protobuf:"varint,2,opt,name=read_id,json=readId,proto3" json:"read_id,omitempty"`
	ReadEmail     bool      `protobuf:"varint,3,opt,name=read_email,json=readEmail,proto3" json:"read_email,omitempty"`
	ReadGender    bool      `protobuf:"varint,4,opt,name=read_gender,json=readGender,proto3" json:"read_gender,omitempty"`
	ReadCreatedAt bool      `protobuf:"varint,5,opt,name=read_created_at,json=readCreatedAt,proto3" json:"read_created_at,omitempty"`
	OfflineAccess bool      `protobuf:"varint,6,opt,name=offline_access,json=offlineAccess,proto3" json:"offline_access,omitempty"`
	ReadName      bool      `protobuf:"varint,7,opt,name=read_name,json=readName,proto3" json:"read_name,omitempty"`
	ReadBirthday  bool      `protobuf:"varint,8,opt,name=read_birthday,json=readBirthday,proto3" json:"read_birthday,omitempty"`
	ReadCountry   bool      `protobuf:"varint,9,opt,name=read_country,json=readCountry,proto3" json:"read_country,omitempty"`
	Name          string    `protobuf:"bytes,10,opt,name=name,proto3" json:"name,omitempty"`
	Key           string    `protobuf:"bytes,11,opt,name=key,proto3" json:"key,omitempty"`
}

func (x *Scope) Reset() {
	*x = Scope{}
	if protoimpl.UnsafeEnabled {
		mi := &file_nuntio_connect_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Scope) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Scope) ProtoMessage() {}

func (x *Scope) ProtoReflect() protoreflect.Message {
	mi := &file_nuntio_connect_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Scope.ProtoReflect.Descriptor instead.
func (*Scope) Descriptor() ([]byte, []int) {
	return file_nuntio_connect_proto_rawDescGZIP(), []int{2}
}

func (x *Scope) GetScopeType() ScopeType {
	if x != nil {
		return x.ScopeType
	}
	return ScopeType_INVALID_SCOPE
}

func (x *Scope) GetReadId() bool {
	if x != nil {
		return x.ReadId
	}
	return false
}

func (x *Scope) GetReadEmail() bool {
	if x != nil {
		return x.ReadEmail
	}
	return false
}

func (x *Scope) GetReadGender() bool {
	if x != nil {
		return x.ReadGender
	}
	return false
}

func (x *Scope) GetReadCreatedAt() bool {
	if x != nil {
		return x.ReadCreatedAt
	}
	return false
}

func (x *Scope) GetOfflineAccess() bool {
	if x != nil {
		return x.OfflineAccess
	}
	return false
}

func (x *Scope) GetReadName() bool {
	if x != nil {
		return x.ReadName
	}
	return false
}

func (x *Scope) GetReadBirthday() bool {
	if x != nil {
		return x.ReadBirthday
	}
	return false
}

func (x *Scope) GetReadCountry() bool {
	if x != nil {
		return x.ReadCountry
	}
	return false
}

func (x *Scope) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Scope) GetKey() string {
	if x != nil {
		return x.Key
	}
	return ""
}

type Grant struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	GrantType GrantType `protobuf:"varint,1,opt,name=grant_type,json=grantType,proto3,enum=NuntioConnect.GrantType" json:"grant_type,omitempty"`
	Name      string    `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
}

func (x *Grant) Reset() {
	*x = Grant{}
	if protoimpl.UnsafeEnabled {
		mi := &file_nuntio_connect_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Grant) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Grant) ProtoMessage() {}

func (x *Grant) ProtoReflect() protoreflect.Message {
	mi := &file_nuntio_connect_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Grant.ProtoReflect.Descriptor instead.
func (*Grant) Descriptor() ([]byte, []int) {
	return file_nuntio_connect_proto_rawDescGZIP(), []int{3}
}

func (x *Grant) GetGrantType() GrantType {
	if x != nil {
		return x.GrantType
	}
	return GrantType_INVALID_GRANT
}

func (x *Grant) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

type OauthResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ResponseType ResponeType `protobuf:"varint,1,opt,name=response_type,json=responseType,proto3,enum=NuntioConnect.ResponeType" json:"response_type,omitempty"`
	Name         string      `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
}

func (x *OauthResponse) Reset() {
	*x = OauthResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_nuntio_connect_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OauthResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OauthResponse) ProtoMessage() {}

func (x *OauthResponse) ProtoReflect() protoreflect.Message {
	mi := &file_nuntio_connect_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OauthResponse.ProtoReflect.Descriptor instead.
func (*OauthResponse) Descriptor() ([]byte, []int) {
	return file_nuntio_connect_proto_rawDescGZIP(), []int{4}
}

func (x *OauthResponse) GetResponseType() ResponeType {
	if x != nil {
		return x.ResponseType
	}
	return ResponeType_INVALID_RESPONSE
}

func (x *OauthResponse) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

type ClientMetadata struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	IsOpen            bool           `protobuf:"varint,1,opt,name=is_open,json=isOpen,proto3" json:"is_open,omitempty"`
	AllowedEmails     []string       `protobuf:"bytes,21,rep,name=allowed_emails,json=allowedEmails,proto3" json:"allowed_emails,omitempty"`
	About             string         `protobuf:"bytes,3,opt,name=about,proto3" json:"about,omitempty"`
	OwnerId           string         `protobuf:"bytes,4,opt,name=owner_id,json=ownerId,proto3" json:"owner_id,omitempty"`
	AgeLowerLimit     int32          `protobuf:"varint,5,opt,name=age_lower_limit,json=ageLowerLimit,proto3" json:"age_lower_limit,omitempty"`
	AgeUpperLimit     int32          `protobuf:"varint,6,opt,name=age_upper_limit,json=ageUpperLimit,proto3" json:"age_upper_limit,omitempty"`
	AllowedCountries  []*CountryCode `protobuf:"bytes,7,rep,name=allowed_countries,json=allowedCountries,proto3" json:"allowed_countries,omitempty"`
	OnlyVerifiedUsers bool           `protobuf:"varint,8,opt,name=only_verified_users,json=onlyVerifiedUsers,proto3" json:"only_verified_users,omitempty"`
}

func (x *ClientMetadata) Reset() {
	*x = ClientMetadata{}
	if protoimpl.UnsafeEnabled {
		mi := &file_nuntio_connect_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ClientMetadata) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ClientMetadata) ProtoMessage() {}

func (x *ClientMetadata) ProtoReflect() protoreflect.Message {
	mi := &file_nuntio_connect_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ClientMetadata.ProtoReflect.Descriptor instead.
func (*ClientMetadata) Descriptor() ([]byte, []int) {
	return file_nuntio_connect_proto_rawDescGZIP(), []int{5}
}

func (x *ClientMetadata) GetIsOpen() bool {
	if x != nil {
		return x.IsOpen
	}
	return false
}

func (x *ClientMetadata) GetAllowedEmails() []string {
	if x != nil {
		return x.AllowedEmails
	}
	return nil
}

func (x *ClientMetadata) GetAbout() string {
	if x != nil {
		return x.About
	}
	return ""
}

func (x *ClientMetadata) GetOwnerId() string {
	if x != nil {
		return x.OwnerId
	}
	return ""
}

func (x *ClientMetadata) GetAgeLowerLimit() int32 {
	if x != nil {
		return x.AgeLowerLimit
	}
	return 0
}

func (x *ClientMetadata) GetAgeUpperLimit() int32 {
	if x != nil {
		return x.AgeUpperLimit
	}
	return 0
}

func (x *ClientMetadata) GetAllowedCountries() []*CountryCode {
	if x != nil {
		return x.AllowedCountries
	}
	return nil
}

func (x *ClientMetadata) GetOnlyVerifiedUsers() bool {
	if x != nil {
		return x.OnlyVerifiedUsers
	}
	return false
}

type ClientApp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id                 string                 `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Name               string                 `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	Password           string                 `protobuf:"bytes,3,opt,name=password,proto3" json:"password,omitempty"`
	ContactEmail       string                 `protobuf:"bytes,4,opt,name=contact_email,json=contactEmail,proto3" json:"contact_email,omitempty"`
	OrganizationId     string                 `protobuf:"bytes,5,opt,name=organization_id,json=organizationId,proto3" json:"organization_id,omitempty"`
	AppWebsite         string                 `protobuf:"bytes,6,opt,name=app_website,json=appWebsite,proto3" json:"app_website,omitempty"`
	LogoUrl            string                 `protobuf:"bytes,7,opt,name=logo_url,json=logoUrl,proto3" json:"logo_url,omitempty"`
	TermsUrl           string                 `protobuf:"bytes,8,opt,name=terms_url,json=termsUrl,proto3" json:"terms_url,omitempty"`
	ClientMetadata     *ClientMetadata        `protobuf:"bytes,9,opt,name=client_metadata,json=clientMetadata,proto3" json:"client_metadata,omitempty"`
	Audience           []string               `protobuf:"bytes,10,rep,name=audience,proto3" json:"audience,omitempty"`
	Scopes             []*Scope               `protobuf:"bytes,11,rep,name=scopes,proto3" json:"scopes,omitempty"`
	Grants             []*Grant               `protobuf:"bytes,12,rep,name=grants,proto3" json:"grants,omitempty"`
	Responses          []*OauthResponse       `protobuf:"bytes,13,rep,name=responses,proto3" json:"responses,omitempty"`
	Callbacks          []string               `protobuf:"bytes,14,rep,name=callbacks,proto3" json:"callbacks,omitempty"`
	CreatedAt          *timestamppb.Timestamp `protobuf:"bytes,15,opt,name=created_at,json=createdAt,proto3" json:"created_at,omitempty"`
	UpdatedAt          *timestamppb.Timestamp `protobuf:"bytes,16,opt,name=updated_at,json=updatedAt,proto3" json:"updated_at,omitempty"`
	AvailableScopes    []*Scope               `protobuf:"bytes,17,rep,name=available_scopes,json=availableScopes,proto3" json:"available_scopes,omitempty"`
	AvailableGrants    []*Grant               `protobuf:"bytes,18,rep,name=available_grants,json=availableGrants,proto3" json:"available_grants,omitempty"`
	AvailableResponses []*OauthResponse       `protobuf:"bytes,19,rep,name=available_responses,json=availableResponses,proto3" json:"available_responses,omitempty"`
	AvailableCountries []*CountryCode         `protobuf:"bytes,20,rep,name=available_countries,json=availableCountries,proto3" json:"available_countries,omitempty"`
}

func (x *ClientApp) Reset() {
	*x = ClientApp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_nuntio_connect_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ClientApp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ClientApp) ProtoMessage() {}

func (x *ClientApp) ProtoReflect() protoreflect.Message {
	mi := &file_nuntio_connect_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ClientApp.ProtoReflect.Descriptor instead.
func (*ClientApp) Descriptor() ([]byte, []int) {
	return file_nuntio_connect_proto_rawDescGZIP(), []int{6}
}

func (x *ClientApp) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *ClientApp) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *ClientApp) GetPassword() string {
	if x != nil {
		return x.Password
	}
	return ""
}

func (x *ClientApp) GetContactEmail() string {
	if x != nil {
		return x.ContactEmail
	}
	return ""
}

func (x *ClientApp) GetOrganizationId() string {
	if x != nil {
		return x.OrganizationId
	}
	return ""
}

func (x *ClientApp) GetAppWebsite() string {
	if x != nil {
		return x.AppWebsite
	}
	return ""
}

func (x *ClientApp) GetLogoUrl() string {
	if x != nil {
		return x.LogoUrl
	}
	return ""
}

func (x *ClientApp) GetTermsUrl() string {
	if x != nil {
		return x.TermsUrl
	}
	return ""
}

func (x *ClientApp) GetClientMetadata() *ClientMetadata {
	if x != nil {
		return x.ClientMetadata
	}
	return nil
}

func (x *ClientApp) GetAudience() []string {
	if x != nil {
		return x.Audience
	}
	return nil
}

func (x *ClientApp) GetScopes() []*Scope {
	if x != nil {
		return x.Scopes
	}
	return nil
}

func (x *ClientApp) GetGrants() []*Grant {
	if x != nil {
		return x.Grants
	}
	return nil
}

func (x *ClientApp) GetResponses() []*OauthResponse {
	if x != nil {
		return x.Responses
	}
	return nil
}

func (x *ClientApp) GetCallbacks() []string {
	if x != nil {
		return x.Callbacks
	}
	return nil
}

func (x *ClientApp) GetCreatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.CreatedAt
	}
	return nil
}

func (x *ClientApp) GetUpdatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.UpdatedAt
	}
	return nil
}

func (x *ClientApp) GetAvailableScopes() []*Scope {
	if x != nil {
		return x.AvailableScopes
	}
	return nil
}

func (x *ClientApp) GetAvailableGrants() []*Grant {
	if x != nil {
		return x.AvailableGrants
	}
	return nil
}

func (x *ClientApp) GetAvailableResponses() []*OauthResponse {
	if x != nil {
		return x.AvailableResponses
	}
	return nil
}

func (x *ClientApp) GetAvailableCountries() []*CountryCode {
	if x != nil {
		return x.AvailableCountries
	}
	return nil
}

type ConnectPublicRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Challenge            string                `protobuf:"bytes,1,opt,name=challenge,proto3" json:"challenge,omitempty"`
	Email                string                `protobuf:"bytes,2,opt,name=email,proto3" json:"email,omitempty"`
	Password             string                `protobuf:"bytes,3,opt,name=password,proto3" json:"password,omitempty"`
	Gender               Gender                `protobuf:"varint,4,opt,name=gender,proto3,enum=Nuntio.Gender" json:"gender,omitempty"`
	Consent              bool                  `protobuf:"varint,5,opt,name=consent,proto3" json:"consent,omitempty"`
	JwtVerificationToken string                `protobuf:"bytes,6,opt,name=jwt_verification_token,json=jwtVerificationToken,proto3" json:"jwt_verification_token,omitempty"`
	VerificationProvider *VerificationProvider `protobuf:"bytes,7,opt,name=verification_provider,json=verificationProvider,proto3" json:"verification_provider,omitempty"`
	AuthToken            string                `protobuf:"bytes,8,opt,name=authToken,proto3" json:"authToken,omitempty"`
}

func (x *ConnectPublicRequest) Reset() {
	*x = ConnectPublicRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_nuntio_connect_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ConnectPublicRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ConnectPublicRequest) ProtoMessage() {}

func (x *ConnectPublicRequest) ProtoReflect() protoreflect.Message {
	mi := &file_nuntio_connect_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ConnectPublicRequest.ProtoReflect.Descriptor instead.
func (*ConnectPublicRequest) Descriptor() ([]byte, []int) {
	return file_nuntio_connect_proto_rawDescGZIP(), []int{7}
}

func (x *ConnectPublicRequest) GetChallenge() string {
	if x != nil {
		return x.Challenge
	}
	return ""
}

func (x *ConnectPublicRequest) GetEmail() string {
	if x != nil {
		return x.Email
	}
	return ""
}

func (x *ConnectPublicRequest) GetPassword() string {
	if x != nil {
		return x.Password
	}
	return ""
}

func (x *ConnectPublicRequest) GetGender() Gender {
	if x != nil {
		return x.Gender
	}
	return Gender_INVALID_GENDER
}

func (x *ConnectPublicRequest) GetConsent() bool {
	if x != nil {
		return x.Consent
	}
	return false
}

func (x *ConnectPublicRequest) GetJwtVerificationToken() string {
	if x != nil {
		return x.JwtVerificationToken
	}
	return ""
}

func (x *ConnectPublicRequest) GetVerificationProvider() *VerificationProvider {
	if x != nil {
		return x.VerificationProvider
	}
	return nil
}

func (x *ConnectPublicRequest) GetAuthToken() string {
	if x != nil {
		return x.AuthToken
	}
	return ""
}

type ConnectPublicResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Client       *ClientApp `protobuf:"bytes,1,opt,name=client,proto3" json:"client,omitempty"`
	Email        string     `protobuf:"bytes,2,opt,name=email,proto3" json:"email,omitempty"`
	RedirectAddr string     `protobuf:"bytes,3,opt,name=redirect_addr,json=redirectAddr,proto3" json:"redirect_addr,omitempty"`
	Error        Error      `protobuf:"varint,4,opt,name=error,proto3,enum=NuntioConnect.Error" json:"error,omitempty"`
}

func (x *ConnectPublicResponse) Reset() {
	*x = ConnectPublicResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_nuntio_connect_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ConnectPublicResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ConnectPublicResponse) ProtoMessage() {}

func (x *ConnectPublicResponse) ProtoReflect() protoreflect.Message {
	mi := &file_nuntio_connect_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ConnectPublicResponse.ProtoReflect.Descriptor instead.
func (*ConnectPublicResponse) Descriptor() ([]byte, []int) {
	return file_nuntio_connect_proto_rawDescGZIP(), []int{8}
}

func (x *ConnectPublicResponse) GetClient() *ClientApp {
	if x != nil {
		return x.Client
	}
	return nil
}

func (x *ConnectPublicResponse) GetEmail() string {
	if x != nil {
		return x.Email
	}
	return ""
}

func (x *ConnectPublicResponse) GetRedirectAddr() string {
	if x != nil {
		return x.RedirectAddr
	}
	return ""
}

func (x *ConnectPublicResponse) GetError() Error {
	if x != nil {
		return x.Error
	}
	return Error_NO_ERROR
}

type ConnectAdminRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	App      *ClientApp `protobuf:"bytes,1,opt,name=app,proto3" json:"app,omitempty"`
	Timespan Timespan   `protobuf:"varint,2,opt,name=timespan,proto3,enum=NuntioConnect.Timespan" json:"timespan,omitempty"`
}

func (x *ConnectAdminRequest) Reset() {
	*x = ConnectAdminRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_nuntio_connect_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ConnectAdminRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ConnectAdminRequest) ProtoMessage() {}

func (x *ConnectAdminRequest) ProtoReflect() protoreflect.Message {
	mi := &file_nuntio_connect_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ConnectAdminRequest.ProtoReflect.Descriptor instead.
func (*ConnectAdminRequest) Descriptor() ([]byte, []int) {
	return file_nuntio_connect_proto_rawDescGZIP(), []int{9}
}

func (x *ConnectAdminRequest) GetApp() *ClientApp {
	if x != nil {
		return x.App
	}
	return nil
}

func (x *ConnectAdminRequest) GetTimespan() Timespan {
	if x != nil {
		return x.Timespan
	}
	return Timespan_INVALID_TIMESPAN
}

type ConnectAdminResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	App     *ClientApp                `protobuf:"bytes,1,opt,name=app,proto3" json:"app,omitempty"`
	Metrics map[int32]*ConnectMetrics `protobuf:"bytes,2,rep,name=metrics,proto3" json:"metrics,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *ConnectAdminResponse) Reset() {
	*x = ConnectAdminResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_nuntio_connect_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ConnectAdminResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ConnectAdminResponse) ProtoMessage() {}

func (x *ConnectAdminResponse) ProtoReflect() protoreflect.Message {
	mi := &file_nuntio_connect_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ConnectAdminResponse.ProtoReflect.Descriptor instead.
func (*ConnectAdminResponse) Descriptor() ([]byte, []int) {
	return file_nuntio_connect_proto_rawDescGZIP(), []int{10}
}

func (x *ConnectAdminResponse) GetApp() *ClientApp {
	if x != nil {
		return x.App
	}
	return nil
}

func (x *ConnectAdminResponse) GetMetrics() map[int32]*ConnectMetrics {
	if x != nil {
		return x.Metrics
	}
	return nil
}

var File_nuntio_connect_proto protoreflect.FileDescriptor

var file_nuntio_connect_proto_rawDesc = []byte{
	0x0a, 0x14, 0x6e, 0x75, 0x6e, 0x74, 0x69, 0x6f, 0x5f, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x0d, 0x4e, 0x75, 0x6e, 0x74, 0x69, 0x6f, 0x43, 0x6f,
	0x6e, 0x6e, 0x65, 0x63, 0x74, 0x1a, 0x1f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x0c, 0x6e, 0x75, 0x6e, 0x74, 0x69, 0x6f, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x22, 0xa7, 0x0b, 0x0a, 0x0d, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74,
	0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x12, 0x2e, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70,
	0x52, 0x04, 0x64, 0x61, 0x74, 0x65, 0x12, 0x2c, 0x0a, 0x12, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72,
	0x5f, 0x6f, 0x66, 0x5f, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x73, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x10, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x4f, 0x66, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x73, 0x12, 0x33, 0x0a, 0x16, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x5f, 0x6f,
	0x66, 0x5f, 0x63, 0x6f, 0x6e, 0x73, 0x65, 0x6e, 0x74, 0x5f, 0x74, 0x72, 0x75, 0x65, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x13, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x4f, 0x66, 0x43, 0x6f,
	0x6e, 0x73, 0x65, 0x6e, 0x74, 0x54, 0x72, 0x75, 0x65, 0x12, 0x35, 0x0a, 0x17, 0x6e, 0x75, 0x6d,
	0x62, 0x65, 0x72, 0x5f, 0x6f, 0x66, 0x5f, 0x63, 0x6f, 0x6e, 0x73, 0x65, 0x6e, 0x74, 0x5f, 0x66,
	0x61, 0x6c, 0x73, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x14, 0x6e, 0x75, 0x6d, 0x62,
	0x65, 0x72, 0x4f, 0x66, 0x43, 0x6f, 0x6e, 0x73, 0x65, 0x6e, 0x74, 0x46, 0x61, 0x6c, 0x73, 0x65,
	0x12, 0x39, 0x0a, 0x19, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x5f, 0x6f, 0x66, 0x5f, 0x75, 0x73,
	0x65, 0x72, 0x73, 0x5f, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x65, 0x64, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x16, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x4f, 0x66, 0x55, 0x73, 0x65,
	0x72, 0x73, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x65, 0x64, 0x12, 0x40, 0x0a, 0x1d, 0x6e,
	0x75, 0x6d, 0x62, 0x65, 0x72, 0x5f, 0x6f, 0x66, 0x5f, 0x75, 0x73, 0x65, 0x72, 0x73, 0x5f, 0x6e,
	0x6f, 0x74, 0x5f, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x65, 0x64, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x19, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x4f, 0x66, 0x55, 0x73, 0x65, 0x72,
	0x73, 0x4e, 0x6f, 0x74, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x65, 0x64, 0x12, 0x3c, 0x0a,
	0x1b, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x5f, 0x6f, 0x66, 0x5f, 0x61, 0x67, 0x65, 0x5f, 0x67,
	0x72, 0x6f, 0x75, 0x70, 0x5f, 0x69, 0x6e, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x18, 0x07, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x17, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x4f, 0x66, 0x41, 0x67, 0x65, 0x47,
	0x72, 0x6f, 0x75, 0x70, 0x49, 0x6e, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x12, 0x39, 0x0a, 0x1a, 0x6e,
	0x75, 0x6d, 0x62, 0x65, 0x72, 0x5f, 0x6f, 0x66, 0x5f, 0x61, 0x67, 0x65, 0x5f, 0x67, 0x72, 0x6f,
	0x75, 0x70, 0x5f, 0x31, 0x74, 0x6f, 0x5f, 0x31, 0x32, 0x18, 0x08, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x15, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x4f, 0x66, 0x41, 0x67, 0x65, 0x47, 0x72, 0x6f, 0x75,
	0x70, 0x31, 0x74, 0x6f, 0x31, 0x32, 0x12, 0x3c, 0x0a, 0x1c, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72,
	0x5f, 0x6f, 0x66, 0x5f, 0x61, 0x67, 0x65, 0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x5f, 0x31, 0x33,
	0x5f, 0x74, 0x6f, 0x5f, 0x31, 0x39, 0x18, 0x09, 0x20, 0x01, 0x28, 0x05, 0x52, 0x16, 0x6e, 0x75,
	0x6d, 0x62, 0x65, 0x72, 0x4f, 0x66, 0x41, 0x67, 0x65, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x31, 0x33,
	0x54, 0x6f, 0x31, 0x39, 0x12, 0x3c, 0x0a, 0x1c, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x5f, 0x6f,
	0x66, 0x5f, 0x61, 0x67, 0x65, 0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x5f, 0x32, 0x30, 0x5f, 0x74,
	0x6f, 0x5f, 0x32, 0x39, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x05, 0x52, 0x16, 0x6e, 0x75, 0x6d, 0x62,
	0x65, 0x72, 0x4f, 0x66, 0x41, 0x67, 0x65, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x32, 0x30, 0x54, 0x6f,
	0x32, 0x39, 0x12, 0x3c, 0x0a, 0x1c, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x5f, 0x6f, 0x66, 0x5f,
	0x61, 0x67, 0x65, 0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x5f, 0x33, 0x30, 0x5f, 0x74, 0x6f, 0x5f,
	0x33, 0x39, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x05, 0x52, 0x16, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72,
	0x4f, 0x66, 0x41, 0x67, 0x65, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x33, 0x30, 0x54, 0x6f, 0x33, 0x39,
	0x12, 0x3c, 0x0a, 0x1c, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x5f, 0x6f, 0x66, 0x5f, 0x61, 0x67,
	0x65, 0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x5f, 0x34, 0x30, 0x5f, 0x74, 0x6f, 0x5f, 0x34, 0x39,
	0x18, 0x0c, 0x20, 0x01, 0x28, 0x05, 0x52, 0x16, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x4f, 0x66,
	0x41, 0x67, 0x65, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x34, 0x30, 0x54, 0x6f, 0x34, 0x39, 0x12, 0x3c,
	0x0a, 0x1c, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x5f, 0x6f, 0x66, 0x5f, 0x61, 0x67, 0x65, 0x5f,
	0x67, 0x72, 0x6f, 0x75, 0x70, 0x5f, 0x35, 0x30, 0x5f, 0x74, 0x6f, 0x5f, 0x35, 0x39, 0x18, 0x0d,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x16, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x4f, 0x66, 0x41, 0x67,
	0x65, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x35, 0x30, 0x54, 0x6f, 0x35, 0x39, 0x12, 0x3c, 0x0a, 0x1c,
	0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x5f, 0x6f, 0x66, 0x5f, 0x61, 0x67, 0x65, 0x5f, 0x67, 0x72,
	0x6f, 0x75, 0x70, 0x5f, 0x36, 0x30, 0x5f, 0x74, 0x6f, 0x5f, 0x36, 0x39, 0x18, 0x0e, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x16, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x4f, 0x66, 0x41, 0x67, 0x65, 0x47,
	0x72, 0x6f, 0x75, 0x70, 0x36, 0x30, 0x54, 0x6f, 0x36, 0x39, 0x12, 0x3c, 0x0a, 0x1c, 0x6e, 0x75,
	0x6d, 0x62, 0x65, 0x72, 0x5f, 0x6f, 0x66, 0x5f, 0x61, 0x67, 0x65, 0x5f, 0x67, 0x72, 0x6f, 0x75,
	0x70, 0x5f, 0x37, 0x30, 0x5f, 0x74, 0x6f, 0x5f, 0x37, 0x39, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x16, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x4f, 0x66, 0x41, 0x67, 0x65, 0x47, 0x72, 0x6f,
	0x75, 0x70, 0x37, 0x30, 0x54, 0x6f, 0x37, 0x39, 0x12, 0x3c, 0x0a, 0x1c, 0x6e, 0x75, 0x6d, 0x62,
	0x65, 0x72, 0x5f, 0x6f, 0x66, 0x5f, 0x61, 0x67, 0x65, 0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x5f,
	0x38, 0x30, 0x5f, 0x74, 0x6f, 0x5f, 0x38, 0x39, 0x18, 0x10, 0x20, 0x01, 0x28, 0x05, 0x52, 0x16,
	0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x4f, 0x66, 0x41, 0x67, 0x65, 0x47, 0x72, 0x6f, 0x75, 0x70,
	0x38, 0x30, 0x54, 0x6f, 0x38, 0x39, 0x12, 0x3c, 0x0a, 0x1c, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72,
	0x5f, 0x6f, 0x66, 0x5f, 0x61, 0x67, 0x65, 0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x5f, 0x39, 0x30,
	0x5f, 0x74, 0x6f, 0x5f, 0x39, 0x39, 0x18, 0x11, 0x20, 0x01, 0x28, 0x05, 0x52, 0x16, 0x6e, 0x75,
	0x6d, 0x62, 0x65, 0x72, 0x4f, 0x66, 0x41, 0x67, 0x65, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x39, 0x30,
	0x54, 0x6f, 0x39, 0x39, 0x12, 0x40, 0x0a, 0x1e, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x5f, 0x6f,
	0x66, 0x5f, 0x61, 0x67, 0x65, 0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x5f, 0x31, 0x30, 0x30, 0x5f,
	0x74, 0x6f, 0x5f, 0x31, 0x32, 0x30, 0x18, 0x12, 0x20, 0x01, 0x28, 0x05, 0x52, 0x18, 0x6e, 0x75,
	0x6d, 0x62, 0x65, 0x72, 0x4f, 0x66, 0x41, 0x67, 0x65, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x31, 0x30,
	0x30, 0x54, 0x6f, 0x31, 0x32, 0x30, 0x12, 0x37, 0x0a, 0x18, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72,
	0x5f, 0x6f, 0x66, 0x5f, 0x67, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x5f, 0x69, 0x6e, 0x76, 0x61, 0x6c,
	0x69, 0x64, 0x18, 0x13, 0x20, 0x01, 0x28, 0x05, 0x52, 0x15, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72,
	0x4f, 0x66, 0x47, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x49, 0x6e, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x12,
	0x2a, 0x0a, 0x11, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x5f, 0x6f, 0x66, 0x5f, 0x66, 0x65, 0x6d,
	0x61, 0x6c, 0x65, 0x73, 0x18, 0x14, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0f, 0x6e, 0x75, 0x6d, 0x62,
	0x65, 0x72, 0x4f, 0x66, 0x46, 0x65, 0x6d, 0x61, 0x6c, 0x65, 0x73, 0x12, 0x26, 0x0a, 0x0f, 0x6e,
	0x75, 0x6d, 0x62, 0x65, 0x72, 0x5f, 0x6f, 0x66, 0x5f, 0x6d, 0x61, 0x6c, 0x65, 0x73, 0x18, 0x15,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x0d, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x4f, 0x66, 0x4d, 0x61,
	0x6c, 0x65, 0x73, 0x12, 0x28, 0x0a, 0x10, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x5f, 0x6f, 0x66,
	0x5f, 0x6f, 0x74, 0x68, 0x65, 0x72, 0x73, 0x18, 0x16, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0e, 0x6e,
	0x75, 0x6d, 0x62, 0x65, 0x72, 0x4f, 0x66, 0x4f, 0x74, 0x68, 0x65, 0x72, 0x73, 0x12, 0x3d, 0x0a,
	0x1b, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x66, 0x72, 0x6f, 0x6d, 0x5f, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x72, 0x79, 0x5f, 0x69, 0x6e, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x18, 0x17, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x18, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x46, 0x72, 0x6f, 0x6d, 0x43, 0x6f,
	0x75, 0x6e, 0x74, 0x72, 0x79, 0x49, 0x6e, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x12, 0x24, 0x0a, 0x0e,
	0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x66, 0x72, 0x6f, 0x6d, 0x5f, 0x64, 0x6b, 0x18, 0x18,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x0c, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x46, 0x72, 0x6f, 0x6d,
	0x44, 0x6b, 0x12, 0x24, 0x0a, 0x0e, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x66, 0x72, 0x6f,
	0x6d, 0x5f, 0x6e, 0x6f, 0x18, 0x19, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0c, 0x61, 0x6d, 0x6f, 0x75,
	0x6e, 0x74, 0x46, 0x72, 0x6f, 0x6d, 0x4e, 0x6f, 0x12, 0x24, 0x0a, 0x0e, 0x61, 0x6d, 0x6f, 0x75,
	0x6e, 0x74, 0x5f, 0x66, 0x72, 0x6f, 0x6d, 0x5f, 0x64, 0x65, 0x18, 0x1a, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x0c, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x46, 0x72, 0x6f, 0x6d, 0x44, 0x65, 0x22, 0x48,
	0x0a, 0x0e, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73,
	0x12, 0x36, 0x0a, 0x07, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x1c, 0x2e, 0x4e, 0x75, 0x6e, 0x74, 0x69, 0x6f, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63,
	0x74, 0x2e, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x52,
	0x07, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x22, 0xf3, 0x02, 0x0a, 0x05, 0x53, 0x63, 0x6f,
	0x70, 0x65, 0x12, 0x37, 0x0a, 0x0a, 0x73, 0x63, 0x6f, 0x70, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x18, 0x2e, 0x4e, 0x75, 0x6e, 0x74, 0x69, 0x6f, 0x43,
	0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x2e, 0x53, 0x63, 0x6f, 0x70, 0x65, 0x54, 0x79, 0x70, 0x65,
	0x52, 0x09, 0x73, 0x63, 0x6f, 0x70, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x17, 0x0a, 0x07, 0x72,
	0x65, 0x61, 0x64, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x72, 0x65,
	0x61, 0x64, 0x49, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x72, 0x65, 0x61, 0x64, 0x5f, 0x65, 0x6d, 0x61,
	0x69, 0x6c, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x09, 0x72, 0x65, 0x61, 0x64, 0x45, 0x6d,
	0x61, 0x69, 0x6c, 0x12, 0x1f, 0x0a, 0x0b, 0x72, 0x65, 0x61, 0x64, 0x5f, 0x67, 0x65, 0x6e, 0x64,
	0x65, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0a, 0x72, 0x65, 0x61, 0x64, 0x47, 0x65,
	0x6e, 0x64, 0x65, 0x72, 0x12, 0x26, 0x0a, 0x0f, 0x72, 0x65, 0x61, 0x64, 0x5f, 0x63, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0d, 0x72,
	0x65, 0x61, 0x64, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x25, 0x0a, 0x0e,
	0x6f, 0x66, 0x66, 0x6c, 0x69, 0x6e, 0x65, 0x5f, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x0d, 0x6f, 0x66, 0x66, 0x6c, 0x69, 0x6e, 0x65, 0x41, 0x63, 0x63,
	0x65, 0x73, 0x73, 0x12, 0x1b, 0x0a, 0x09, 0x72, 0x65, 0x61, 0x64, 0x5f, 0x6e, 0x61, 0x6d, 0x65,
	0x18, 0x07, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x72, 0x65, 0x61, 0x64, 0x4e, 0x61, 0x6d, 0x65,
	0x12, 0x23, 0x0a, 0x0d, 0x72, 0x65, 0x61, 0x64, 0x5f, 0x62, 0x69, 0x72, 0x74, 0x68, 0x64, 0x61,
	0x79, 0x18, 0x08, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0c, 0x72, 0x65, 0x61, 0x64, 0x42, 0x69, 0x72,
	0x74, 0x68, 0x64, 0x61, 0x79, 0x12, 0x21, 0x0a, 0x0c, 0x72, 0x65, 0x61, 0x64, 0x5f, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x72, 0x79, 0x18, 0x09, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0b, 0x72, 0x65, 0x61,
	0x64, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65,
	0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x10, 0x0a, 0x03,
	0x6b, 0x65, 0x79, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x22, 0x54,
	0x0a, 0x05, 0x47, 0x72, 0x61, 0x6e, 0x74, 0x12, 0x37, 0x0a, 0x0a, 0x67, 0x72, 0x61, 0x6e, 0x74,
	0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x18, 0x2e, 0x4e, 0x75,
	0x6e, 0x74, 0x69, 0x6f, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x2e, 0x47, 0x72, 0x61, 0x6e,
	0x74, 0x54, 0x79, 0x70, 0x65, 0x52, 0x09, 0x67, 0x72, 0x61, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65,
	0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04,
	0x6e, 0x61, 0x6d, 0x65, 0x22, 0x64, 0x0a, 0x0d, 0x4f, 0x61, 0x75, 0x74, 0x68, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x3f, 0x0a, 0x0d, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1a, 0x2e, 0x4e,
	0x75, 0x6e, 0x74, 0x69, 0x6f, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x2e, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x65, 0x54, 0x79, 0x70, 0x65, 0x52, 0x0c, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x22, 0xc3, 0x02, 0x0a, 0x0e, 0x43,
	0x6c, 0x69, 0x65, 0x6e, 0x74, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x12, 0x17, 0x0a,
	0x07, 0x69, 0x73, 0x5f, 0x6f, 0x70, 0x65, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x06,
	0x69, 0x73, 0x4f, 0x70, 0x65, 0x6e, 0x12, 0x25, 0x0a, 0x0e, 0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x65,
	0x64, 0x5f, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x73, 0x18, 0x15, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0d,
	0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x65, 0x64, 0x45, 0x6d, 0x61, 0x69, 0x6c, 0x73, 0x12, 0x14, 0x0a,
	0x05, 0x61, 0x62, 0x6f, 0x75, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x61, 0x62,
	0x6f, 0x75, 0x74, 0x12, 0x19, 0x0a, 0x08, 0x6f, 0x77, 0x6e, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6f, 0x77, 0x6e, 0x65, 0x72, 0x49, 0x64, 0x12, 0x26,
	0x0a, 0x0f, 0x61, 0x67, 0x65, 0x5f, 0x6c, 0x6f, 0x77, 0x65, 0x72, 0x5f, 0x6c, 0x69, 0x6d, 0x69,
	0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0d, 0x61, 0x67, 0x65, 0x4c, 0x6f, 0x77, 0x65,
	0x72, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x12, 0x26, 0x0a, 0x0f, 0x61, 0x67, 0x65, 0x5f, 0x75, 0x70,
	0x70, 0x65, 0x72, 0x5f, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x0d, 0x61, 0x67, 0x65, 0x55, 0x70, 0x70, 0x65, 0x72, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x12, 0x40,
	0x0a, 0x11, 0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x65, 0x64, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x72,
	0x69, 0x65, 0x73, 0x18, 0x07, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x4e, 0x75, 0x6e, 0x74,
	0x69, 0x6f, 0x2e, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79, 0x43, 0x6f, 0x64, 0x65, 0x52, 0x10,
	0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x65, 0x64, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x69, 0x65, 0x73,
	0x12, 0x2e, 0x0a, 0x13, 0x6f, 0x6e, 0x6c, 0x79, 0x5f, 0x76, 0x65, 0x72, 0x69, 0x66, 0x69, 0x65,
	0x64, 0x5f, 0x75, 0x73, 0x65, 0x72, 0x73, 0x18, 0x08, 0x20, 0x01, 0x28, 0x08, 0x52, 0x11, 0x6f,
	0x6e, 0x6c, 0x79, 0x56, 0x65, 0x72, 0x69, 0x66, 0x69, 0x65, 0x64, 0x55, 0x73, 0x65, 0x72, 0x73,
	0x22, 0x99, 0x07, 0x0a, 0x09, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x41, 0x70, 0x70, 0x12, 0x0e,
	0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x12,
	0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61,
	0x6d, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x70, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x12, 0x23,
	0x0a, 0x0d, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x5f, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x45, 0x6d,
	0x61, 0x69, 0x6c, 0x12, 0x27, 0x0a, 0x0f, 0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x6f, 0x72,
	0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x1f, 0x0a, 0x0b,
	0x61, 0x70, 0x70, 0x5f, 0x77, 0x65, 0x62, 0x73, 0x69, 0x74, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0a, 0x61, 0x70, 0x70, 0x57, 0x65, 0x62, 0x73, 0x69, 0x74, 0x65, 0x12, 0x19, 0x0a,
	0x08, 0x6c, 0x6f, 0x67, 0x6f, 0x5f, 0x75, 0x72, 0x6c, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x07, 0x6c, 0x6f, 0x67, 0x6f, 0x55, 0x72, 0x6c, 0x12, 0x1b, 0x0a, 0x09, 0x74, 0x65, 0x72, 0x6d,
	0x73, 0x5f, 0x75, 0x72, 0x6c, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x74, 0x65, 0x72,
	0x6d, 0x73, 0x55, 0x72, 0x6c, 0x12, 0x46, 0x0a, 0x0f, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x5f,
	0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d,
	0x2e, 0x4e, 0x75, 0x6e, 0x74, 0x69, 0x6f, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x2e, 0x43,
	0x6c, 0x69, 0x65, 0x6e, 0x74, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x52, 0x0e, 0x63,
	0x6c, 0x69, 0x65, 0x6e, 0x74, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x12, 0x1a, 0x0a,
	0x08, 0x61, 0x75, 0x64, 0x69, 0x65, 0x6e, 0x63, 0x65, 0x18, 0x0a, 0x20, 0x03, 0x28, 0x09, 0x52,
	0x08, 0x61, 0x75, 0x64, 0x69, 0x65, 0x6e, 0x63, 0x65, 0x12, 0x2c, 0x0a, 0x06, 0x73, 0x63, 0x6f,
	0x70, 0x65, 0x73, 0x18, 0x0b, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x4e, 0x75, 0x6e, 0x74,
	0x69, 0x6f, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x2e, 0x53, 0x63, 0x6f, 0x70, 0x65, 0x52,
	0x06, 0x73, 0x63, 0x6f, 0x70, 0x65, 0x73, 0x12, 0x2c, 0x0a, 0x06, 0x67, 0x72, 0x61, 0x6e, 0x74,
	0x73, 0x18, 0x0c, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x4e, 0x75, 0x6e, 0x74, 0x69, 0x6f,
	0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x2e, 0x47, 0x72, 0x61, 0x6e, 0x74, 0x52, 0x06, 0x67,
	0x72, 0x61, 0x6e, 0x74, 0x73, 0x12, 0x3a, 0x0a, 0x09, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x73, 0x18, 0x0d, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x4e, 0x75, 0x6e, 0x74, 0x69,
	0x6f, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x2e, 0x4f, 0x61, 0x75, 0x74, 0x68, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x52, 0x09, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x73, 0x12, 0x1c, 0x0a, 0x09, 0x63, 0x61, 0x6c, 0x6c, 0x62, 0x61, 0x63, 0x6b, 0x73, 0x18, 0x0e,
	0x20, 0x03, 0x28, 0x09, 0x52, 0x09, 0x63, 0x61, 0x6c, 0x6c, 0x62, 0x61, 0x63, 0x6b, 0x73, 0x12,
	0x39, 0x0a, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x0f, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52,
	0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x39, 0x0a, 0x0a, 0x75, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x10, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x75, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x3f, 0x0a, 0x10, 0x61, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62,
	0x6c, 0x65, 0x5f, 0x73, 0x63, 0x6f, 0x70, 0x65, 0x73, 0x18, 0x11, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x14, 0x2e, 0x4e, 0x75, 0x6e, 0x74, 0x69, 0x6f, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x2e,
	0x53, 0x63, 0x6f, 0x70, 0x65, 0x52, 0x0f, 0x61, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x6c, 0x65,
	0x53, 0x63, 0x6f, 0x70, 0x65, 0x73, 0x12, 0x3f, 0x0a, 0x10, 0x61, 0x76, 0x61, 0x69, 0x6c, 0x61,
	0x62, 0x6c, 0x65, 0x5f, 0x67, 0x72, 0x61, 0x6e, 0x74, 0x73, 0x18, 0x12, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x14, 0x2e, 0x4e, 0x75, 0x6e, 0x74, 0x69, 0x6f, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74,
	0x2e, 0x47, 0x72, 0x61, 0x6e, 0x74, 0x52, 0x0f, 0x61, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x6c,
	0x65, 0x47, 0x72, 0x61, 0x6e, 0x74, 0x73, 0x12, 0x4d, 0x0a, 0x13, 0x61, 0x76, 0x61, 0x69, 0x6c,
	0x61, 0x62, 0x6c, 0x65, 0x5f, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x73, 0x18, 0x13,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x4e, 0x75, 0x6e, 0x74, 0x69, 0x6f, 0x43, 0x6f, 0x6e,
	0x6e, 0x65, 0x63, 0x74, 0x2e, 0x4f, 0x61, 0x75, 0x74, 0x68, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x52, 0x12, 0x61, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x6c, 0x65, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x73, 0x12, 0x44, 0x0a, 0x13, 0x61, 0x76, 0x61, 0x69, 0x6c, 0x61,
	0x62, 0x6c, 0x65, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x69, 0x65, 0x73, 0x18, 0x14, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x4e, 0x75, 0x6e, 0x74, 0x69, 0x6f, 0x2e, 0x43, 0x6f, 0x75,
	0x6e, 0x74, 0x72, 0x79, 0x43, 0x6f, 0x64, 0x65, 0x52, 0x12, 0x61, 0x76, 0x61, 0x69, 0x6c, 0x61,
	0x62, 0x6c, 0x65, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x69, 0x65, 0x73, 0x22, 0xcf, 0x02, 0x0a,
	0x14, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1c, 0x0a, 0x09, 0x63, 0x68, 0x61, 0x6c, 0x6c, 0x65, 0x6e,
	0x67, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x63, 0x68, 0x61, 0x6c, 0x6c, 0x65,
	0x6e, 0x67, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x05, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x61, 0x73,
	0x73, 0x77, 0x6f, 0x72, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x70, 0x61, 0x73,
	0x73, 0x77, 0x6f, 0x72, 0x64, 0x12, 0x26, 0x0a, 0x06, 0x67, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0e, 0x2e, 0x4e, 0x75, 0x6e, 0x74, 0x69, 0x6f, 0x2e, 0x47,
	0x65, 0x6e, 0x64, 0x65, 0x72, 0x52, 0x06, 0x67, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x12, 0x18, 0x0a,
	0x07, 0x63, 0x6f, 0x6e, 0x73, 0x65, 0x6e, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07,
	0x63, 0x6f, 0x6e, 0x73, 0x65, 0x6e, 0x74, 0x12, 0x34, 0x0a, 0x16, 0x6a, 0x77, 0x74, 0x5f, 0x76,
	0x65, 0x72, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x74, 0x6f, 0x6b, 0x65,
	0x6e, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x14, 0x6a, 0x77, 0x74, 0x56, 0x65, 0x72, 0x69,
	0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x51, 0x0a,
	0x15, 0x76, 0x65, 0x72, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x70, 0x72,
	0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x4e,
	0x75, 0x6e, 0x74, 0x69, 0x6f, 0x2e, 0x56, 0x65, 0x72, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x52, 0x14, 0x76, 0x65, 0x72, 0x69,
	0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72,
	0x12, 0x1c, 0x0a, 0x09, 0x61, 0x75, 0x74, 0x68, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x08, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x09, 0x61, 0x75, 0x74, 0x68, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x22, 0xb0,
	0x01, 0x0a, 0x15, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x63,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x30, 0x0a, 0x06, 0x63, 0x6c, 0x69, 0x65,
	0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x4e, 0x75, 0x6e, 0x74, 0x69,
	0x6f, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x2e, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x41,
	0x70, 0x70, 0x52, 0x06, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x65, 0x6d,
	0x61, 0x69, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x65, 0x6d, 0x61, 0x69, 0x6c,
	0x12, 0x23, 0x0a, 0x0d, 0x72, 0x65, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x5f, 0x61, 0x64, 0x64,
	0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x72, 0x65, 0x64, 0x69, 0x72, 0x65, 0x63,
	0x74, 0x41, 0x64, 0x64, 0x72, 0x12, 0x2a, 0x0a, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x14, 0x2e, 0x4e, 0x75, 0x6e, 0x74, 0x69, 0x6f, 0x43, 0x6f, 0x6e,
	0x6e, 0x65, 0x63, 0x74, 0x2e, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x52, 0x05, 0x65, 0x72, 0x72, 0x6f,
	0x72, 0x22, 0x76, 0x0a, 0x13, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x41, 0x64, 0x6d, 0x69,
	0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x2a, 0x0a, 0x03, 0x61, 0x70, 0x70, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x4e, 0x75, 0x6e, 0x74, 0x69, 0x6f, 0x43, 0x6f,
	0x6e, 0x6e, 0x65, 0x63, 0x74, 0x2e, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x41, 0x70, 0x70, 0x52,
	0x03, 0x61, 0x70, 0x70, 0x12, 0x33, 0x0a, 0x08, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x6e,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x17, 0x2e, 0x4e, 0x75, 0x6e, 0x74, 0x69, 0x6f, 0x43,
	0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x6e, 0x52,
	0x08, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x6e, 0x22, 0xe9, 0x01, 0x0a, 0x14, 0x43, 0x6f,
	0x6e, 0x6e, 0x65, 0x63, 0x74, 0x41, 0x64, 0x6d, 0x69, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x2a, 0x0a, 0x03, 0x61, 0x70, 0x70, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x18, 0x2e, 0x4e, 0x75, 0x6e, 0x74, 0x69, 0x6f, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x2e,
	0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x41, 0x70, 0x70, 0x52, 0x03, 0x61, 0x70, 0x70, 0x12, 0x4a,
	0x0a, 0x07, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x30, 0x2e, 0x4e, 0x75, 0x6e, 0x74, 0x69, 0x6f, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x2e,
	0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x41, 0x64, 0x6d, 0x69, 0x6e, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x45, 0x6e, 0x74, 0x72,
	0x79, 0x52, 0x07, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x1a, 0x59, 0x0a, 0x0c, 0x4d, 0x65,
	0x74, 0x72, 0x69, 0x63, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65,
	0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x33, 0x0a, 0x05,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x4e, 0x75,
	0x6e, 0x74, 0x69, 0x6f, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x2e, 0x43, 0x6f, 0x6e, 0x6e,
	0x65, 0x63, 0x74, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x3a, 0x02, 0x38, 0x01, 0x2a, 0x37, 0x0a, 0x05, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x12, 0x0c,
	0x0a, 0x08, 0x4e, 0x4f, 0x5f, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x10, 0x00, 0x12, 0x20, 0x0a, 0x1c,
	0x45, 0x52, 0x52, 0x4f, 0x52, 0x5f, 0x52, 0x45, 0x51, 0x55, 0x49, 0x52, 0x45, 0x5f, 0x49, 0x44,
	0x45, 0x4e, 0x54, 0x49, 0x46, 0x49, 0x43, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x10, 0x01, 0x2a, 0x7e,
	0x0a, 0x08, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x6e, 0x12, 0x14, 0x0a, 0x10, 0x49, 0x4e,
	0x56, 0x41, 0x4c, 0x49, 0x44, 0x5f, 0x54, 0x49, 0x4d, 0x45, 0x53, 0x50, 0x41, 0x4e, 0x10, 0x00,
	0x12, 0x10, 0x0a, 0x0c, 0x54, 0x49, 0x4d, 0x45, 0x53, 0x50, 0x41, 0x4e, 0x5f, 0x44, 0x41, 0x59,
	0x10, 0x01, 0x12, 0x11, 0x0a, 0x0d, 0x54, 0x49, 0x4d, 0x45, 0x53, 0x50, 0x41, 0x4e, 0x5f, 0x57,
	0x45, 0x45, 0x4b, 0x10, 0x02, 0x12, 0x12, 0x0a, 0x0e, 0x54, 0x49, 0x4d, 0x45, 0x53, 0x50, 0x41,
	0x4e, 0x5f, 0x4d, 0x4f, 0x4e, 0x54, 0x48, 0x10, 0x03, 0x12, 0x11, 0x0a, 0x0d, 0x54, 0x49, 0x4d,
	0x45, 0x53, 0x50, 0x41, 0x4e, 0x5f, 0x59, 0x45, 0x41, 0x52, 0x10, 0x04, 0x12, 0x10, 0x0a, 0x0c,
	0x54, 0x49, 0x4d, 0x45, 0x53, 0x50, 0x41, 0x4e, 0x5f, 0x41, 0x4c, 0x4c, 0x10, 0x05, 0x2a, 0xa5,
	0x01, 0x0a, 0x09, 0x53, 0x63, 0x6f, 0x70, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x11, 0x0a, 0x0d,
	0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x5f, 0x53, 0x43, 0x4f, 0x50, 0x45, 0x10, 0x00, 0x12,
	0x11, 0x0a, 0x0d, 0x44, 0x45, 0x46, 0x41, 0x55, 0x4c, 0x54, 0x5f, 0x53, 0x43, 0x4f, 0x50, 0x45,
	0x10, 0x01, 0x12, 0x18, 0x0a, 0x14, 0x4f, 0x46, 0x46, 0x4c, 0x49, 0x4e, 0x45, 0x5f, 0x41, 0x43,
	0x43, 0x45, 0x53, 0x53, 0x5f, 0x53, 0x43, 0x4f, 0x50, 0x45, 0x10, 0x02, 0x12, 0x10, 0x0a, 0x0c,
	0x47, 0x45, 0x4e, 0x44, 0x45, 0x52, 0x5f, 0x53, 0x43, 0x4f, 0x50, 0x45, 0x10, 0x03, 0x12, 0x0e,
	0x0a, 0x0a, 0x4e, 0x41, 0x4d, 0x45, 0x5f, 0x53, 0x43, 0x4f, 0x50, 0x45, 0x10, 0x04, 0x12, 0x12,
	0x0a, 0x0e, 0x42, 0x49, 0x52, 0x54, 0x48, 0x44, 0x41, 0x59, 0x5f, 0x53, 0x43, 0x4f, 0x50, 0x45,
	0x10, 0x05, 0x12, 0x11, 0x0a, 0x0d, 0x43, 0x4f, 0x55, 0x4e, 0x54, 0x52, 0x59, 0x5f, 0x53, 0x43,
	0x4f, 0x50, 0x45, 0x10, 0x06, 0x12, 0x0f, 0x0a, 0x0b, 0x45, 0x4d, 0x41, 0x49, 0x4c, 0x5f, 0x53,
	0x43, 0x4f, 0x50, 0x45, 0x10, 0x07, 0x2a, 0x89, 0x02, 0x0a, 0x08, 0x41, 0x67, 0x65, 0x47, 0x72,
	0x6f, 0x75, 0x70, 0x12, 0x15, 0x0a, 0x11, 0x41, 0x47, 0x45, 0x5f, 0x47, 0x52, 0x4f, 0x55, 0x50,
	0x5f, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x10, 0x00, 0x12, 0x12, 0x0a, 0x0e, 0x41, 0x47,
	0x45, 0x5f, 0x47, 0x52, 0x4f, 0x55, 0x50, 0x5f, 0x31, 0x5f, 0x31, 0x32, 0x10, 0x01, 0x12, 0x13,
	0x0a, 0x0f, 0x41, 0x47, 0x45, 0x5f, 0x47, 0x52, 0x4f, 0x55, 0x50, 0x5f, 0x31, 0x33, 0x5f, 0x31,
	0x39, 0x10, 0x02, 0x12, 0x13, 0x0a, 0x0f, 0x41, 0x47, 0x45, 0x5f, 0x47, 0x52, 0x4f, 0x55, 0x50,
	0x5f, 0x32, 0x30, 0x5f, 0x32, 0x39, 0x10, 0x03, 0x12, 0x13, 0x0a, 0x0f, 0x41, 0x47, 0x45, 0x5f,
	0x47, 0x52, 0x4f, 0x55, 0x50, 0x5f, 0x33, 0x30, 0x5f, 0x33, 0x39, 0x10, 0x04, 0x12, 0x13, 0x0a,
	0x0f, 0x41, 0x47, 0x45, 0x5f, 0x47, 0x52, 0x4f, 0x55, 0x50, 0x5f, 0x34, 0x30, 0x5f, 0x34, 0x39,
	0x10, 0x05, 0x12, 0x13, 0x0a, 0x0f, 0x41, 0x47, 0x45, 0x5f, 0x47, 0x52, 0x4f, 0x55, 0x50, 0x5f,
	0x35, 0x30, 0x5f, 0x35, 0x39, 0x10, 0x06, 0x12, 0x13, 0x0a, 0x0f, 0x41, 0x47, 0x45, 0x5f, 0x47,
	0x52, 0x4f, 0x55, 0x50, 0x5f, 0x36, 0x30, 0x5f, 0x36, 0x39, 0x10, 0x07, 0x12, 0x13, 0x0a, 0x0f,
	0x41, 0x47, 0x45, 0x5f, 0x47, 0x52, 0x4f, 0x55, 0x50, 0x5f, 0x37, 0x30, 0x5f, 0x37, 0x39, 0x10,
	0x08, 0x12, 0x13, 0x0a, 0x0f, 0x41, 0x47, 0x45, 0x5f, 0x47, 0x52, 0x4f, 0x55, 0x50, 0x5f, 0x38,
	0x30, 0x5f, 0x38, 0x39, 0x10, 0x09, 0x12, 0x13, 0x0a, 0x0f, 0x41, 0x47, 0x45, 0x5f, 0x47, 0x52,
	0x4f, 0x55, 0x50, 0x5f, 0x39, 0x30, 0x5f, 0x39, 0x39, 0x10, 0x0a, 0x12, 0x15, 0x0a, 0x11, 0x41,
	0x47, 0x45, 0x5f, 0x47, 0x52, 0x4f, 0x55, 0x50, 0x5f, 0x31, 0x30, 0x30, 0x5f, 0x31, 0x32, 0x30,
	0x10, 0x0b, 0x2a, 0x41, 0x0a, 0x09, 0x47, 0x72, 0x61, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12,
	0x11, 0x0a, 0x0d, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x5f, 0x47, 0x52, 0x41, 0x4e, 0x54,
	0x10, 0x00, 0x12, 0x0e, 0x0a, 0x0a, 0x41, 0x55, 0x54, 0x48, 0x5f, 0x47, 0x52, 0x41, 0x4e, 0x54,
	0x10, 0x01, 0x12, 0x11, 0x0a, 0x0d, 0x52, 0x45, 0x46, 0x52, 0x45, 0x53, 0x48, 0x5f, 0x47, 0x52,
	0x41, 0x4e, 0x54, 0x10, 0x02, 0x2a, 0x5b, 0x0a, 0x0b, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x65,
	0x54, 0x79, 0x70, 0x65, 0x12, 0x14, 0x0a, 0x10, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x5f,
	0x52, 0x45, 0x53, 0x50, 0x4f, 0x4e, 0x53, 0x45, 0x10, 0x00, 0x12, 0x11, 0x0a, 0x0d, 0x43, 0x4f,
	0x44, 0x45, 0x5f, 0x52, 0x45, 0x53, 0x50, 0x4f, 0x4e, 0x53, 0x45, 0x10, 0x01, 0x12, 0x12, 0x0a,
	0x0e, 0x54, 0x4f, 0x4b, 0x45, 0x4e, 0x5f, 0x52, 0x45, 0x53, 0x50, 0x4f, 0x4e, 0x53, 0x45, 0x10,
	0x02, 0x12, 0x0f, 0x0a, 0x0b, 0x49, 0x44, 0x5f, 0x52, 0x45, 0x53, 0x50, 0x4f, 0x4e, 0x53, 0x45,
	0x10, 0x03, 0x32, 0xb1, 0x07, 0x0a, 0x0d, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x53, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x12, 0x58, 0x0a, 0x09, 0x48, 0x65, 0x61, 0x72, 0x74, 0x62, 0x65, 0x61,
	0x74, 0x12, 0x23, 0x2e, 0x4e, 0x75, 0x6e, 0x74, 0x69, 0x6f, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63,
	0x74, 0x2e, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x24, 0x2e, 0x4e, 0x75, 0x6e, 0x74, 0x69, 0x6f, 0x43,
	0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x2e, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x50, 0x75,
	0x62, 0x6c, 0x69, 0x63, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x65,
	0x0a, 0x16, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x65, 0x4c, 0x6f, 0x67, 0x69, 0x6e, 0x43,
	0x68, 0x61, 0x6c, 0x6c, 0x65, 0x6e, 0x67, 0x65, 0x12, 0x23, 0x2e, 0x4e, 0x75, 0x6e, 0x74, 0x69,
	0x6f, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x2e, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74,
	0x50, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x24, 0x2e,
	0x4e, 0x75, 0x6e, 0x74, 0x69, 0x6f, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x2e, 0x43, 0x6f,
	0x6e, 0x6e, 0x65, 0x63, 0x74, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x54, 0x0a, 0x05, 0x4c, 0x6f, 0x67, 0x69, 0x6e, 0x12, 0x23,
	0x2e, 0x4e, 0x75, 0x6e, 0x74, 0x69, 0x6f, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x2e, 0x43,
	0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x24, 0x2e, 0x4e, 0x75, 0x6e, 0x74, 0x69, 0x6f, 0x43, 0x6f, 0x6e, 0x6e,
	0x65, 0x63, 0x74, 0x2e, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x50, 0x75, 0x62, 0x6c, 0x69,
	0x63, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x67, 0x0a, 0x18, 0x56,
	0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x65, 0x43, 0x6f, 0x6e, 0x73, 0x65, 0x6e, 0x74, 0x43, 0x68,
	0x61, 0x6c, 0x6c, 0x65, 0x6e, 0x67, 0x65, 0x12, 0x23, 0x2e, 0x4e, 0x75, 0x6e, 0x74, 0x69, 0x6f,
	0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x2e, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x50,
	0x75, 0x62, 0x6c, 0x69, 0x63, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x24, 0x2e, 0x4e,
	0x75, 0x6e, 0x74, 0x69, 0x6f, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x2e, 0x43, 0x6f, 0x6e,
	0x6e, 0x65, 0x63, 0x74, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x22, 0x00, 0x12, 0x5a, 0x0a, 0x0b, 0x47, 0x69, 0x76, 0x65, 0x43, 0x6f, 0x6e, 0x73,
	0x65, 0x6e, 0x74, 0x12, 0x23, 0x2e, 0x4e, 0x75, 0x6e, 0x74, 0x69, 0x6f, 0x43, 0x6f, 0x6e, 0x6e,
	0x65, 0x63, 0x74, 0x2e, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x50, 0x75, 0x62, 0x6c, 0x69,
	0x63, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x24, 0x2e, 0x4e, 0x75, 0x6e, 0x74, 0x69,
	0x6f, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x2e, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74,
	0x50, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00,
	0x12, 0x55, 0x0a, 0x06, 0x4c, 0x6f, 0x67, 0x6f, 0x75, 0x74, 0x12, 0x23, 0x2e, 0x4e, 0x75, 0x6e,
	0x74, 0x69, 0x6f, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x2e, 0x43, 0x6f, 0x6e, 0x6e, 0x65,
	0x63, 0x74, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x24, 0x2e, 0x4e, 0x75, 0x6e, 0x74, 0x69, 0x6f, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x2e,
	0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x59, 0x0a, 0x0a, 0x43, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x55, 0x73, 0x65, 0x72, 0x12, 0x23, 0x2e, 0x4e, 0x75, 0x6e, 0x74, 0x69, 0x6f, 0x43, 0x6f,
	0x6e, 0x6e, 0x65, 0x63, 0x74, 0x2e, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x50, 0x75, 0x62,
	0x6c, 0x69, 0x63, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x24, 0x2e, 0x4e, 0x75, 0x6e,
	0x74, 0x69, 0x6f, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x2e, 0x43, 0x6f, 0x6e, 0x6e, 0x65,
	0x63, 0x74, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x22, 0x00, 0x12, 0x5d, 0x0a, 0x0e, 0x53, 0x65, 0x6e, 0x64, 0x52, 0x65, 0x73, 0x65, 0x74, 0x45,
	0x6d, 0x61, 0x69, 0x6c, 0x12, 0x23, 0x2e, 0x4e, 0x75, 0x6e, 0x74, 0x69, 0x6f, 0x43, 0x6f, 0x6e,
	0x6e, 0x65, 0x63, 0x74, 0x2e, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x50, 0x75, 0x62, 0x6c,
	0x69, 0x63, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x24, 0x2e, 0x4e, 0x75, 0x6e, 0x74,
	0x69, 0x6f, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x2e, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63,
	0x74, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22,
	0x00, 0x12, 0x5c, 0x0a, 0x0d, 0x52, 0x65, 0x73, 0x65, 0x74, 0x50, 0x61, 0x73, 0x73, 0x77, 0x6f,
	0x72, 0x64, 0x12, 0x23, 0x2e, 0x4e, 0x75, 0x6e, 0x74, 0x69, 0x6f, 0x43, 0x6f, 0x6e, 0x6e, 0x65,
	0x63, 0x74, 0x2e, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x63,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x24, 0x2e, 0x4e, 0x75, 0x6e, 0x74, 0x69, 0x6f,
	0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x2e, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x50,
	0x75, 0x62, 0x6c, 0x69, 0x63, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12,
	0x55, 0x0a, 0x06, 0x56, 0x65, 0x72, 0x69, 0x66, 0x79, 0x12, 0x23, 0x2e, 0x4e, 0x75, 0x6e, 0x74,
	0x69, 0x6f, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x2e, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63,
	0x74, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x24,
	0x2e, 0x4e, 0x75, 0x6e, 0x74, 0x69, 0x6f, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x2e, 0x43,
	0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x32, 0xe7, 0x05, 0x0a, 0x0c, 0x41, 0x64, 0x6d, 0x69, 0x6e,
	0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x56, 0x0a, 0x09, 0x48, 0x65, 0x61, 0x72, 0x74,
	0x62, 0x65, 0x61, 0x74, 0x12, 0x22, 0x2e, 0x4e, 0x75, 0x6e, 0x74, 0x69, 0x6f, 0x43, 0x6f, 0x6e,
	0x6e, 0x65, 0x63, 0x74, 0x2e, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x41, 0x64, 0x6d, 0x69,
	0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x23, 0x2e, 0x4e, 0x75, 0x6e, 0x74, 0x69,
	0x6f, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x2e, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74,
	0x41, 0x64, 0x6d, 0x69, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12,
	0x56, 0x0a, 0x09, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x41, 0x70, 0x70, 0x12, 0x22, 0x2e, 0x4e,
	0x75, 0x6e, 0x74, 0x69, 0x6f, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x2e, 0x43, 0x6f, 0x6e,
	0x6e, 0x65, 0x63, 0x74, 0x41, 0x64, 0x6d, 0x69, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x23, 0x2e, 0x4e, 0x75, 0x6e, 0x74, 0x69, 0x6f, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74,
	0x2e, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x41, 0x64, 0x6d, 0x69, 0x6e, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x57, 0x0a, 0x0a, 0x47, 0x65, 0x74, 0x41, 0x70,
	0x70, 0x42, 0x79, 0x49, 0x64, 0x12, 0x22, 0x2e, 0x4e, 0x75, 0x6e, 0x74, 0x69, 0x6f, 0x43, 0x6f,
	0x6e, 0x6e, 0x65, 0x63, 0x74, 0x2e, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x41, 0x64, 0x6d,
	0x69, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x23, 0x2e, 0x4e, 0x75, 0x6e, 0x74,
	0x69, 0x6f, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x2e, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63,
	0x74, 0x41, 0x64, 0x6d, 0x69, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00,
	0x12, 0x5d, 0x0a, 0x10, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x41, 0x70, 0x70, 0x44, 0x65, 0x74,
	0x61, 0x69, 0x6c, 0x73, 0x12, 0x22, 0x2e, 0x4e, 0x75, 0x6e, 0x74, 0x69, 0x6f, 0x43, 0x6f, 0x6e,
	0x6e, 0x65, 0x63, 0x74, 0x2e, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x41, 0x64, 0x6d, 0x69,
	0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x23, 0x2e, 0x4e, 0x75, 0x6e, 0x74, 0x69,
	0x6f, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x2e, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74,
	0x41, 0x64, 0x6d, 0x69, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12,
	0x5b, 0x0a, 0x0e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x41, 0x70, 0x70, 0x4f, 0x41, 0x75, 0x74,
	0x68, 0x12, 0x22, 0x2e, 0x4e, 0x75, 0x6e, 0x74, 0x69, 0x6f, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63,
	0x74, 0x2e, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x41, 0x64, 0x6d, 0x69, 0x6e, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x23, 0x2e, 0x4e, 0x75, 0x6e, 0x74, 0x69, 0x6f, 0x43, 0x6f,
	0x6e, 0x6e, 0x65, 0x63, 0x74, 0x2e, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x41, 0x64, 0x6d,
	0x69, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x5e, 0x0a, 0x11,
	0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x41, 0x70, 0x70, 0x53, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74,
	0x79, 0x12, 0x22, 0x2e, 0x4e, 0x75, 0x6e, 0x74, 0x69, 0x6f, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63,
	0x74, 0x2e, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x41, 0x64, 0x6d, 0x69, 0x6e, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x23, 0x2e, 0x4e, 0x75, 0x6e, 0x74, 0x69, 0x6f, 0x43, 0x6f,
	0x6e, 0x6e, 0x65, 0x63, 0x74, 0x2e, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x41, 0x64, 0x6d,
	0x69, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x5a, 0x0a, 0x0d,
	0x47, 0x65, 0x74, 0x41, 0x70, 0x70, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x12, 0x22, 0x2e,
	0x4e, 0x75, 0x6e, 0x74, 0x69, 0x6f, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x2e, 0x43, 0x6f,
	0x6e, 0x6e, 0x65, 0x63, 0x74, 0x41, 0x64, 0x6d, 0x69, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x23, 0x2e, 0x4e, 0x75, 0x6e, 0x74, 0x69, 0x6f, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63,
	0x74, 0x2e, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x41, 0x64, 0x6d, 0x69, 0x6e, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x56, 0x0a, 0x09, 0x44, 0x65, 0x6c, 0x65,
	0x74, 0x65, 0x41, 0x70, 0x70, 0x12, 0x22, 0x2e, 0x4e, 0x75, 0x6e, 0x74, 0x69, 0x6f, 0x43, 0x6f,
	0x6e, 0x6e, 0x65, 0x63, 0x74, 0x2e, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x41, 0x64, 0x6d,
	0x69, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x23, 0x2e, 0x4e, 0x75, 0x6e, 0x74,
	0x69, 0x6f, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x2e, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63,
	0x74, 0x41, 0x64, 0x6d, 0x69, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00,
	0x42, 0x0d, 0x5a, 0x0b, 0x2e, 0x2f, 0x67, 0x6f, 0x5f, 0x6e, 0x75, 0x6e, 0x74, 0x69, 0x6f, 0x62,
	0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_nuntio_connect_proto_rawDescOnce sync.Once
	file_nuntio_connect_proto_rawDescData = file_nuntio_connect_proto_rawDesc
)

func file_nuntio_connect_proto_rawDescGZIP() []byte {
	file_nuntio_connect_proto_rawDescOnce.Do(func() {
		file_nuntio_connect_proto_rawDescData = protoimpl.X.CompressGZIP(file_nuntio_connect_proto_rawDescData)
	})
	return file_nuntio_connect_proto_rawDescData
}

var file_nuntio_connect_proto_enumTypes = make([]protoimpl.EnumInfo, 6)
var file_nuntio_connect_proto_msgTypes = make([]protoimpl.MessageInfo, 12)
var file_nuntio_connect_proto_goTypes = []interface{}{
	(Error)(0),                    // 0: NuntioConnect.Error
	(Timespan)(0),                 // 1: NuntioConnect.Timespan
	(ScopeType)(0),                // 2: NuntioConnect.ScopeType
	(AgeGroup)(0),                 // 3: NuntioConnect.AgeGroup
	(GrantType)(0),                // 4: NuntioConnect.GrantType
	(ResponeType)(0),              // 5: NuntioConnect.ResponeType
	(*ConnectMetric)(nil),         // 6: NuntioConnect.ConnectMetric
	(*ConnectMetrics)(nil),        // 7: NuntioConnect.ConnectMetrics
	(*Scope)(nil),                 // 8: NuntioConnect.Scope
	(*Grant)(nil),                 // 9: NuntioConnect.Grant
	(*OauthResponse)(nil),         // 10: NuntioConnect.OauthResponse
	(*ClientMetadata)(nil),        // 11: NuntioConnect.ClientMetadata
	(*ClientApp)(nil),             // 12: NuntioConnect.ClientApp
	(*ConnectPublicRequest)(nil),  // 13: NuntioConnect.ConnectPublicRequest
	(*ConnectPublicResponse)(nil), // 14: NuntioConnect.ConnectPublicResponse
	(*ConnectAdminRequest)(nil),   // 15: NuntioConnect.ConnectAdminRequest
	(*ConnectAdminResponse)(nil),  // 16: NuntioConnect.ConnectAdminResponse
	nil,                           // 17: NuntioConnect.ConnectAdminResponse.MetricsEntry
	(*timestamppb.Timestamp)(nil), // 18: google.protobuf.Timestamp
	(*CountryCode)(nil),           // 19: Nuntio.CountryCode
	(Gender)(0),                   // 20: Nuntio.Gender
	(*VerificationProvider)(nil),  // 21: Nuntio.VerificationProvider
}
var file_nuntio_connect_proto_depIdxs = []int32{
	18, // 0: NuntioConnect.ConnectMetric.date:type_name -> google.protobuf.Timestamp
	6,  // 1: NuntioConnect.ConnectMetrics.metrics:type_name -> NuntioConnect.ConnectMetric
	2,  // 2: NuntioConnect.Scope.scope_type:type_name -> NuntioConnect.ScopeType
	4,  // 3: NuntioConnect.Grant.grant_type:type_name -> NuntioConnect.GrantType
	5,  // 4: NuntioConnect.OauthResponse.response_type:type_name -> NuntioConnect.ResponeType
	19, // 5: NuntioConnect.ClientMetadata.allowed_countries:type_name -> Nuntio.CountryCode
	11, // 6: NuntioConnect.ClientApp.client_metadata:type_name -> NuntioConnect.ClientMetadata
	8,  // 7: NuntioConnect.ClientApp.scopes:type_name -> NuntioConnect.Scope
	9,  // 8: NuntioConnect.ClientApp.grants:type_name -> NuntioConnect.Grant
	10, // 9: NuntioConnect.ClientApp.responses:type_name -> NuntioConnect.OauthResponse
	18, // 10: NuntioConnect.ClientApp.created_at:type_name -> google.protobuf.Timestamp
	18, // 11: NuntioConnect.ClientApp.updated_at:type_name -> google.protobuf.Timestamp
	8,  // 12: NuntioConnect.ClientApp.available_scopes:type_name -> NuntioConnect.Scope
	9,  // 13: NuntioConnect.ClientApp.available_grants:type_name -> NuntioConnect.Grant
	10, // 14: NuntioConnect.ClientApp.available_responses:type_name -> NuntioConnect.OauthResponse
	19, // 15: NuntioConnect.ClientApp.available_countries:type_name -> Nuntio.CountryCode
	20, // 16: NuntioConnect.ConnectPublicRequest.gender:type_name -> Nuntio.Gender
	21, // 17: NuntioConnect.ConnectPublicRequest.verification_provider:type_name -> Nuntio.VerificationProvider
	12, // 18: NuntioConnect.ConnectPublicResponse.client:type_name -> NuntioConnect.ClientApp
	0,  // 19: NuntioConnect.ConnectPublicResponse.error:type_name -> NuntioConnect.Error
	12, // 20: NuntioConnect.ConnectAdminRequest.app:type_name -> NuntioConnect.ClientApp
	1,  // 21: NuntioConnect.ConnectAdminRequest.timespan:type_name -> NuntioConnect.Timespan
	12, // 22: NuntioConnect.ConnectAdminResponse.app:type_name -> NuntioConnect.ClientApp
	17, // 23: NuntioConnect.ConnectAdminResponse.metrics:type_name -> NuntioConnect.ConnectAdminResponse.MetricsEntry
	7,  // 24: NuntioConnect.ConnectAdminResponse.MetricsEntry.value:type_name -> NuntioConnect.ConnectMetrics
	13, // 25: NuntioConnect.PublicService.Heartbeat:input_type -> NuntioConnect.ConnectPublicRequest
	13, // 26: NuntioConnect.PublicService.ValidateLoginChallenge:input_type -> NuntioConnect.ConnectPublicRequest
	13, // 27: NuntioConnect.PublicService.Login:input_type -> NuntioConnect.ConnectPublicRequest
	13, // 28: NuntioConnect.PublicService.ValidateConsentChallenge:input_type -> NuntioConnect.ConnectPublicRequest
	13, // 29: NuntioConnect.PublicService.GiveConsent:input_type -> NuntioConnect.ConnectPublicRequest
	13, // 30: NuntioConnect.PublicService.Logout:input_type -> NuntioConnect.ConnectPublicRequest
	13, // 31: NuntioConnect.PublicService.CreateUser:input_type -> NuntioConnect.ConnectPublicRequest
	13, // 32: NuntioConnect.PublicService.SendResetEmail:input_type -> NuntioConnect.ConnectPublicRequest
	13, // 33: NuntioConnect.PublicService.ResetPassword:input_type -> NuntioConnect.ConnectPublicRequest
	13, // 34: NuntioConnect.PublicService.Verify:input_type -> NuntioConnect.ConnectPublicRequest
	15, // 35: NuntioConnect.AdminService.Heartbeat:input_type -> NuntioConnect.ConnectAdminRequest
	15, // 36: NuntioConnect.AdminService.CreateApp:input_type -> NuntioConnect.ConnectAdminRequest
	15, // 37: NuntioConnect.AdminService.GetAppById:input_type -> NuntioConnect.ConnectAdminRequest
	15, // 38: NuntioConnect.AdminService.UpdateAppDetails:input_type -> NuntioConnect.ConnectAdminRequest
	15, // 39: NuntioConnect.AdminService.UpdateAppOAuth:input_type -> NuntioConnect.ConnectAdminRequest
	15, // 40: NuntioConnect.AdminService.UpdateAppSecurity:input_type -> NuntioConnect.ConnectAdminRequest
	15, // 41: NuntioConnect.AdminService.GetAppMetrics:input_type -> NuntioConnect.ConnectAdminRequest
	15, // 42: NuntioConnect.AdminService.DeleteApp:input_type -> NuntioConnect.ConnectAdminRequest
	14, // 43: NuntioConnect.PublicService.Heartbeat:output_type -> NuntioConnect.ConnectPublicResponse
	14, // 44: NuntioConnect.PublicService.ValidateLoginChallenge:output_type -> NuntioConnect.ConnectPublicResponse
	14, // 45: NuntioConnect.PublicService.Login:output_type -> NuntioConnect.ConnectPublicResponse
	14, // 46: NuntioConnect.PublicService.ValidateConsentChallenge:output_type -> NuntioConnect.ConnectPublicResponse
	14, // 47: NuntioConnect.PublicService.GiveConsent:output_type -> NuntioConnect.ConnectPublicResponse
	14, // 48: NuntioConnect.PublicService.Logout:output_type -> NuntioConnect.ConnectPublicResponse
	14, // 49: NuntioConnect.PublicService.CreateUser:output_type -> NuntioConnect.ConnectPublicResponse
	14, // 50: NuntioConnect.PublicService.SendResetEmail:output_type -> NuntioConnect.ConnectPublicResponse
	14, // 51: NuntioConnect.PublicService.ResetPassword:output_type -> NuntioConnect.ConnectPublicResponse
	14, // 52: NuntioConnect.PublicService.Verify:output_type -> NuntioConnect.ConnectPublicResponse
	16, // 53: NuntioConnect.AdminService.Heartbeat:output_type -> NuntioConnect.ConnectAdminResponse
	16, // 54: NuntioConnect.AdminService.CreateApp:output_type -> NuntioConnect.ConnectAdminResponse
	16, // 55: NuntioConnect.AdminService.GetAppById:output_type -> NuntioConnect.ConnectAdminResponse
	16, // 56: NuntioConnect.AdminService.UpdateAppDetails:output_type -> NuntioConnect.ConnectAdminResponse
	16, // 57: NuntioConnect.AdminService.UpdateAppOAuth:output_type -> NuntioConnect.ConnectAdminResponse
	16, // 58: NuntioConnect.AdminService.UpdateAppSecurity:output_type -> NuntioConnect.ConnectAdminResponse
	16, // 59: NuntioConnect.AdminService.GetAppMetrics:output_type -> NuntioConnect.ConnectAdminResponse
	16, // 60: NuntioConnect.AdminService.DeleteApp:output_type -> NuntioConnect.ConnectAdminResponse
	43, // [43:61] is the sub-list for method output_type
	25, // [25:43] is the sub-list for method input_type
	25, // [25:25] is the sub-list for extension type_name
	25, // [25:25] is the sub-list for extension extendee
	0,  // [0:25] is the sub-list for field type_name
}

func init() { file_nuntio_connect_proto_init() }
func file_nuntio_connect_proto_init() {
	if File_nuntio_connect_proto != nil {
		return
	}
	file_nuntio_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_nuntio_connect_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ConnectMetric); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_nuntio_connect_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ConnectMetrics); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_nuntio_connect_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Scope); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_nuntio_connect_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Grant); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_nuntio_connect_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OauthResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_nuntio_connect_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ClientMetadata); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_nuntio_connect_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ClientApp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_nuntio_connect_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ConnectPublicRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_nuntio_connect_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ConnectPublicResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_nuntio_connect_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ConnectAdminRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_nuntio_connect_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ConnectAdminResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_nuntio_connect_proto_rawDesc,
			NumEnums:      6,
			NumMessages:   12,
			NumExtensions: 0,
			NumServices:   2,
		},
		GoTypes:           file_nuntio_connect_proto_goTypes,
		DependencyIndexes: file_nuntio_connect_proto_depIdxs,
		EnumInfos:         file_nuntio_connect_proto_enumTypes,
		MessageInfos:      file_nuntio_connect_proto_msgTypes,
	}.Build()
	File_nuntio_connect_proto = out.File
	file_nuntio_connect_proto_rawDesc = nil
	file_nuntio_connect_proto_goTypes = nil
	file_nuntio_connect_proto_depIdxs = nil
}
