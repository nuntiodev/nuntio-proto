// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package nuntio_connect

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// PublicServiceClient is the client API for PublicService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type PublicServiceClient interface {
	Heartbeat(ctx context.Context, in *ConnectPublicRequest, opts ...grpc.CallOption) (*ConnectPublicResponse, error)
	ValidateLoginChallenge(ctx context.Context, in *ConnectPublicRequest, opts ...grpc.CallOption) (*ConnectPublicResponse, error)
	Login(ctx context.Context, in *ConnectPublicRequest, opts ...grpc.CallOption) (*ConnectPublicResponse, error)
	ValidateConsentChallenge(ctx context.Context, in *ConnectPublicRequest, opts ...grpc.CallOption) (*ConnectPublicResponse, error)
	GiveConsent(ctx context.Context, in *ConnectPublicRequest, opts ...grpc.CallOption) (*ConnectPublicResponse, error)
	Logout(ctx context.Context, in *ConnectPublicRequest, opts ...grpc.CallOption) (*ConnectPublicResponse, error)
	CreateUser(ctx context.Context, in *ConnectPublicRequest, opts ...grpc.CallOption) (*ConnectPublicResponse, error)
	SendResetEmail(ctx context.Context, in *ConnectPublicRequest, opts ...grpc.CallOption) (*ConnectPublicResponse, error)
	ResetPassword(ctx context.Context, in *ConnectPublicRequest, opts ...grpc.CallOption) (*ConnectPublicResponse, error)
	Verify(ctx context.Context, in *ConnectPublicRequest, opts ...grpc.CallOption) (*ConnectPublicResponse, error)
}

type publicServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewPublicServiceClient(cc grpc.ClientConnInterface) PublicServiceClient {
	return &publicServiceClient{cc}
}

func (c *publicServiceClient) Heartbeat(ctx context.Context, in *ConnectPublicRequest, opts ...grpc.CallOption) (*ConnectPublicResponse, error) {
	out := new(ConnectPublicResponse)
	err := c.cc.Invoke(ctx, "/NuntioConnect.PublicService/Heartbeat", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *publicServiceClient) ValidateLoginChallenge(ctx context.Context, in *ConnectPublicRequest, opts ...grpc.CallOption) (*ConnectPublicResponse, error) {
	out := new(ConnectPublicResponse)
	err := c.cc.Invoke(ctx, "/NuntioConnect.PublicService/ValidateLoginChallenge", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *publicServiceClient) Login(ctx context.Context, in *ConnectPublicRequest, opts ...grpc.CallOption) (*ConnectPublicResponse, error) {
	out := new(ConnectPublicResponse)
	err := c.cc.Invoke(ctx, "/NuntioConnect.PublicService/Login", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *publicServiceClient) ValidateConsentChallenge(ctx context.Context, in *ConnectPublicRequest, opts ...grpc.CallOption) (*ConnectPublicResponse, error) {
	out := new(ConnectPublicResponse)
	err := c.cc.Invoke(ctx, "/NuntioConnect.PublicService/ValidateConsentChallenge", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *publicServiceClient) GiveConsent(ctx context.Context, in *ConnectPublicRequest, opts ...grpc.CallOption) (*ConnectPublicResponse, error) {
	out := new(ConnectPublicResponse)
	err := c.cc.Invoke(ctx, "/NuntioConnect.PublicService/GiveConsent", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *publicServiceClient) Logout(ctx context.Context, in *ConnectPublicRequest, opts ...grpc.CallOption) (*ConnectPublicResponse, error) {
	out := new(ConnectPublicResponse)
	err := c.cc.Invoke(ctx, "/NuntioConnect.PublicService/Logout", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *publicServiceClient) CreateUser(ctx context.Context, in *ConnectPublicRequest, opts ...grpc.CallOption) (*ConnectPublicResponse, error) {
	out := new(ConnectPublicResponse)
	err := c.cc.Invoke(ctx, "/NuntioConnect.PublicService/CreateUser", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *publicServiceClient) SendResetEmail(ctx context.Context, in *ConnectPublicRequest, opts ...grpc.CallOption) (*ConnectPublicResponse, error) {
	out := new(ConnectPublicResponse)
	err := c.cc.Invoke(ctx, "/NuntioConnect.PublicService/SendResetEmail", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *publicServiceClient) ResetPassword(ctx context.Context, in *ConnectPublicRequest, opts ...grpc.CallOption) (*ConnectPublicResponse, error) {
	out := new(ConnectPublicResponse)
	err := c.cc.Invoke(ctx, "/NuntioConnect.PublicService/ResetPassword", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *publicServiceClient) Verify(ctx context.Context, in *ConnectPublicRequest, opts ...grpc.CallOption) (*ConnectPublicResponse, error) {
	out := new(ConnectPublicResponse)
	err := c.cc.Invoke(ctx, "/NuntioConnect.PublicService/Verify", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// PublicServiceServer is the server API for PublicService service.
// All implementations should embed UnimplementedPublicServiceServer
// for forward compatibility
type PublicServiceServer interface {
	Heartbeat(context.Context, *ConnectPublicRequest) (*ConnectPublicResponse, error)
	ValidateLoginChallenge(context.Context, *ConnectPublicRequest) (*ConnectPublicResponse, error)
	Login(context.Context, *ConnectPublicRequest) (*ConnectPublicResponse, error)
	ValidateConsentChallenge(context.Context, *ConnectPublicRequest) (*ConnectPublicResponse, error)
	GiveConsent(context.Context, *ConnectPublicRequest) (*ConnectPublicResponse, error)
	Logout(context.Context, *ConnectPublicRequest) (*ConnectPublicResponse, error)
	CreateUser(context.Context, *ConnectPublicRequest) (*ConnectPublicResponse, error)
	SendResetEmail(context.Context, *ConnectPublicRequest) (*ConnectPublicResponse, error)
	ResetPassword(context.Context, *ConnectPublicRequest) (*ConnectPublicResponse, error)
	Verify(context.Context, *ConnectPublicRequest) (*ConnectPublicResponse, error)
}

// UnimplementedPublicServiceServer should be embedded to have forward compatible implementations.
type UnimplementedPublicServiceServer struct {
}

func (UnimplementedPublicServiceServer) Heartbeat(context.Context, *ConnectPublicRequest) (*ConnectPublicResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Heartbeat not implemented")
}
func (UnimplementedPublicServiceServer) ValidateLoginChallenge(context.Context, *ConnectPublicRequest) (*ConnectPublicResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ValidateLoginChallenge not implemented")
}
func (UnimplementedPublicServiceServer) Login(context.Context, *ConnectPublicRequest) (*ConnectPublicResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Login not implemented")
}
func (UnimplementedPublicServiceServer) ValidateConsentChallenge(context.Context, *ConnectPublicRequest) (*ConnectPublicResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ValidateConsentChallenge not implemented")
}
func (UnimplementedPublicServiceServer) GiveConsent(context.Context, *ConnectPublicRequest) (*ConnectPublicResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GiveConsent not implemented")
}
func (UnimplementedPublicServiceServer) Logout(context.Context, *ConnectPublicRequest) (*ConnectPublicResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Logout not implemented")
}
func (UnimplementedPublicServiceServer) CreateUser(context.Context, *ConnectPublicRequest) (*ConnectPublicResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateUser not implemented")
}
func (UnimplementedPublicServiceServer) SendResetEmail(context.Context, *ConnectPublicRequest) (*ConnectPublicResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SendResetEmail not implemented")
}
func (UnimplementedPublicServiceServer) ResetPassword(context.Context, *ConnectPublicRequest) (*ConnectPublicResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ResetPassword not implemented")
}
func (UnimplementedPublicServiceServer) Verify(context.Context, *ConnectPublicRequest) (*ConnectPublicResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Verify not implemented")
}

// UnsafePublicServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to PublicServiceServer will
// result in compilation errors.
type UnsafePublicServiceServer interface {
	mustEmbedUnimplementedPublicServiceServer()
}

func RegisterPublicServiceServer(s grpc.ServiceRegistrar, srv PublicServiceServer) {
	s.RegisterService(&PublicService_ServiceDesc, srv)
}

func _PublicService_Heartbeat_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ConnectPublicRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PublicServiceServer).Heartbeat(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/NuntioConnect.PublicService/Heartbeat",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PublicServiceServer).Heartbeat(ctx, req.(*ConnectPublicRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PublicService_ValidateLoginChallenge_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ConnectPublicRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PublicServiceServer).ValidateLoginChallenge(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/NuntioConnect.PublicService/ValidateLoginChallenge",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PublicServiceServer).ValidateLoginChallenge(ctx, req.(*ConnectPublicRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PublicService_Login_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ConnectPublicRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PublicServiceServer).Login(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/NuntioConnect.PublicService/Login",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PublicServiceServer).Login(ctx, req.(*ConnectPublicRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PublicService_ValidateConsentChallenge_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ConnectPublicRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PublicServiceServer).ValidateConsentChallenge(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/NuntioConnect.PublicService/ValidateConsentChallenge",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PublicServiceServer).ValidateConsentChallenge(ctx, req.(*ConnectPublicRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PublicService_GiveConsent_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ConnectPublicRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PublicServiceServer).GiveConsent(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/NuntioConnect.PublicService/GiveConsent",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PublicServiceServer).GiveConsent(ctx, req.(*ConnectPublicRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PublicService_Logout_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ConnectPublicRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PublicServiceServer).Logout(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/NuntioConnect.PublicService/Logout",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PublicServiceServer).Logout(ctx, req.(*ConnectPublicRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PublicService_CreateUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ConnectPublicRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PublicServiceServer).CreateUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/NuntioConnect.PublicService/CreateUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PublicServiceServer).CreateUser(ctx, req.(*ConnectPublicRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PublicService_SendResetEmail_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ConnectPublicRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PublicServiceServer).SendResetEmail(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/NuntioConnect.PublicService/SendResetEmail",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PublicServiceServer).SendResetEmail(ctx, req.(*ConnectPublicRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PublicService_ResetPassword_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ConnectPublicRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PublicServiceServer).ResetPassword(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/NuntioConnect.PublicService/ResetPassword",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PublicServiceServer).ResetPassword(ctx, req.(*ConnectPublicRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PublicService_Verify_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ConnectPublicRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PublicServiceServer).Verify(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/NuntioConnect.PublicService/Verify",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PublicServiceServer).Verify(ctx, req.(*ConnectPublicRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// PublicService_ServiceDesc is the grpc.ServiceDesc for PublicService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var PublicService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "NuntioConnect.PublicService",
	HandlerType: (*PublicServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Heartbeat",
			Handler:    _PublicService_Heartbeat_Handler,
		},
		{
			MethodName: "ValidateLoginChallenge",
			Handler:    _PublicService_ValidateLoginChallenge_Handler,
		},
		{
			MethodName: "Login",
			Handler:    _PublicService_Login_Handler,
		},
		{
			MethodName: "ValidateConsentChallenge",
			Handler:    _PublicService_ValidateConsentChallenge_Handler,
		},
		{
			MethodName: "GiveConsent",
			Handler:    _PublicService_GiveConsent_Handler,
		},
		{
			MethodName: "Logout",
			Handler:    _PublicService_Logout_Handler,
		},
		{
			MethodName: "CreateUser",
			Handler:    _PublicService_CreateUser_Handler,
		},
		{
			MethodName: "SendResetEmail",
			Handler:    _PublicService_SendResetEmail_Handler,
		},
		{
			MethodName: "ResetPassword",
			Handler:    _PublicService_ResetPassword_Handler,
		},
		{
			MethodName: "Verify",
			Handler:    _PublicService_Verify_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "nuntio_connect.proto",
}

// AdminServiceClient is the client API for AdminService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type AdminServiceClient interface {
	Heartbeat(ctx context.Context, in *ConnectAdminRequest, opts ...grpc.CallOption) (*ConnectAdminRequest, error)
	CreateApp(ctx context.Context, in *ConnectAdminRequest, opts ...grpc.CallOption) (*ConnectAdminResponse, error)
	GetAppById(ctx context.Context, in *ConnectAdminRequest, opts ...grpc.CallOption) (*ConnectAdminResponse, error)
	UpdateAppDetails(ctx context.Context, in *ConnectAdminRequest, opts ...grpc.CallOption) (*ConnectAdminResponse, error)
	UpdateAppOAuth(ctx context.Context, in *ConnectAdminRequest, opts ...grpc.CallOption) (*ConnectAdminResponse, error)
	UpdateAppSecurity(ctx context.Context, in *ConnectAdminRequest, opts ...grpc.CallOption) (*ConnectAdminResponse, error)
	GetAppMetrics(ctx context.Context, in *ConnectAdminRequest, opts ...grpc.CallOption) (*ConnectAdminResponse, error)
	DeleteApp(ctx context.Context, in *ConnectAdminRequest, opts ...grpc.CallOption) (*ConnectAdminResponse, error)
}

type adminServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewAdminServiceClient(cc grpc.ClientConnInterface) AdminServiceClient {
	return &adminServiceClient{cc}
}

func (c *adminServiceClient) Heartbeat(ctx context.Context, in *ConnectAdminRequest, opts ...grpc.CallOption) (*ConnectAdminRequest, error) {
	out := new(ConnectAdminRequest)
	err := c.cc.Invoke(ctx, "/NuntioConnect.AdminService/Heartbeat", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminServiceClient) CreateApp(ctx context.Context, in *ConnectAdminRequest, opts ...grpc.CallOption) (*ConnectAdminResponse, error) {
	out := new(ConnectAdminResponse)
	err := c.cc.Invoke(ctx, "/NuntioConnect.AdminService/CreateApp", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminServiceClient) GetAppById(ctx context.Context, in *ConnectAdminRequest, opts ...grpc.CallOption) (*ConnectAdminResponse, error) {
	out := new(ConnectAdminResponse)
	err := c.cc.Invoke(ctx, "/NuntioConnect.AdminService/GetAppById", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminServiceClient) UpdateAppDetails(ctx context.Context, in *ConnectAdminRequest, opts ...grpc.CallOption) (*ConnectAdminResponse, error) {
	out := new(ConnectAdminResponse)
	err := c.cc.Invoke(ctx, "/NuntioConnect.AdminService/UpdateAppDetails", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminServiceClient) UpdateAppOAuth(ctx context.Context, in *ConnectAdminRequest, opts ...grpc.CallOption) (*ConnectAdminResponse, error) {
	out := new(ConnectAdminResponse)
	err := c.cc.Invoke(ctx, "/NuntioConnect.AdminService/UpdateAppOAuth", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminServiceClient) UpdateAppSecurity(ctx context.Context, in *ConnectAdminRequest, opts ...grpc.CallOption) (*ConnectAdminResponse, error) {
	out := new(ConnectAdminResponse)
	err := c.cc.Invoke(ctx, "/NuntioConnect.AdminService/UpdateAppSecurity", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminServiceClient) GetAppMetrics(ctx context.Context, in *ConnectAdminRequest, opts ...grpc.CallOption) (*ConnectAdminResponse, error) {
	out := new(ConnectAdminResponse)
	err := c.cc.Invoke(ctx, "/NuntioConnect.AdminService/GetAppMetrics", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminServiceClient) DeleteApp(ctx context.Context, in *ConnectAdminRequest, opts ...grpc.CallOption) (*ConnectAdminResponse, error) {
	out := new(ConnectAdminResponse)
	err := c.cc.Invoke(ctx, "/NuntioConnect.AdminService/DeleteApp", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// AdminServiceServer is the server API for AdminService service.
// All implementations should embed UnimplementedAdminServiceServer
// for forward compatibility
type AdminServiceServer interface {
	Heartbeat(context.Context, *ConnectAdminRequest) (*ConnectAdminRequest, error)
	CreateApp(context.Context, *ConnectAdminRequest) (*ConnectAdminResponse, error)
	GetAppById(context.Context, *ConnectAdminRequest) (*ConnectAdminResponse, error)
	UpdateAppDetails(context.Context, *ConnectAdminRequest) (*ConnectAdminResponse, error)
	UpdateAppOAuth(context.Context, *ConnectAdminRequest) (*ConnectAdminResponse, error)
	UpdateAppSecurity(context.Context, *ConnectAdminRequest) (*ConnectAdminResponse, error)
	GetAppMetrics(context.Context, *ConnectAdminRequest) (*ConnectAdminResponse, error)
	DeleteApp(context.Context, *ConnectAdminRequest) (*ConnectAdminResponse, error)
}

// UnimplementedAdminServiceServer should be embedded to have forward compatible implementations.
type UnimplementedAdminServiceServer struct {
}

func (UnimplementedAdminServiceServer) Heartbeat(context.Context, *ConnectAdminRequest) (*ConnectAdminRequest, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Heartbeat not implemented")
}
func (UnimplementedAdminServiceServer) CreateApp(context.Context, *ConnectAdminRequest) (*ConnectAdminResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateApp not implemented")
}
func (UnimplementedAdminServiceServer) GetAppById(context.Context, *ConnectAdminRequest) (*ConnectAdminResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAppById not implemented")
}
func (UnimplementedAdminServiceServer) UpdateAppDetails(context.Context, *ConnectAdminRequest) (*ConnectAdminResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateAppDetails not implemented")
}
func (UnimplementedAdminServiceServer) UpdateAppOAuth(context.Context, *ConnectAdminRequest) (*ConnectAdminResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateAppOAuth not implemented")
}
func (UnimplementedAdminServiceServer) UpdateAppSecurity(context.Context, *ConnectAdminRequest) (*ConnectAdminResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateAppSecurity not implemented")
}
func (UnimplementedAdminServiceServer) GetAppMetrics(context.Context, *ConnectAdminRequest) (*ConnectAdminResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAppMetrics not implemented")
}
func (UnimplementedAdminServiceServer) DeleteApp(context.Context, *ConnectAdminRequest) (*ConnectAdminResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteApp not implemented")
}

// UnsafeAdminServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to AdminServiceServer will
// result in compilation errors.
type UnsafeAdminServiceServer interface {
	mustEmbedUnimplementedAdminServiceServer()
}

func RegisterAdminServiceServer(s grpc.ServiceRegistrar, srv AdminServiceServer) {
	s.RegisterService(&AdminService_ServiceDesc, srv)
}

func _AdminService_Heartbeat_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ConnectAdminRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServiceServer).Heartbeat(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/NuntioConnect.AdminService/Heartbeat",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServiceServer).Heartbeat(ctx, req.(*ConnectAdminRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AdminService_CreateApp_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ConnectAdminRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServiceServer).CreateApp(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/NuntioConnect.AdminService/CreateApp",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServiceServer).CreateApp(ctx, req.(*ConnectAdminRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AdminService_GetAppById_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ConnectAdminRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServiceServer).GetAppById(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/NuntioConnect.AdminService/GetAppById",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServiceServer).GetAppById(ctx, req.(*ConnectAdminRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AdminService_UpdateAppDetails_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ConnectAdminRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServiceServer).UpdateAppDetails(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/NuntioConnect.AdminService/UpdateAppDetails",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServiceServer).UpdateAppDetails(ctx, req.(*ConnectAdminRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AdminService_UpdateAppOAuth_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ConnectAdminRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServiceServer).UpdateAppOAuth(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/NuntioConnect.AdminService/UpdateAppOAuth",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServiceServer).UpdateAppOAuth(ctx, req.(*ConnectAdminRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AdminService_UpdateAppSecurity_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ConnectAdminRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServiceServer).UpdateAppSecurity(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/NuntioConnect.AdminService/UpdateAppSecurity",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServiceServer).UpdateAppSecurity(ctx, req.(*ConnectAdminRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AdminService_GetAppMetrics_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ConnectAdminRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServiceServer).GetAppMetrics(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/NuntioConnect.AdminService/GetAppMetrics",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServiceServer).GetAppMetrics(ctx, req.(*ConnectAdminRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AdminService_DeleteApp_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ConnectAdminRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServiceServer).DeleteApp(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/NuntioConnect.AdminService/DeleteApp",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServiceServer).DeleteApp(ctx, req.(*ConnectAdminRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// AdminService_ServiceDesc is the grpc.ServiceDesc for AdminService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var AdminService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "NuntioConnect.AdminService",
	HandlerType: (*AdminServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Heartbeat",
			Handler:    _AdminService_Heartbeat_Handler,
		},
		{
			MethodName: "CreateApp",
			Handler:    _AdminService_CreateApp_Handler,
		},
		{
			MethodName: "GetAppById",
			Handler:    _AdminService_GetAppById_Handler,
		},
		{
			MethodName: "UpdateAppDetails",
			Handler:    _AdminService_UpdateAppDetails_Handler,
		},
		{
			MethodName: "UpdateAppOAuth",
			Handler:    _AdminService_UpdateAppOAuth_Handler,
		},
		{
			MethodName: "UpdateAppSecurity",
			Handler:    _AdminService_UpdateAppSecurity_Handler,
		},
		{
			MethodName: "GetAppMetrics",
			Handler:    _AdminService_GetAppMetrics_Handler,
		},
		{
			MethodName: "DeleteApp",
			Handler:    _AdminService_DeleteApp_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "nuntio_connect.proto",
}
