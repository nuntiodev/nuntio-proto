// source: nuntio_connect.proto
/**
 * @fileoverview
 * @enhanceable
 * @suppress {missingRequire} reports error on implicit type usages.
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!
/* eslint-disable */
// @ts-nocheck

var jspb = require('google-protobuf');
var goog = jspb;
var global = (function() {
  if (this) { return this; }
  if (typeof window !== 'undefined') { return window; }
  if (typeof global !== 'undefined') { return global; }
  if (typeof self !== 'undefined') { return self; }
  return Function('return this')();
}.call(null));

var google_protobuf_timestamp_pb = require('google-protobuf/google/protobuf/timestamp_pb.js');
goog.object.extend(proto, google_protobuf_timestamp_pb);
var nuntio_pb = require('./nuntio_pb.js');
goog.object.extend(proto, nuntio_pb);
goog.exportSymbol('proto.NuntioConnect.App', null, global);
goog.exportSymbol('proto.NuntioConnect.ConnectAdminRequest', null, global);
goog.exportSymbol('proto.NuntioConnect.ConnectAdminResponse', null, global);
goog.exportSymbol('proto.NuntioConnect.ConnectPublicRequest', null, global);
goog.exportSymbol('proto.NuntioConnect.ConnectPublicResponse', null, global);
goog.exportSymbol('proto.NuntioConnect.Grant', null, global);
goog.exportSymbol('proto.NuntioConnect.GrantType', null, global);
goog.exportSymbol('proto.NuntioConnect.Metadata', null, global);
goog.exportSymbol('proto.NuntioConnect.Response', null, global);
goog.exportSymbol('proto.NuntioConnect.ResponseType', null, global);
goog.exportSymbol('proto.NuntioConnect.Scope', null, global);
goog.exportSymbol('proto.NuntioConnect.ScopeType', null, global);
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.NuntioConnect.Scope = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.NuntioConnect.Scope, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.NuntioConnect.Scope.displayName = 'proto.NuntioConnect.Scope';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.NuntioConnect.Grant = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.NuntioConnect.Grant, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.NuntioConnect.Grant.displayName = 'proto.NuntioConnect.Grant';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.NuntioConnect.Response = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.NuntioConnect.Response, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.NuntioConnect.Response.displayName = 'proto.NuntioConnect.Response';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.NuntioConnect.Metadata = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.NuntioConnect.Metadata.repeatedFields_, null);
};
goog.inherits(proto.NuntioConnect.Metadata, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.NuntioConnect.Metadata.displayName = 'proto.NuntioConnect.Metadata';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.NuntioConnect.App = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.NuntioConnect.App.repeatedFields_, null);
};
goog.inherits(proto.NuntioConnect.App, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.NuntioConnect.App.displayName = 'proto.NuntioConnect.App';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.NuntioConnect.ConnectPublicRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.NuntioConnect.ConnectPublicRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.NuntioConnect.ConnectPublicRequest.displayName = 'proto.NuntioConnect.ConnectPublicRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.NuntioConnect.ConnectPublicResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.NuntioConnect.ConnectPublicResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.NuntioConnect.ConnectPublicResponse.displayName = 'proto.NuntioConnect.ConnectPublicResponse';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.NuntioConnect.ConnectAdminRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.NuntioConnect.ConnectAdminRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.NuntioConnect.ConnectAdminRequest.displayName = 'proto.NuntioConnect.ConnectAdminRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.NuntioConnect.ConnectAdminResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.NuntioConnect.ConnectAdminResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.NuntioConnect.ConnectAdminResponse.displayName = 'proto.NuntioConnect.ConnectAdminResponse';
}



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.NuntioConnect.Scope.prototype.toObject = function(opt_includeInstance) {
  return proto.NuntioConnect.Scope.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.NuntioConnect.Scope} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.NuntioConnect.Scope.toObject = function(includeInstance, msg) {
  var f, obj = {
    scopeType: jspb.Message.getFieldWithDefault(msg, 1, 0),
    readId: jspb.Message.getBooleanFieldWithDefault(msg, 2, false),
    readEmail: jspb.Message.getBooleanFieldWithDefault(msg, 3, false),
    readGender: jspb.Message.getBooleanFieldWithDefault(msg, 4, false),
    readCreatedAt: jspb.Message.getBooleanFieldWithDefault(msg, 5, false),
    offlineAccess: jspb.Message.getBooleanFieldWithDefault(msg, 6, false),
    readName: jspb.Message.getBooleanFieldWithDefault(msg, 7, false),
    readBirthday: jspb.Message.getBooleanFieldWithDefault(msg, 8, false),
    readCountry: jspb.Message.getBooleanFieldWithDefault(msg, 9, false),
    name: jspb.Message.getFieldWithDefault(msg, 10, ""),
    key: jspb.Message.getFieldWithDefault(msg, 11, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.NuntioConnect.Scope}
 */
proto.NuntioConnect.Scope.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.NuntioConnect.Scope;
  return proto.NuntioConnect.Scope.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.NuntioConnect.Scope} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.NuntioConnect.Scope}
 */
proto.NuntioConnect.Scope.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!proto.NuntioConnect.ScopeType} */ (reader.readEnum());
      msg.setScopeType(value);
      break;
    case 2:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setReadId(value);
      break;
    case 3:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setReadEmail(value);
      break;
    case 4:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setReadGender(value);
      break;
    case 5:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setReadCreatedAt(value);
      break;
    case 6:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setOfflineAccess(value);
      break;
    case 7:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setReadName(value);
      break;
    case 8:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setReadBirthday(value);
      break;
    case 9:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setReadCountry(value);
      break;
    case 10:
      var value = /** @type {string} */ (reader.readString());
      msg.setName(value);
      break;
    case 11:
      var value = /** @type {string} */ (reader.readString());
      msg.setKey(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.NuntioConnect.Scope.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.NuntioConnect.Scope.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.NuntioConnect.Scope} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.NuntioConnect.Scope.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getScopeType();
  if (f !== 0.0) {
    writer.writeEnum(
      1,
      f
    );
  }
  f = message.getReadId();
  if (f) {
    writer.writeBool(
      2,
      f
    );
  }
  f = message.getReadEmail();
  if (f) {
    writer.writeBool(
      3,
      f
    );
  }
  f = message.getReadGender();
  if (f) {
    writer.writeBool(
      4,
      f
    );
  }
  f = message.getReadCreatedAt();
  if (f) {
    writer.writeBool(
      5,
      f
    );
  }
  f = message.getOfflineAccess();
  if (f) {
    writer.writeBool(
      6,
      f
    );
  }
  f = message.getReadName();
  if (f) {
    writer.writeBool(
      7,
      f
    );
  }
  f = message.getReadBirthday();
  if (f) {
    writer.writeBool(
      8,
      f
    );
  }
  f = message.getReadCountry();
  if (f) {
    writer.writeBool(
      9,
      f
    );
  }
  f = message.getName();
  if (f.length > 0) {
    writer.writeString(
      10,
      f
    );
  }
  f = message.getKey();
  if (f.length > 0) {
    writer.writeString(
      11,
      f
    );
  }
};


/**
 * optional ScopeType scope_type = 1;
 * @return {!proto.NuntioConnect.ScopeType}
 */
proto.NuntioConnect.Scope.prototype.getScopeType = function() {
  return /** @type {!proto.NuntioConnect.ScopeType} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {!proto.NuntioConnect.ScopeType} value
 * @return {!proto.NuntioConnect.Scope} returns this
 */
proto.NuntioConnect.Scope.prototype.setScopeType = function(value) {
  return jspb.Message.setProto3EnumField(this, 1, value);
};


/**
 * optional bool read_id = 2;
 * @return {boolean}
 */
proto.NuntioConnect.Scope.prototype.getReadId = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 2, false));
};


/**
 * @param {boolean} value
 * @return {!proto.NuntioConnect.Scope} returns this
 */
proto.NuntioConnect.Scope.prototype.setReadId = function(value) {
  return jspb.Message.setProto3BooleanField(this, 2, value);
};


/**
 * optional bool read_email = 3;
 * @return {boolean}
 */
proto.NuntioConnect.Scope.prototype.getReadEmail = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 3, false));
};


/**
 * @param {boolean} value
 * @return {!proto.NuntioConnect.Scope} returns this
 */
proto.NuntioConnect.Scope.prototype.setReadEmail = function(value) {
  return jspb.Message.setProto3BooleanField(this, 3, value);
};


/**
 * optional bool read_gender = 4;
 * @return {boolean}
 */
proto.NuntioConnect.Scope.prototype.getReadGender = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 4, false));
};


/**
 * @param {boolean} value
 * @return {!proto.NuntioConnect.Scope} returns this
 */
proto.NuntioConnect.Scope.prototype.setReadGender = function(value) {
  return jspb.Message.setProto3BooleanField(this, 4, value);
};


/**
 * optional bool read_created_at = 5;
 * @return {boolean}
 */
proto.NuntioConnect.Scope.prototype.getReadCreatedAt = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 5, false));
};


/**
 * @param {boolean} value
 * @return {!proto.NuntioConnect.Scope} returns this
 */
proto.NuntioConnect.Scope.prototype.setReadCreatedAt = function(value) {
  return jspb.Message.setProto3BooleanField(this, 5, value);
};


/**
 * optional bool offline_access = 6;
 * @return {boolean}
 */
proto.NuntioConnect.Scope.prototype.getOfflineAccess = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 6, false));
};


/**
 * @param {boolean} value
 * @return {!proto.NuntioConnect.Scope} returns this
 */
proto.NuntioConnect.Scope.prototype.setOfflineAccess = function(value) {
  return jspb.Message.setProto3BooleanField(this, 6, value);
};


/**
 * optional bool read_name = 7;
 * @return {boolean}
 */
proto.NuntioConnect.Scope.prototype.getReadName = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 7, false));
};


/**
 * @param {boolean} value
 * @return {!proto.NuntioConnect.Scope} returns this
 */
proto.NuntioConnect.Scope.prototype.setReadName = function(value) {
  return jspb.Message.setProto3BooleanField(this, 7, value);
};


/**
 * optional bool read_birthday = 8;
 * @return {boolean}
 */
proto.NuntioConnect.Scope.prototype.getReadBirthday = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 8, false));
};


/**
 * @param {boolean} value
 * @return {!proto.NuntioConnect.Scope} returns this
 */
proto.NuntioConnect.Scope.prototype.setReadBirthday = function(value) {
  return jspb.Message.setProto3BooleanField(this, 8, value);
};


/**
 * optional bool read_country = 9;
 * @return {boolean}
 */
proto.NuntioConnect.Scope.prototype.getReadCountry = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 9, false));
};


/**
 * @param {boolean} value
 * @return {!proto.NuntioConnect.Scope} returns this
 */
proto.NuntioConnect.Scope.prototype.setReadCountry = function(value) {
  return jspb.Message.setProto3BooleanField(this, 9, value);
};


/**
 * optional string name = 10;
 * @return {string}
 */
proto.NuntioConnect.Scope.prototype.getName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 10, ""));
};


/**
 * @param {string} value
 * @return {!proto.NuntioConnect.Scope} returns this
 */
proto.NuntioConnect.Scope.prototype.setName = function(value) {
  return jspb.Message.setProto3StringField(this, 10, value);
};


/**
 * optional string key = 11;
 * @return {string}
 */
proto.NuntioConnect.Scope.prototype.getKey = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 11, ""));
};


/**
 * @param {string} value
 * @return {!proto.NuntioConnect.Scope} returns this
 */
proto.NuntioConnect.Scope.prototype.setKey = function(value) {
  return jspb.Message.setProto3StringField(this, 11, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.NuntioConnect.Grant.prototype.toObject = function(opt_includeInstance) {
  return proto.NuntioConnect.Grant.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.NuntioConnect.Grant} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.NuntioConnect.Grant.toObject = function(includeInstance, msg) {
  var f, obj = {
    grantType: jspb.Message.getFieldWithDefault(msg, 1, 0),
    name: jspb.Message.getFieldWithDefault(msg, 2, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.NuntioConnect.Grant}
 */
proto.NuntioConnect.Grant.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.NuntioConnect.Grant;
  return proto.NuntioConnect.Grant.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.NuntioConnect.Grant} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.NuntioConnect.Grant}
 */
proto.NuntioConnect.Grant.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!proto.NuntioConnect.GrantType} */ (reader.readEnum());
      msg.setGrantType(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setName(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.NuntioConnect.Grant.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.NuntioConnect.Grant.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.NuntioConnect.Grant} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.NuntioConnect.Grant.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getGrantType();
  if (f !== 0.0) {
    writer.writeEnum(
      1,
      f
    );
  }
  f = message.getName();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
};


/**
 * optional GrantType grant_type = 1;
 * @return {!proto.NuntioConnect.GrantType}
 */
proto.NuntioConnect.Grant.prototype.getGrantType = function() {
  return /** @type {!proto.NuntioConnect.GrantType} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {!proto.NuntioConnect.GrantType} value
 * @return {!proto.NuntioConnect.Grant} returns this
 */
proto.NuntioConnect.Grant.prototype.setGrantType = function(value) {
  return jspb.Message.setProto3EnumField(this, 1, value);
};


/**
 * optional string name = 2;
 * @return {string}
 */
proto.NuntioConnect.Grant.prototype.getName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.NuntioConnect.Grant} returns this
 */
proto.NuntioConnect.Grant.prototype.setName = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.NuntioConnect.Response.prototype.toObject = function(opt_includeInstance) {
  return proto.NuntioConnect.Response.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.NuntioConnect.Response} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.NuntioConnect.Response.toObject = function(includeInstance, msg) {
  var f, obj = {
    responseType: jspb.Message.getFieldWithDefault(msg, 1, 0),
    name: jspb.Message.getFieldWithDefault(msg, 2, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.NuntioConnect.Response}
 */
proto.NuntioConnect.Response.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.NuntioConnect.Response;
  return proto.NuntioConnect.Response.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.NuntioConnect.Response} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.NuntioConnect.Response}
 */
proto.NuntioConnect.Response.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!proto.NuntioConnect.ResponseType} */ (reader.readEnum());
      msg.setResponseType(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setName(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.NuntioConnect.Response.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.NuntioConnect.Response.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.NuntioConnect.Response} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.NuntioConnect.Response.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getResponseType();
  if (f !== 0.0) {
    writer.writeEnum(
      1,
      f
    );
  }
  f = message.getName();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
};


/**
 * optional ResponseType response_type = 1;
 * @return {!proto.NuntioConnect.ResponseType}
 */
proto.NuntioConnect.Response.prototype.getResponseType = function() {
  return /** @type {!proto.NuntioConnect.ResponseType} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {!proto.NuntioConnect.ResponseType} value
 * @return {!proto.NuntioConnect.Response} returns this
 */
proto.NuntioConnect.Response.prototype.setResponseType = function(value) {
  return jspb.Message.setProto3EnumField(this, 1, value);
};


/**
 * optional string name = 2;
 * @return {string}
 */
proto.NuntioConnect.Response.prototype.getName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.NuntioConnect.Response} returns this
 */
proto.NuntioConnect.Response.prototype.setName = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.NuntioConnect.Metadata.repeatedFields_ = [21,6];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.NuntioConnect.Metadata.prototype.toObject = function(opt_includeInstance) {
  return proto.NuntioConnect.Metadata.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.NuntioConnect.Metadata} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.NuntioConnect.Metadata.toObject = function(includeInstance, msg) {
  var f, obj = {
    isOpen: jspb.Message.getBooleanFieldWithDefault(msg, 1, false),
    allowedEmailsList: (f = jspb.Message.getRepeatedField(msg, 21)) == null ? undefined : f,
    about: jspb.Message.getFieldWithDefault(msg, 3, ""),
    ageLowerLimit: jspb.Message.getFieldWithDefault(msg, 4, 0),
    ageUpperLimit: jspb.Message.getFieldWithDefault(msg, 5, 0),
    allowedCountriesList: (f = jspb.Message.getRepeatedField(msg, 6)) == null ? undefined : f,
    onlyVerifiedUsers: jspb.Message.getBooleanFieldWithDefault(msg, 7, false)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.NuntioConnect.Metadata}
 */
proto.NuntioConnect.Metadata.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.NuntioConnect.Metadata;
  return proto.NuntioConnect.Metadata.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.NuntioConnect.Metadata} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.NuntioConnect.Metadata}
 */
proto.NuntioConnect.Metadata.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setIsOpen(value);
      break;
    case 21:
      var value = /** @type {string} */ (reader.readString());
      msg.addAllowedEmails(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setAbout(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setAgeLowerLimit(value);
      break;
    case 5:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setAgeUpperLimit(value);
      break;
    case 6:
      var values = /** @type {!Array<!proto.Nuntio.CountryCode>} */ (reader.isDelimited() ? reader.readPackedEnum() : [reader.readEnum()]);
      for (var i = 0; i < values.length; i++) {
        msg.addAllowedCountries(values[i]);
      }
      break;
    case 7:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setOnlyVerifiedUsers(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.NuntioConnect.Metadata.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.NuntioConnect.Metadata.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.NuntioConnect.Metadata} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.NuntioConnect.Metadata.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getIsOpen();
  if (f) {
    writer.writeBool(
      1,
      f
    );
  }
  f = message.getAllowedEmailsList();
  if (f.length > 0) {
    writer.writeRepeatedString(
      21,
      f
    );
  }
  f = message.getAbout();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = message.getAgeLowerLimit();
  if (f !== 0) {
    writer.writeInt32(
      4,
      f
    );
  }
  f = message.getAgeUpperLimit();
  if (f !== 0) {
    writer.writeInt32(
      5,
      f
    );
  }
  f = message.getAllowedCountriesList();
  if (f.length > 0) {
    writer.writePackedEnum(
      6,
      f
    );
  }
  f = message.getOnlyVerifiedUsers();
  if (f) {
    writer.writeBool(
      7,
      f
    );
  }
};


/**
 * optional bool is_open = 1;
 * @return {boolean}
 */
proto.NuntioConnect.Metadata.prototype.getIsOpen = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 1, false));
};


/**
 * @param {boolean} value
 * @return {!proto.NuntioConnect.Metadata} returns this
 */
proto.NuntioConnect.Metadata.prototype.setIsOpen = function(value) {
  return jspb.Message.setProto3BooleanField(this, 1, value);
};


/**
 * repeated string allowed_emails = 21;
 * @return {!Array<string>}
 */
proto.NuntioConnect.Metadata.prototype.getAllowedEmailsList = function() {
  return /** @type {!Array<string>} */ (jspb.Message.getRepeatedField(this, 21));
};


/**
 * @param {!Array<string>} value
 * @return {!proto.NuntioConnect.Metadata} returns this
 */
proto.NuntioConnect.Metadata.prototype.setAllowedEmailsList = function(value) {
  return jspb.Message.setField(this, 21, value || []);
};


/**
 * @param {string} value
 * @param {number=} opt_index
 * @return {!proto.NuntioConnect.Metadata} returns this
 */
proto.NuntioConnect.Metadata.prototype.addAllowedEmails = function(value, opt_index) {
  return jspb.Message.addToRepeatedField(this, 21, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.NuntioConnect.Metadata} returns this
 */
proto.NuntioConnect.Metadata.prototype.clearAllowedEmailsList = function() {
  return this.setAllowedEmailsList([]);
};


/**
 * optional string about = 3;
 * @return {string}
 */
proto.NuntioConnect.Metadata.prototype.getAbout = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * @param {string} value
 * @return {!proto.NuntioConnect.Metadata} returns this
 */
proto.NuntioConnect.Metadata.prototype.setAbout = function(value) {
  return jspb.Message.setProto3StringField(this, 3, value);
};


/**
 * optional int32 age_lower_limit = 4;
 * @return {number}
 */
proto.NuntioConnect.Metadata.prototype.getAgeLowerLimit = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/**
 * @param {number} value
 * @return {!proto.NuntioConnect.Metadata} returns this
 */
proto.NuntioConnect.Metadata.prototype.setAgeLowerLimit = function(value) {
  return jspb.Message.setProto3IntField(this, 4, value);
};


/**
 * optional int32 age_upper_limit = 5;
 * @return {number}
 */
proto.NuntioConnect.Metadata.prototype.getAgeUpperLimit = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 5, 0));
};


/**
 * @param {number} value
 * @return {!proto.NuntioConnect.Metadata} returns this
 */
proto.NuntioConnect.Metadata.prototype.setAgeUpperLimit = function(value) {
  return jspb.Message.setProto3IntField(this, 5, value);
};


/**
 * repeated Nuntio.CountryCode allowed_countries = 6;
 * @return {!Array<!proto.Nuntio.CountryCode>}
 */
proto.NuntioConnect.Metadata.prototype.getAllowedCountriesList = function() {
  return /** @type {!Array<!proto.Nuntio.CountryCode>} */ (jspb.Message.getRepeatedField(this, 6));
};


/**
 * @param {!Array<!proto.Nuntio.CountryCode>} value
 * @return {!proto.NuntioConnect.Metadata} returns this
 */
proto.NuntioConnect.Metadata.prototype.setAllowedCountriesList = function(value) {
  return jspb.Message.setField(this, 6, value || []);
};


/**
 * @param {!proto.Nuntio.CountryCode} value
 * @param {number=} opt_index
 * @return {!proto.NuntioConnect.Metadata} returns this
 */
proto.NuntioConnect.Metadata.prototype.addAllowedCountries = function(value, opt_index) {
  return jspb.Message.addToRepeatedField(this, 6, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.NuntioConnect.Metadata} returns this
 */
proto.NuntioConnect.Metadata.prototype.clearAllowedCountriesList = function() {
  return this.setAllowedCountriesList([]);
};


/**
 * optional bool only_verified_users = 7;
 * @return {boolean}
 */
proto.NuntioConnect.Metadata.prototype.getOnlyVerifiedUsers = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 7, false));
};


/**
 * @param {boolean} value
 * @return {!proto.NuntioConnect.Metadata} returns this
 */
proto.NuntioConnect.Metadata.prototype.setOnlyVerifiedUsers = function(value) {
  return jspb.Message.setProto3BooleanField(this, 7, value);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.NuntioConnect.App.repeatedFields_ = [10,11,12,13,14,17,18,19,20];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.NuntioConnect.App.prototype.toObject = function(opt_includeInstance) {
  return proto.NuntioConnect.App.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.NuntioConnect.App} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.NuntioConnect.App.toObject = function(includeInstance, msg) {
  var f, obj = {
    id: jspb.Message.getFieldWithDefault(msg, 1, ""),
    name: jspb.Message.getFieldWithDefault(msg, 2, ""),
    password: jspb.Message.getFieldWithDefault(msg, 3, ""),
    email: jspb.Message.getFieldWithDefault(msg, 4, ""),
    ownerId: jspb.Message.getFieldWithDefault(msg, 5, ""),
    website: jspb.Message.getFieldWithDefault(msg, 6, ""),
    logo: jspb.Message.getFieldWithDefault(msg, 7, ""),
    terms: jspb.Message.getFieldWithDefault(msg, 8, ""),
    metadata: (f = msg.getMetadata()) && proto.NuntioConnect.Metadata.toObject(includeInstance, f),
    audienceList: (f = jspb.Message.getRepeatedField(msg, 10)) == null ? undefined : f,
    scopesList: (f = jspb.Message.getRepeatedField(msg, 11)) == null ? undefined : f,
    grantsList: (f = jspb.Message.getRepeatedField(msg, 12)) == null ? undefined : f,
    responsesList: (f = jspb.Message.getRepeatedField(msg, 13)) == null ? undefined : f,
    callbacksList: (f = jspb.Message.getRepeatedField(msg, 14)) == null ? undefined : f,
    createdAt: (f = msg.getCreatedAt()) && google_protobuf_timestamp_pb.Timestamp.toObject(includeInstance, f),
    updatedAt: (f = msg.getUpdatedAt()) && google_protobuf_timestamp_pb.Timestamp.toObject(includeInstance, f),
    availableScopesList: jspb.Message.toObjectList(msg.getAvailableScopesList(),
    proto.NuntioConnect.Scope.toObject, includeInstance),
    availableGrantsList: jspb.Message.toObjectList(msg.getAvailableGrantsList(),
    proto.NuntioConnect.Grant.toObject, includeInstance),
    availableResponsesList: jspb.Message.toObjectList(msg.getAvailableResponsesList(),
    proto.NuntioConnect.Response.toObject, includeInstance),
    availableCountriesList: jspb.Message.toObjectList(msg.getAvailableCountriesList(),
    nuntio_pb.Country.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.NuntioConnect.App}
 */
proto.NuntioConnect.App.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.NuntioConnect.App;
  return proto.NuntioConnect.App.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.NuntioConnect.App} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.NuntioConnect.App}
 */
proto.NuntioConnect.App.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setId(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setName(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setPassword(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setEmail(value);
      break;
    case 5:
      var value = /** @type {string} */ (reader.readString());
      msg.setOwnerId(value);
      break;
    case 6:
      var value = /** @type {string} */ (reader.readString());
      msg.setWebsite(value);
      break;
    case 7:
      var value = /** @type {string} */ (reader.readString());
      msg.setLogo(value);
      break;
    case 8:
      var value = /** @type {string} */ (reader.readString());
      msg.setTerms(value);
      break;
    case 9:
      var value = new proto.NuntioConnect.Metadata;
      reader.readMessage(value,proto.NuntioConnect.Metadata.deserializeBinaryFromReader);
      msg.setMetadata(value);
      break;
    case 10:
      var value = /** @type {string} */ (reader.readString());
      msg.addAudience(value);
      break;
    case 11:
      var values = /** @type {!Array<!proto.NuntioConnect.ScopeType>} */ (reader.isDelimited() ? reader.readPackedEnum() : [reader.readEnum()]);
      for (var i = 0; i < values.length; i++) {
        msg.addScopes(values[i]);
      }
      break;
    case 12:
      var values = /** @type {!Array<!proto.NuntioConnect.GrantType>} */ (reader.isDelimited() ? reader.readPackedEnum() : [reader.readEnum()]);
      for (var i = 0; i < values.length; i++) {
        msg.addGrants(values[i]);
      }
      break;
    case 13:
      var values = /** @type {!Array<!proto.NuntioConnect.ResponseType>} */ (reader.isDelimited() ? reader.readPackedEnum() : [reader.readEnum()]);
      for (var i = 0; i < values.length; i++) {
        msg.addResponses(values[i]);
      }
      break;
    case 14:
      var value = /** @type {string} */ (reader.readString());
      msg.addCallbacks(value);
      break;
    case 15:
      var value = new google_protobuf_timestamp_pb.Timestamp;
      reader.readMessage(value,google_protobuf_timestamp_pb.Timestamp.deserializeBinaryFromReader);
      msg.setCreatedAt(value);
      break;
    case 16:
      var value = new google_protobuf_timestamp_pb.Timestamp;
      reader.readMessage(value,google_protobuf_timestamp_pb.Timestamp.deserializeBinaryFromReader);
      msg.setUpdatedAt(value);
      break;
    case 17:
      var value = new proto.NuntioConnect.Scope;
      reader.readMessage(value,proto.NuntioConnect.Scope.deserializeBinaryFromReader);
      msg.addAvailableScopes(value);
      break;
    case 18:
      var value = new proto.NuntioConnect.Grant;
      reader.readMessage(value,proto.NuntioConnect.Grant.deserializeBinaryFromReader);
      msg.addAvailableGrants(value);
      break;
    case 19:
      var value = new proto.NuntioConnect.Response;
      reader.readMessage(value,proto.NuntioConnect.Response.deserializeBinaryFromReader);
      msg.addAvailableResponses(value);
      break;
    case 20:
      var value = new nuntio_pb.Country;
      reader.readMessage(value,nuntio_pb.Country.deserializeBinaryFromReader);
      msg.addAvailableCountries(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.NuntioConnect.App.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.NuntioConnect.App.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.NuntioConnect.App} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.NuntioConnect.App.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getId();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getName();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getPassword();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = message.getEmail();
  if (f.length > 0) {
    writer.writeString(
      4,
      f
    );
  }
  f = message.getOwnerId();
  if (f.length > 0) {
    writer.writeString(
      5,
      f
    );
  }
  f = message.getWebsite();
  if (f.length > 0) {
    writer.writeString(
      6,
      f
    );
  }
  f = message.getLogo();
  if (f.length > 0) {
    writer.writeString(
      7,
      f
    );
  }
  f = message.getTerms();
  if (f.length > 0) {
    writer.writeString(
      8,
      f
    );
  }
  f = message.getMetadata();
  if (f != null) {
    writer.writeMessage(
      9,
      f,
      proto.NuntioConnect.Metadata.serializeBinaryToWriter
    );
  }
  f = message.getAudienceList();
  if (f.length > 0) {
    writer.writeRepeatedString(
      10,
      f
    );
  }
  f = message.getScopesList();
  if (f.length > 0) {
    writer.writePackedEnum(
      11,
      f
    );
  }
  f = message.getGrantsList();
  if (f.length > 0) {
    writer.writePackedEnum(
      12,
      f
    );
  }
  f = message.getResponsesList();
  if (f.length > 0) {
    writer.writePackedEnum(
      13,
      f
    );
  }
  f = message.getCallbacksList();
  if (f.length > 0) {
    writer.writeRepeatedString(
      14,
      f
    );
  }
  f = message.getCreatedAt();
  if (f != null) {
    writer.writeMessage(
      15,
      f,
      google_protobuf_timestamp_pb.Timestamp.serializeBinaryToWriter
    );
  }
  f = message.getUpdatedAt();
  if (f != null) {
    writer.writeMessage(
      16,
      f,
      google_protobuf_timestamp_pb.Timestamp.serializeBinaryToWriter
    );
  }
  f = message.getAvailableScopesList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      17,
      f,
      proto.NuntioConnect.Scope.serializeBinaryToWriter
    );
  }
  f = message.getAvailableGrantsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      18,
      f,
      proto.NuntioConnect.Grant.serializeBinaryToWriter
    );
  }
  f = message.getAvailableResponsesList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      19,
      f,
      proto.NuntioConnect.Response.serializeBinaryToWriter
    );
  }
  f = message.getAvailableCountriesList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      20,
      f,
      nuntio_pb.Country.serializeBinaryToWriter
    );
  }
};


/**
 * optional string id = 1;
 * @return {string}
 */
proto.NuntioConnect.App.prototype.getId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.NuntioConnect.App} returns this
 */
proto.NuntioConnect.App.prototype.setId = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string name = 2;
 * @return {string}
 */
proto.NuntioConnect.App.prototype.getName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.NuntioConnect.App} returns this
 */
proto.NuntioConnect.App.prototype.setName = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional string password = 3;
 * @return {string}
 */
proto.NuntioConnect.App.prototype.getPassword = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * @param {string} value
 * @return {!proto.NuntioConnect.App} returns this
 */
proto.NuntioConnect.App.prototype.setPassword = function(value) {
  return jspb.Message.setProto3StringField(this, 3, value);
};


/**
 * optional string email = 4;
 * @return {string}
 */
proto.NuntioConnect.App.prototype.getEmail = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/**
 * @param {string} value
 * @return {!proto.NuntioConnect.App} returns this
 */
proto.NuntioConnect.App.prototype.setEmail = function(value) {
  return jspb.Message.setProto3StringField(this, 4, value);
};


/**
 * optional string owner_id = 5;
 * @return {string}
 */
proto.NuntioConnect.App.prototype.getOwnerId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 5, ""));
};


/**
 * @param {string} value
 * @return {!proto.NuntioConnect.App} returns this
 */
proto.NuntioConnect.App.prototype.setOwnerId = function(value) {
  return jspb.Message.setProto3StringField(this, 5, value);
};


/**
 * optional string website = 6;
 * @return {string}
 */
proto.NuntioConnect.App.prototype.getWebsite = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 6, ""));
};


/**
 * @param {string} value
 * @return {!proto.NuntioConnect.App} returns this
 */
proto.NuntioConnect.App.prototype.setWebsite = function(value) {
  return jspb.Message.setProto3StringField(this, 6, value);
};


/**
 * optional string logo = 7;
 * @return {string}
 */
proto.NuntioConnect.App.prototype.getLogo = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 7, ""));
};


/**
 * @param {string} value
 * @return {!proto.NuntioConnect.App} returns this
 */
proto.NuntioConnect.App.prototype.setLogo = function(value) {
  return jspb.Message.setProto3StringField(this, 7, value);
};


/**
 * optional string terms = 8;
 * @return {string}
 */
proto.NuntioConnect.App.prototype.getTerms = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 8, ""));
};


/**
 * @param {string} value
 * @return {!proto.NuntioConnect.App} returns this
 */
proto.NuntioConnect.App.prototype.setTerms = function(value) {
  return jspb.Message.setProto3StringField(this, 8, value);
};


/**
 * optional Metadata metadata = 9;
 * @return {?proto.NuntioConnect.Metadata}
 */
proto.NuntioConnect.App.prototype.getMetadata = function() {
  return /** @type{?proto.NuntioConnect.Metadata} */ (
    jspb.Message.getWrapperField(this, proto.NuntioConnect.Metadata, 9));
};


/**
 * @param {?proto.NuntioConnect.Metadata|undefined} value
 * @return {!proto.NuntioConnect.App} returns this
*/
proto.NuntioConnect.App.prototype.setMetadata = function(value) {
  return jspb.Message.setWrapperField(this, 9, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.NuntioConnect.App} returns this
 */
proto.NuntioConnect.App.prototype.clearMetadata = function() {
  return this.setMetadata(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.NuntioConnect.App.prototype.hasMetadata = function() {
  return jspb.Message.getField(this, 9) != null;
};


/**
 * repeated string audience = 10;
 * @return {!Array<string>}
 */
proto.NuntioConnect.App.prototype.getAudienceList = function() {
  return /** @type {!Array<string>} */ (jspb.Message.getRepeatedField(this, 10));
};


/**
 * @param {!Array<string>} value
 * @return {!proto.NuntioConnect.App} returns this
 */
proto.NuntioConnect.App.prototype.setAudienceList = function(value) {
  return jspb.Message.setField(this, 10, value || []);
};


/**
 * @param {string} value
 * @param {number=} opt_index
 * @return {!proto.NuntioConnect.App} returns this
 */
proto.NuntioConnect.App.prototype.addAudience = function(value, opt_index) {
  return jspb.Message.addToRepeatedField(this, 10, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.NuntioConnect.App} returns this
 */
proto.NuntioConnect.App.prototype.clearAudienceList = function() {
  return this.setAudienceList([]);
};


/**
 * repeated ScopeType scopes = 11;
 * @return {!Array<!proto.NuntioConnect.ScopeType>}
 */
proto.NuntioConnect.App.prototype.getScopesList = function() {
  return /** @type {!Array<!proto.NuntioConnect.ScopeType>} */ (jspb.Message.getRepeatedField(this, 11));
};


/**
 * @param {!Array<!proto.NuntioConnect.ScopeType>} value
 * @return {!proto.NuntioConnect.App} returns this
 */
proto.NuntioConnect.App.prototype.setScopesList = function(value) {
  return jspb.Message.setField(this, 11, value || []);
};


/**
 * @param {!proto.NuntioConnect.ScopeType} value
 * @param {number=} opt_index
 * @return {!proto.NuntioConnect.App} returns this
 */
proto.NuntioConnect.App.prototype.addScopes = function(value, opt_index) {
  return jspb.Message.addToRepeatedField(this, 11, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.NuntioConnect.App} returns this
 */
proto.NuntioConnect.App.prototype.clearScopesList = function() {
  return this.setScopesList([]);
};


/**
 * repeated GrantType grants = 12;
 * @return {!Array<!proto.NuntioConnect.GrantType>}
 */
proto.NuntioConnect.App.prototype.getGrantsList = function() {
  return /** @type {!Array<!proto.NuntioConnect.GrantType>} */ (jspb.Message.getRepeatedField(this, 12));
};


/**
 * @param {!Array<!proto.NuntioConnect.GrantType>} value
 * @return {!proto.NuntioConnect.App} returns this
 */
proto.NuntioConnect.App.prototype.setGrantsList = function(value) {
  return jspb.Message.setField(this, 12, value || []);
};


/**
 * @param {!proto.NuntioConnect.GrantType} value
 * @param {number=} opt_index
 * @return {!proto.NuntioConnect.App} returns this
 */
proto.NuntioConnect.App.prototype.addGrants = function(value, opt_index) {
  return jspb.Message.addToRepeatedField(this, 12, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.NuntioConnect.App} returns this
 */
proto.NuntioConnect.App.prototype.clearGrantsList = function() {
  return this.setGrantsList([]);
};


/**
 * repeated ResponseType responses = 13;
 * @return {!Array<!proto.NuntioConnect.ResponseType>}
 */
proto.NuntioConnect.App.prototype.getResponsesList = function() {
  return /** @type {!Array<!proto.NuntioConnect.ResponseType>} */ (jspb.Message.getRepeatedField(this, 13));
};


/**
 * @param {!Array<!proto.NuntioConnect.ResponseType>} value
 * @return {!proto.NuntioConnect.App} returns this
 */
proto.NuntioConnect.App.prototype.setResponsesList = function(value) {
  return jspb.Message.setField(this, 13, value || []);
};


/**
 * @param {!proto.NuntioConnect.ResponseType} value
 * @param {number=} opt_index
 * @return {!proto.NuntioConnect.App} returns this
 */
proto.NuntioConnect.App.prototype.addResponses = function(value, opt_index) {
  return jspb.Message.addToRepeatedField(this, 13, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.NuntioConnect.App} returns this
 */
proto.NuntioConnect.App.prototype.clearResponsesList = function() {
  return this.setResponsesList([]);
};


/**
 * repeated string callbacks = 14;
 * @return {!Array<string>}
 */
proto.NuntioConnect.App.prototype.getCallbacksList = function() {
  return /** @type {!Array<string>} */ (jspb.Message.getRepeatedField(this, 14));
};


/**
 * @param {!Array<string>} value
 * @return {!proto.NuntioConnect.App} returns this
 */
proto.NuntioConnect.App.prototype.setCallbacksList = function(value) {
  return jspb.Message.setField(this, 14, value || []);
};


/**
 * @param {string} value
 * @param {number=} opt_index
 * @return {!proto.NuntioConnect.App} returns this
 */
proto.NuntioConnect.App.prototype.addCallbacks = function(value, opt_index) {
  return jspb.Message.addToRepeatedField(this, 14, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.NuntioConnect.App} returns this
 */
proto.NuntioConnect.App.prototype.clearCallbacksList = function() {
  return this.setCallbacksList([]);
};


/**
 * optional google.protobuf.Timestamp created_at = 15;
 * @return {?proto.google.protobuf.Timestamp}
 */
proto.NuntioConnect.App.prototype.getCreatedAt = function() {
  return /** @type{?proto.google.protobuf.Timestamp} */ (
    jspb.Message.getWrapperField(this, google_protobuf_timestamp_pb.Timestamp, 15));
};


/**
 * @param {?proto.google.protobuf.Timestamp|undefined} value
 * @return {!proto.NuntioConnect.App} returns this
*/
proto.NuntioConnect.App.prototype.setCreatedAt = function(value) {
  return jspb.Message.setWrapperField(this, 15, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.NuntioConnect.App} returns this
 */
proto.NuntioConnect.App.prototype.clearCreatedAt = function() {
  return this.setCreatedAt(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.NuntioConnect.App.prototype.hasCreatedAt = function() {
  return jspb.Message.getField(this, 15) != null;
};


/**
 * optional google.protobuf.Timestamp updated_at = 16;
 * @return {?proto.google.protobuf.Timestamp}
 */
proto.NuntioConnect.App.prototype.getUpdatedAt = function() {
  return /** @type{?proto.google.protobuf.Timestamp} */ (
    jspb.Message.getWrapperField(this, google_protobuf_timestamp_pb.Timestamp, 16));
};


/**
 * @param {?proto.google.protobuf.Timestamp|undefined} value
 * @return {!proto.NuntioConnect.App} returns this
*/
proto.NuntioConnect.App.prototype.setUpdatedAt = function(value) {
  return jspb.Message.setWrapperField(this, 16, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.NuntioConnect.App} returns this
 */
proto.NuntioConnect.App.prototype.clearUpdatedAt = function() {
  return this.setUpdatedAt(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.NuntioConnect.App.prototype.hasUpdatedAt = function() {
  return jspb.Message.getField(this, 16) != null;
};


/**
 * repeated Scope available_scopes = 17;
 * @return {!Array<!proto.NuntioConnect.Scope>}
 */
proto.NuntioConnect.App.prototype.getAvailableScopesList = function() {
  return /** @type{!Array<!proto.NuntioConnect.Scope>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.NuntioConnect.Scope, 17));
};


/**
 * @param {!Array<!proto.NuntioConnect.Scope>} value
 * @return {!proto.NuntioConnect.App} returns this
*/
proto.NuntioConnect.App.prototype.setAvailableScopesList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 17, value);
};


/**
 * @param {!proto.NuntioConnect.Scope=} opt_value
 * @param {number=} opt_index
 * @return {!proto.NuntioConnect.Scope}
 */
proto.NuntioConnect.App.prototype.addAvailableScopes = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 17, opt_value, proto.NuntioConnect.Scope, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.NuntioConnect.App} returns this
 */
proto.NuntioConnect.App.prototype.clearAvailableScopesList = function() {
  return this.setAvailableScopesList([]);
};


/**
 * repeated Grant available_grants = 18;
 * @return {!Array<!proto.NuntioConnect.Grant>}
 */
proto.NuntioConnect.App.prototype.getAvailableGrantsList = function() {
  return /** @type{!Array<!proto.NuntioConnect.Grant>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.NuntioConnect.Grant, 18));
};


/**
 * @param {!Array<!proto.NuntioConnect.Grant>} value
 * @return {!proto.NuntioConnect.App} returns this
*/
proto.NuntioConnect.App.prototype.setAvailableGrantsList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 18, value);
};


/**
 * @param {!proto.NuntioConnect.Grant=} opt_value
 * @param {number=} opt_index
 * @return {!proto.NuntioConnect.Grant}
 */
proto.NuntioConnect.App.prototype.addAvailableGrants = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 18, opt_value, proto.NuntioConnect.Grant, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.NuntioConnect.App} returns this
 */
proto.NuntioConnect.App.prototype.clearAvailableGrantsList = function() {
  return this.setAvailableGrantsList([]);
};


/**
 * repeated Response available_responses = 19;
 * @return {!Array<!proto.NuntioConnect.Response>}
 */
proto.NuntioConnect.App.prototype.getAvailableResponsesList = function() {
  return /** @type{!Array<!proto.NuntioConnect.Response>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.NuntioConnect.Response, 19));
};


/**
 * @param {!Array<!proto.NuntioConnect.Response>} value
 * @return {!proto.NuntioConnect.App} returns this
*/
proto.NuntioConnect.App.prototype.setAvailableResponsesList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 19, value);
};


/**
 * @param {!proto.NuntioConnect.Response=} opt_value
 * @param {number=} opt_index
 * @return {!proto.NuntioConnect.Response}
 */
proto.NuntioConnect.App.prototype.addAvailableResponses = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 19, opt_value, proto.NuntioConnect.Response, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.NuntioConnect.App} returns this
 */
proto.NuntioConnect.App.prototype.clearAvailableResponsesList = function() {
  return this.setAvailableResponsesList([]);
};


/**
 * repeated Nuntio.Country available_countries = 20;
 * @return {!Array<!proto.Nuntio.Country>}
 */
proto.NuntioConnect.App.prototype.getAvailableCountriesList = function() {
  return /** @type{!Array<!proto.Nuntio.Country>} */ (
    jspb.Message.getRepeatedWrapperField(this, nuntio_pb.Country, 20));
};


/**
 * @param {!Array<!proto.Nuntio.Country>} value
 * @return {!proto.NuntioConnect.App} returns this
*/
proto.NuntioConnect.App.prototype.setAvailableCountriesList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 20, value);
};


/**
 * @param {!proto.Nuntio.Country=} opt_value
 * @param {number=} opt_index
 * @return {!proto.Nuntio.Country}
 */
proto.NuntioConnect.App.prototype.addAvailableCountries = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 20, opt_value, proto.Nuntio.Country, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.NuntioConnect.App} returns this
 */
proto.NuntioConnect.App.prototype.clearAvailableCountriesList = function() {
  return this.setAvailableCountriesList([]);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.NuntioConnect.ConnectPublicRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.NuntioConnect.ConnectPublicRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.NuntioConnect.ConnectPublicRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.NuntioConnect.ConnectPublicRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    challenge: jspb.Message.getFieldWithDefault(msg, 1, ""),
    email: jspb.Message.getFieldWithDefault(msg, 2, ""),
    password: jspb.Message.getFieldWithDefault(msg, 3, ""),
    gender: jspb.Message.getFieldWithDefault(msg, 4, 0),
    consent: jspb.Message.getBooleanFieldWithDefault(msg, 5, false),
    identityToken: jspb.Message.getFieldWithDefault(msg, 6, ""),
    verificationProvider: (f = msg.getVerificationProvider()) && nuntio_pb.VerificationProvider.toObject(includeInstance, f),
    authToken: jspb.Message.getFieldWithDefault(msg, 8, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.NuntioConnect.ConnectPublicRequest}
 */
proto.NuntioConnect.ConnectPublicRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.NuntioConnect.ConnectPublicRequest;
  return proto.NuntioConnect.ConnectPublicRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.NuntioConnect.ConnectPublicRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.NuntioConnect.ConnectPublicRequest}
 */
proto.NuntioConnect.ConnectPublicRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setChallenge(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setEmail(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setPassword(value);
      break;
    case 4:
      var value = /** @type {!proto.Nuntio.Gender} */ (reader.readEnum());
      msg.setGender(value);
      break;
    case 5:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setConsent(value);
      break;
    case 6:
      var value = /** @type {string} */ (reader.readString());
      msg.setIdentityToken(value);
      break;
    case 7:
      var value = new nuntio_pb.VerificationProvider;
      reader.readMessage(value,nuntio_pb.VerificationProvider.deserializeBinaryFromReader);
      msg.setVerificationProvider(value);
      break;
    case 8:
      var value = /** @type {string} */ (reader.readString());
      msg.setAuthToken(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.NuntioConnect.ConnectPublicRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.NuntioConnect.ConnectPublicRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.NuntioConnect.ConnectPublicRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.NuntioConnect.ConnectPublicRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getChallenge();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getEmail();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getPassword();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = message.getGender();
  if (f !== 0.0) {
    writer.writeEnum(
      4,
      f
    );
  }
  f = message.getConsent();
  if (f) {
    writer.writeBool(
      5,
      f
    );
  }
  f = message.getIdentityToken();
  if (f.length > 0) {
    writer.writeString(
      6,
      f
    );
  }
  f = message.getVerificationProvider();
  if (f != null) {
    writer.writeMessage(
      7,
      f,
      nuntio_pb.VerificationProvider.serializeBinaryToWriter
    );
  }
  f = message.getAuthToken();
  if (f.length > 0) {
    writer.writeString(
      8,
      f
    );
  }
};


/**
 * optional string challenge = 1;
 * @return {string}
 */
proto.NuntioConnect.ConnectPublicRequest.prototype.getChallenge = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.NuntioConnect.ConnectPublicRequest} returns this
 */
proto.NuntioConnect.ConnectPublicRequest.prototype.setChallenge = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string email = 2;
 * @return {string}
 */
proto.NuntioConnect.ConnectPublicRequest.prototype.getEmail = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.NuntioConnect.ConnectPublicRequest} returns this
 */
proto.NuntioConnect.ConnectPublicRequest.prototype.setEmail = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional string password = 3;
 * @return {string}
 */
proto.NuntioConnect.ConnectPublicRequest.prototype.getPassword = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * @param {string} value
 * @return {!proto.NuntioConnect.ConnectPublicRequest} returns this
 */
proto.NuntioConnect.ConnectPublicRequest.prototype.setPassword = function(value) {
  return jspb.Message.setProto3StringField(this, 3, value);
};


/**
 * optional Nuntio.Gender gender = 4;
 * @return {!proto.Nuntio.Gender}
 */
proto.NuntioConnect.ConnectPublicRequest.prototype.getGender = function() {
  return /** @type {!proto.Nuntio.Gender} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/**
 * @param {!proto.Nuntio.Gender} value
 * @return {!proto.NuntioConnect.ConnectPublicRequest} returns this
 */
proto.NuntioConnect.ConnectPublicRequest.prototype.setGender = function(value) {
  return jspb.Message.setProto3EnumField(this, 4, value);
};


/**
 * optional bool consent = 5;
 * @return {boolean}
 */
proto.NuntioConnect.ConnectPublicRequest.prototype.getConsent = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 5, false));
};


/**
 * @param {boolean} value
 * @return {!proto.NuntioConnect.ConnectPublicRequest} returns this
 */
proto.NuntioConnect.ConnectPublicRequest.prototype.setConsent = function(value) {
  return jspb.Message.setProto3BooleanField(this, 5, value);
};


/**
 * optional string identity_token = 6;
 * @return {string}
 */
proto.NuntioConnect.ConnectPublicRequest.prototype.getIdentityToken = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 6, ""));
};


/**
 * @param {string} value
 * @return {!proto.NuntioConnect.ConnectPublicRequest} returns this
 */
proto.NuntioConnect.ConnectPublicRequest.prototype.setIdentityToken = function(value) {
  return jspb.Message.setProto3StringField(this, 6, value);
};


/**
 * optional Nuntio.VerificationProvider verification_provider = 7;
 * @return {?proto.Nuntio.VerificationProvider}
 */
proto.NuntioConnect.ConnectPublicRequest.prototype.getVerificationProvider = function() {
  return /** @type{?proto.Nuntio.VerificationProvider} */ (
    jspb.Message.getWrapperField(this, nuntio_pb.VerificationProvider, 7));
};


/**
 * @param {?proto.Nuntio.VerificationProvider|undefined} value
 * @return {!proto.NuntioConnect.ConnectPublicRequest} returns this
*/
proto.NuntioConnect.ConnectPublicRequest.prototype.setVerificationProvider = function(value) {
  return jspb.Message.setWrapperField(this, 7, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.NuntioConnect.ConnectPublicRequest} returns this
 */
proto.NuntioConnect.ConnectPublicRequest.prototype.clearVerificationProvider = function() {
  return this.setVerificationProvider(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.NuntioConnect.ConnectPublicRequest.prototype.hasVerificationProvider = function() {
  return jspb.Message.getField(this, 7) != null;
};


/**
 * optional string auth_token = 8;
 * @return {string}
 */
proto.NuntioConnect.ConnectPublicRequest.prototype.getAuthToken = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 8, ""));
};


/**
 * @param {string} value
 * @return {!proto.NuntioConnect.ConnectPublicRequest} returns this
 */
proto.NuntioConnect.ConnectPublicRequest.prototype.setAuthToken = function(value) {
  return jspb.Message.setProto3StringField(this, 8, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.NuntioConnect.ConnectPublicResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.NuntioConnect.ConnectPublicResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.NuntioConnect.ConnectPublicResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.NuntioConnect.ConnectPublicResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    app: (f = msg.getApp()) && proto.NuntioConnect.App.toObject(includeInstance, f),
    email: jspb.Message.getFieldWithDefault(msg, 2, ""),
    redirectAddr: jspb.Message.getFieldWithDefault(msg, 3, ""),
    error: (f = msg.getError()) && nuntio_pb.Error.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.NuntioConnect.ConnectPublicResponse}
 */
proto.NuntioConnect.ConnectPublicResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.NuntioConnect.ConnectPublicResponse;
  return proto.NuntioConnect.ConnectPublicResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.NuntioConnect.ConnectPublicResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.NuntioConnect.ConnectPublicResponse}
 */
proto.NuntioConnect.ConnectPublicResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.NuntioConnect.App;
      reader.readMessage(value,proto.NuntioConnect.App.deserializeBinaryFromReader);
      msg.setApp(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setEmail(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setRedirectAddr(value);
      break;
    case 4:
      var value = new nuntio_pb.Error;
      reader.readMessage(value,nuntio_pb.Error.deserializeBinaryFromReader);
      msg.setError(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.NuntioConnect.ConnectPublicResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.NuntioConnect.ConnectPublicResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.NuntioConnect.ConnectPublicResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.NuntioConnect.ConnectPublicResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getApp();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.NuntioConnect.App.serializeBinaryToWriter
    );
  }
  f = message.getEmail();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getRedirectAddr();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = message.getError();
  if (f != null) {
    writer.writeMessage(
      4,
      f,
      nuntio_pb.Error.serializeBinaryToWriter
    );
  }
};


/**
 * optional App app = 1;
 * @return {?proto.NuntioConnect.App}
 */
proto.NuntioConnect.ConnectPublicResponse.prototype.getApp = function() {
  return /** @type{?proto.NuntioConnect.App} */ (
    jspb.Message.getWrapperField(this, proto.NuntioConnect.App, 1));
};


/**
 * @param {?proto.NuntioConnect.App|undefined} value
 * @return {!proto.NuntioConnect.ConnectPublicResponse} returns this
*/
proto.NuntioConnect.ConnectPublicResponse.prototype.setApp = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.NuntioConnect.ConnectPublicResponse} returns this
 */
proto.NuntioConnect.ConnectPublicResponse.prototype.clearApp = function() {
  return this.setApp(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.NuntioConnect.ConnectPublicResponse.prototype.hasApp = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional string email = 2;
 * @return {string}
 */
proto.NuntioConnect.ConnectPublicResponse.prototype.getEmail = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.NuntioConnect.ConnectPublicResponse} returns this
 */
proto.NuntioConnect.ConnectPublicResponse.prototype.setEmail = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional string redirect_addr = 3;
 * @return {string}
 */
proto.NuntioConnect.ConnectPublicResponse.prototype.getRedirectAddr = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * @param {string} value
 * @return {!proto.NuntioConnect.ConnectPublicResponse} returns this
 */
proto.NuntioConnect.ConnectPublicResponse.prototype.setRedirectAddr = function(value) {
  return jspb.Message.setProto3StringField(this, 3, value);
};


/**
 * optional Nuntio.Error error = 4;
 * @return {?proto.Nuntio.Error}
 */
proto.NuntioConnect.ConnectPublicResponse.prototype.getError = function() {
  return /** @type{?proto.Nuntio.Error} */ (
    jspb.Message.getWrapperField(this, nuntio_pb.Error, 4));
};


/**
 * @param {?proto.Nuntio.Error|undefined} value
 * @return {!proto.NuntioConnect.ConnectPublicResponse} returns this
*/
proto.NuntioConnect.ConnectPublicResponse.prototype.setError = function(value) {
  return jspb.Message.setWrapperField(this, 4, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.NuntioConnect.ConnectPublicResponse} returns this
 */
proto.NuntioConnect.ConnectPublicResponse.prototype.clearError = function() {
  return this.setError(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.NuntioConnect.ConnectPublicResponse.prototype.hasError = function() {
  return jspb.Message.getField(this, 4) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.NuntioConnect.ConnectAdminRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.NuntioConnect.ConnectAdminRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.NuntioConnect.ConnectAdminRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.NuntioConnect.ConnectAdminRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    app: (f = msg.getApp()) && proto.NuntioConnect.App.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.NuntioConnect.ConnectAdminRequest}
 */
proto.NuntioConnect.ConnectAdminRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.NuntioConnect.ConnectAdminRequest;
  return proto.NuntioConnect.ConnectAdminRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.NuntioConnect.ConnectAdminRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.NuntioConnect.ConnectAdminRequest}
 */
proto.NuntioConnect.ConnectAdminRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.NuntioConnect.App;
      reader.readMessage(value,proto.NuntioConnect.App.deserializeBinaryFromReader);
      msg.setApp(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.NuntioConnect.ConnectAdminRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.NuntioConnect.ConnectAdminRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.NuntioConnect.ConnectAdminRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.NuntioConnect.ConnectAdminRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getApp();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.NuntioConnect.App.serializeBinaryToWriter
    );
  }
};


/**
 * optional App app = 1;
 * @return {?proto.NuntioConnect.App}
 */
proto.NuntioConnect.ConnectAdminRequest.prototype.getApp = function() {
  return /** @type{?proto.NuntioConnect.App} */ (
    jspb.Message.getWrapperField(this, proto.NuntioConnect.App, 1));
};


/**
 * @param {?proto.NuntioConnect.App|undefined} value
 * @return {!proto.NuntioConnect.ConnectAdminRequest} returns this
*/
proto.NuntioConnect.ConnectAdminRequest.prototype.setApp = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.NuntioConnect.ConnectAdminRequest} returns this
 */
proto.NuntioConnect.ConnectAdminRequest.prototype.clearApp = function() {
  return this.setApp(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.NuntioConnect.ConnectAdminRequest.prototype.hasApp = function() {
  return jspb.Message.getField(this, 1) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.NuntioConnect.ConnectAdminResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.NuntioConnect.ConnectAdminResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.NuntioConnect.ConnectAdminResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.NuntioConnect.ConnectAdminResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    app: (f = msg.getApp()) && proto.NuntioConnect.App.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.NuntioConnect.ConnectAdminResponse}
 */
proto.NuntioConnect.ConnectAdminResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.NuntioConnect.ConnectAdminResponse;
  return proto.NuntioConnect.ConnectAdminResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.NuntioConnect.ConnectAdminResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.NuntioConnect.ConnectAdminResponse}
 */
proto.NuntioConnect.ConnectAdminResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.NuntioConnect.App;
      reader.readMessage(value,proto.NuntioConnect.App.deserializeBinaryFromReader);
      msg.setApp(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.NuntioConnect.ConnectAdminResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.NuntioConnect.ConnectAdminResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.NuntioConnect.ConnectAdminResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.NuntioConnect.ConnectAdminResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getApp();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.NuntioConnect.App.serializeBinaryToWriter
    );
  }
};


/**
 * optional App app = 1;
 * @return {?proto.NuntioConnect.App}
 */
proto.NuntioConnect.ConnectAdminResponse.prototype.getApp = function() {
  return /** @type{?proto.NuntioConnect.App} */ (
    jspb.Message.getWrapperField(this, proto.NuntioConnect.App, 1));
};


/**
 * @param {?proto.NuntioConnect.App|undefined} value
 * @return {!proto.NuntioConnect.ConnectAdminResponse} returns this
*/
proto.NuntioConnect.ConnectAdminResponse.prototype.setApp = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.NuntioConnect.ConnectAdminResponse} returns this
 */
proto.NuntioConnect.ConnectAdminResponse.prototype.clearApp = function() {
  return this.setApp(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.NuntioConnect.ConnectAdminResponse.prototype.hasApp = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * @enum {number}
 */
proto.NuntioConnect.ScopeType = {
  INVALID_SCOPE: 0,
  DEFAULT_SCOPE: 1,
  OFFLINE_ACCESS_SCOPE: 2,
  GENDER_SCOPE: 3,
  NAME_SCOPE: 4,
  BIRTHDAY_SCOPE: 5,
  COUNTRY_SCOPE: 6,
  EMAIL_SCOPE: 7
};

/**
 * @enum {number}
 */
proto.NuntioConnect.GrantType = {
  INVALID_GRANT: 0,
  AUTH_GRANT: 1,
  REFRESH_GRANT: 2
};

/**
 * @enum {number}
 */
proto.NuntioConnect.ResponseType = {
  INVALID_RESPONSE: 0,
  CODE_RESPONSE: 1,
  TOKEN_RESPONSE: 2,
  ID_RESPONSE: 3
};

goog.object.extend(exports, proto.NuntioConnect);
